
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a8  08007070  08007070  00017070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008618  08008618  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008620  08008620  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200001e0  08008808  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08008808  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f467  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024af  00000000  00000000  0002f677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a57e  00000000  00000000  00031b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0003c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c8  00000000  00000000  0003c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a01  00000000  00000000  0003e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e564  00000000  00000000  00060b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf1e  00000000  00000000  0006f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cfdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027c0  00000000  00000000  0013d030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007058 	.word	0x08007058

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08007058 	.word	0x08007058

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <getKernelMachineClassification>:
*
* @author Miranda Meza Cesar
* CREATION DATE: NOVEMBER 27, 2021
* LAST UPDATE: DECEMBER 04, 2021
*/
void getKernelMachineClassification(double *X, double *Y, int n, int m, int p, int N, double zeroEpsilon, char Kernel[], char isInteractionTerms, char isForceGaussianCurve, char isVariableOptimizer, double *coefficients) {
 8000f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f04:	ed2d 8b0a 	vpush	{d8-d12}
 8000f08:	b0a5      	sub	sp, #148	; 0x94
	// If the machine learning features are less than the value of one, then emit an error message and terminate the program. Otherwise, continue with the program.
	if (m < 1) {
 8000f0a:	2b00      	cmp	r3, #0
void getKernelMachineClassification(double *X, double *Y, int n, int m, int p, int N, double zeroEpsilon, char Kernel[], char isInteractionTerms, char isForceGaussianCurve, char isVariableOptimizer, double *coefficients) {
 8000f0c:	9116      	str	r1, [sp, #88]	; 0x58
 8000f0e:	9201      	str	r2, [sp, #4]
 8000f10:	e9dd 2138 	ldrd	r2, r1, [sp, #224]	; 0xe0
 8000f14:	910c      	str	r1, [sp, #48]	; 0x30
 8000f16:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8000f18:	9014      	str	r0, [sp, #80]	; 0x50
 8000f1a:	ee09 1a10 	vmov	s18, r1
 8000f1e:	f89d 10ec 	ldrb.w	r1, [sp, #236]	; 0xec
 8000f22:	9103      	str	r1, [sp, #12]
 8000f24:	f89d 10f0 	ldrb.w	r1, [sp, #240]	; 0xf0
 8000f28:	9120      	str	r1, [sp, #128]	; 0x80
 8000f2a:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8000f2c:	9118      	str	r1, [sp, #96]	; 0x60
	if (m < 1) {
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	f341 83c8 	ble.w	80026c4 <getKernelMachineClassification+0x17c4>
		printf("\nERROR: The machine learning features (independent variables) must be equal or greater than 1 for this particular algorithm.\n");
		exit(1);
	}
	// If the samples are less than the number of machine learning features, then emit an error message and terminate the program. Otherwise, continue with the program.
	if (n < m) {
 8000f34:	9901      	ldr	r1, [sp, #4]
 8000f36:	428b      	cmp	r3, r1
 8000f38:	f301 83e2 	bgt.w	8002700 <getKernelMachineClassification+0x1800>
		printf("\nERROR: The number of samples provided must be equal or higher than the number of machine learning features (independent variables) for this particular algorithm.\n");
		exit(1);
	}
	// If the output of the system under study is different than the value of one, then emit an error message and terminate the program. Otherwise, continue with the program.
	if (p != 1) {
 8000f3c:	2a01      	cmp	r2, #1
 8000f3e:	f041 83c7 	bne.w	80026d0 <getKernelMachineClassification+0x17d0>
 8000f42:	eeb0 8a40 	vmov.f32	s16, s0
 8000f46:	eef0 8a60 	vmov.f32	s17, s1
 8000f4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
		printf("\nERROR: With respect to the system under study, there must only be only one output for this particular algorithm.\n");
		exit(1);
	}
	// If the output values of the system under study has a value that is not within the restrictions requested for this algorithm, then emit an error message and terminate the program.
	for (int currentRow=0; currentRow<n; currentRow++) {
		if ((Y[currentRow]!=-1) && (Y[currentRow]!=1)) {
 8000f4c:	4f8e      	ldr	r7, [pc, #568]	; (8001188 <getKernelMachineClassification+0x288>)
 8000f4e:	f8df b24c 	ldr.w	fp, [pc, #588]	; 800119c <getKernelMachineClassification+0x29c>
 8000f52:	9315      	str	r3, [sp, #84]	; 0x54
 8000f54:	2600      	movs	r6, #0
 8000f56:	f04f 0a00 	mov.w	sl, #0
	if (p != 1) {
 8000f5a:	4699      	mov	r9, r3
	for (int currentRow=0; currentRow<n; currentRow++) {
 8000f5c:	f04f 0800 	mov.w	r8, #0
		if ((Y[currentRow]!=-1) && (Y[currentRow]!=1)) {
 8000f60:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 8000f64:	4632      	mov	r2, r6
 8000f66:	463b      	mov	r3, r7
 8000f68:	4620      	mov	r0, r4
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	f7ff fddc 	bl	8000b28 <__aeabi_dcmpeq>
 8000f70:	b940      	cbnz	r0, 8000f84 <getKernelMachineClassification+0x84>
 8000f72:	4620      	mov	r0, r4
 8000f74:	4629      	mov	r1, r5
 8000f76:	4652      	mov	r2, sl
 8000f78:	465b      	mov	r3, fp
 8000f7a:	f7ff fdd5 	bl	8000b28 <__aeabi_dcmpeq>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	f001 837b 	beq.w	800267a <getKernelMachineClassification+0x177a>
	for (int currentRow=0; currentRow<n; currentRow++) {
 8000f84:	9b01      	ldr	r3, [sp, #4]
 8000f86:	f108 0801 	add.w	r8, r8, #1
 8000f8a:	4543      	cmp	r3, r8
 8000f8c:	dce8      	bgt.n	8000f60 <getKernelMachineClassification+0x60>
			exit(1);
		}
	}
	
	// Apply the Kernel that was requested by the implementer of this function.
	if (strcmp(Kernel, "linear") == 0) {
 8000f8e:	497f      	ldr	r1, [pc, #508]	; (800118c <getKernelMachineClassification+0x28c>)
 8000f90:	ee19 0a10 	vmov	r0, s18
 8000f94:	f7ff f93c 	bl	8000210 <strcmp>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	f000 81e0 	beq.w	8001360 <getKernelMachineClassification+0x460>
		trainLinearKernel(X, Y, n, m, p, isVariableOptimizer, coefficients); // Train the Kernel machine classifier with a linear kernel.
	} else if (strcmp(Kernel, "polynomial") == 0) {
 8000fa0:	497b      	ldr	r1, [pc, #492]	; (8001190 <getKernelMachineClassification+0x290>)
 8000fa2:	ee19 0a10 	vmov	r0, s18
 8000fa6:	f7ff f933 	bl	8000210 <strcmp>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	f000 80f8 	beq.w	80011a0 <getKernelMachineClassification+0x2a0>
		trainPolynomialKernel(X, Y, n, m, p, N, isInteractionTerms, isVariableOptimizer, coefficients); // Train the Kernel machine classifier with a polynomial kernel.
	} else if (strcmp(Kernel, "logistic") == 0) {
 8000fb0:	4978      	ldr	r1, [pc, #480]	; (8001194 <getKernelMachineClassification+0x294>)
 8000fb2:	ee19 0a10 	vmov	r0, s18
 8000fb6:	f7ff f92b 	bl	8000210 <strcmp>
 8000fba:	901b      	str	r0, [sp, #108]	; 0x6c
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	f001 804d 	beq.w	800205c <getKernelMachineClassification+0x115c>
		trainLogisticKernel(X, Y, n, m, p, isVariableOptimizer, coefficients); // Train the Kernel machine classifier with a logistic kernel.
	} else if (strcmp(Kernel, "gaussian") == 0) {
 8000fc2:	ee19 0a10 	vmov	r0, s18
 8000fc6:	4974      	ldr	r1, [pc, #464]	; (8001198 <getKernelMachineClassification+0x298>)
 8000fc8:	f7ff f922 	bl	8000210 <strcmp>
 8000fcc:	9019      	str	r0, [sp, #100]	; 0x64
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	f041 838a 	bne.w	80026e8 <getKernelMachineClassification+0x17e8>
* LAST UPDATE: DECEMBER 04, 2021
*/
static void trainGaussianKernel(double *X, double *Y, int n, int m, int p, double zeroEpsilon, char isForceGaussianCurve, char isVariableOptimizer, double *coefficients) {
	// If the argument flag variable "isForceGaussianCurve" is different than the value of "1" and "0", then emit an error message and terminate the program. Otherwise, continue with the program.
	if (isForceGaussianCurve != 1) {
		if (isForceGaussianCurve != 0) {
 8000fd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	f201 8357 	bhi.w	800268a <getKernelMachineClassification+0x178a>
	int N = 2; // This variable is used to store the desired order of degree for the machine learning model to be trained.
	int currentRowTimesmTimesNplusOne; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
	int currentRowTimesM; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
	int currentRowAndColumn; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
	int currentRowAndColumn2; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
	int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000fdc:	9f02      	ldr	r7, [sp, #8]
	int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
	int NplusOne = (N+1); //This variable is used to store a repetitive matheamtical operation, for performance purposes.
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000fde:	9d01      	ldr	r5, [sp, #4]
	int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000fe0:	007b      	lsls	r3, r7, #1
 8000fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8000fe4:	3301      	adds	r3, #1
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000fe6:	461a      	mov	r2, r3
	int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000fe8:	9303      	str	r3, [sp, #12]
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000fea:	462b      	mov	r3, r5
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8000ff0:	00ea      	lsls	r2, r5, #3
 8000ff2:	4610      	mov	r0, r2
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000ff4:	00dc      	lsls	r4, r3, #3
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	920e      	str	r2, [sp, #56]	; 0x38
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000ffa:	9322      	str	r3, [sp, #136]	; 0x88
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8000ffc:	f002 fed8 	bl	8003db0 <malloc>
 8001000:	4603      	mov	r3, r0
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001002:	4620      	mov	r0, r4
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8001004:	461e      	mov	r6, r3
 8001006:	931b      	str	r3, [sp, #108]	; 0x6c
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001008:	f002 fed2 	bl	8003db0 <malloc>
 800100c:	4603      	mov	r3, r0
	double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 800100e:	4620      	mov	r0, r4
	double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001010:	930c      	str	r3, [sp, #48]	; 0x30
	double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 8001012:	f002 fecd 	bl	8003db0 <malloc>
	int currentRow2; // This variable is used in the for-loop for the matrix transpose that will be made.
	int currentColumn2 = 0; // This variable is used in the for-loop for the matrix transpose that will be made.
 8001016:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
	double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 800101a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800101c:	910b      	str	r1, [sp, #44]	; 0x2c
	double increaseExponentialOfThisValue; // Variable used to store the value that wants to be raised exponentially.
	for (int currentRow=0; currentRow<n; currentRow++) {
		// --------------- PREPROCESSING OF THE OUTPUT DATA --------------- //
		if (Y[currentRow] == 1) {
			Y_tilde[currentRow] = log(1);
 800101e:	ed9f 9b56 	vldr	d9, [pc, #344]	; 8001178 <getKernelMachineClassification+0x278>
 8001022:	4601      	mov	r1, r0
	double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 8001024:	e9cd bb08 	strd	fp, fp, [sp, #32]
 8001028:	4441      	add	r1, r8
 800102a:	9616      	str	r6, [sp, #88]	; 0x58
 800102c:	960a      	str	r6, [sp, #40]	; 0x28
 800102e:	9004      	str	r0, [sp, #16]
	for (int currentRow=0; currentRow<n; currentRow++) {
 8001030:	9106      	str	r1, [sp, #24]
 8001032:	012e      	lsls	r6, r5, #4
	int currentColumn2 = 0; // This variable is used in the for-loop for the matrix transpose that will be made.
 8001034:	46d9      	mov	r9, fp
		if (Y[currentRow] == 1) {
 8001036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001038:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 800103c:	2200      	movs	r2, #0
 800103e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001040:	4620      	mov	r0, r4
 8001042:	4b56      	ldr	r3, [pc, #344]	; (800119c <getKernelMachineClassification+0x29c>)
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff fd6f 	bl	8000b28 <__aeabi_dcmpeq>
 800104a:	2800      	cmp	r0, #0
 800104c:	f000 816c 	beq.w	8001328 <getKernelMachineClassification+0x428>
			Y_tilde[currentRow] = log(1);
 8001050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001052:	ed83 9b00 	vstr	d9, [r3]
		
		// --------------- PREPROCESSING OF THE INPUT DATA --------------- //
		currentRow2 = 0; // We reset the counters used in the following for-loop.
		currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
		currentRowTimesM = currentRow*m;
		X_tilde[currentRowTimesmTimesNplusOne] = 1;
 8001056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001058:	9a08      	ldr	r2, [sp, #32]
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 800105a:	9c06      	ldr	r4, [sp, #24]
		X_tilde[currentRowTimesmTimesNplusOne] = 1;
 800105c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8001060:	ed9f 7b47 	vldr	d7, [pc, #284]	; 8001180 <getKernelMachineClassification+0x280>
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 8001064:	9b04      	ldr	r3, [sp, #16]
 8001066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001068:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800106c:	ed83 7b00 	vstr	d7, [r3]
		X_tilde[currentRowTimesmTimesNplusOne] = 1;
 8001070:	ed85 7b00 	vstr	d7, [r5]
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8001074:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001076:	f04f 0a01 	mov.w	sl, #1
 800107a:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
			currentRowAndColumn = (currentColumn-1)*N + currentRowTimesmTimesNplusOne;
			increaseExponentialOfThisValue = 1;
			for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
				currentRowAndColumn2 = currentExponential + currentRowAndColumn;
				increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumn-1 + currentRowTimesM];
 800107e:	e8fb 2302 	ldrd	r2, r3, [fp], #8
				X_tilde[currentRowAndColumn2] = increaseExponentialOfThisValue;
 8001082:	e9c5 2302 	strd	r2, r3, [r5, #8]
				currentRow2++;
				TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn2];
 8001086:	e9c4 2300 	strd	r2, r3, [r4]
				increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumn-1 + currentRowTimesM];
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f7ff fae3 	bl	8000658 <__aeabi_dmul>
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8001092:	f10a 0a01 	add.w	sl, sl, #1
				TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn2];
 8001096:	eb04 0308 	add.w	r3, r4, r8
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 800109a:	4557      	cmp	r7, sl
				X_tilde[currentRowAndColumn2] = increaseExponentialOfThisValue;
 800109c:	e9e5 0104 	strd	r0, r1, [r5, #16]!
				TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn2];
 80010a0:	e9c3 0100 	strd	r0, r1, [r3]
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80010a4:	4434      	add	r4, r6
 80010a6:	daea      	bge.n	800107e <getKernelMachineClassification+0x17e>
			}
		}
		currentColumn2++;
 80010a8:	9b06      	ldr	r3, [sp, #24]
 80010aa:	9a03      	ldr	r2, [sp, #12]
 80010ac:	3308      	adds	r3, #8
 80010ae:	9306      	str	r3, [sp, #24]
 80010b0:	9b08      	ldr	r3, [sp, #32]
 80010b2:	4413      	add	r3, r2
 80010b4:	9308      	str	r3, [sp, #32]
 80010b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010b8:	443b      	add	r3, r7
 80010ba:	9309      	str	r3, [sp, #36]	; 0x24
 80010bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010be:	3308      	adds	r3, #8
 80010c0:	930a      	str	r3, [sp, #40]	; 0x28
	for (int currentRow=0; currentRow<n; currentRow++) {
 80010c2:	9b01      	ldr	r3, [sp, #4]
		currentColumn2++;
 80010c4:	f109 0901 	add.w	r9, r9, #1
	for (int currentRow=0; currentRow<n; currentRow++) {
 80010c8:	454b      	cmp	r3, r9
 80010ca:	dcb4      	bgt.n	8001036 <getKernelMachineClassification+0x136>
	
	// -------------------- SOLUTION OF THE KERNEL -------------------- //
	// In order to start obtaining the coefficients, we multiply the matrix "TransposeOf_X_tilde" with the matrix "X_tilde" and store the result in the matrix "matMul1".
	int currentRowTimesN; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
	int currentColumnTimesN; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
	double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 80010cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80010ce:	fb02 f002 	mul.w	r0, r2, r2
 80010d2:	00dd      	lsls	r5, r3, #3
 80010d4:	2108      	movs	r1, #8
 80010d6:	4614      	mov	r4, r2
 80010d8:	9521      	str	r5, [sp, #132]	; 0x84
 80010da:	f002 fe23 	bl	8003d24 <calloc>
 80010de:	f105 0308 	add.w	r3, r5, #8
 80010e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80010e4:	18c3      	adds	r3, r0, r3
 80010e6:	9308      	str	r3, [sp, #32]
 80010e8:	00e3      	lsls	r3, r4, #3
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 80010ea:	2200      	movs	r2, #0
 80010ec:	9309      	str	r3, [sp, #36]	; 0x24
 80010ee:	f8dd b004 	ldr.w	fp, [sp, #4]
 80010f2:	9b04      	ldr	r3, [sp, #16]
	double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 80010f4:	9010      	str	r0, [sp, #64]	; 0x40
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 80010f6:	9206      	str	r2, [sp, #24]
 80010f8:	9023      	str	r0, [sp, #140]	; 0x8c
	double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 80010fa:	920d      	str	r2, [sp, #52]	; 0x34
 80010fc:	930a      	str	r3, [sp, #40]	; 0x28
 80010fe:	930b      	str	r3, [sp, #44]	; 0x2c
		currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
		currentRowTimesN = currentRow*n;
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 8001100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001102:	f04f 0800 	mov.w	r8, #0
 8001106:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
			currentColumnTimesN = currentColumn*n;
			currentRowAndColumn = currentColumn + currentRowTimesmTimesNplusOne;
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800110a:	9b04      	ldr	r3, [sp, #16]
 800110c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8001110:	e8f6 4502 	ldrd	r4, r5, [r6], #8
 8001114:	eb03 0ac8 	add.w	sl, r3, r8, lsl #3
 8001118:	2700      	movs	r7, #0
				// Here we want to multiply "TransposeOf_X_tilde" with the matrix "X_tilde", but we will use "TransposeOf_X_tilde" for such multiplication since they contain the same data, for performance purposes.
				matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 800111a:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 800111e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8001122:	f7ff fa99 	bl	8000658 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f8dd 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001132:	3701      	adds	r7, #1
 8001134:	45bb      	cmp	fp, r7
				matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800113a:	dcee      	bgt.n	800111a <getKernelMachineClassification+0x21a>
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 800113c:	9b08      	ldr	r3, [sp, #32]
 800113e:	42b3      	cmp	r3, r6
 8001140:	e946 4502 	strd	r4, r5, [r6, #-8]
 8001144:	44d8      	add	r8, fp
 8001146:	d1e0      	bne.n	800110a <getKernelMachineClassification+0x20a>
 8001148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800114a:	461a      	mov	r2, r3
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 800114c:	440a      	add	r2, r1
 800114e:	9208      	str	r2, [sp, #32]
 8001150:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001154:	9b06      	ldr	r3, [sp, #24]
 8001156:	440a      	add	r2, r1
 8001158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800115a:	920b      	str	r2, [sp, #44]	; 0x2c
 800115c:	9a03      	ldr	r2, [sp, #12]
 800115e:	4608      	mov	r0, r1
 8001160:	3301      	adds	r3, #1
 8001162:	4410      	add	r0, r2
 8001164:	429a      	cmp	r2, r3
 8001166:	4601      	mov	r1, r0
 8001168:	900d      	str	r0, [sp, #52]	; 0x34
 800116a:	f000 82d3 	beq.w	8001714 <getKernelMachineClassification+0x814>
 800116e:	9306      	str	r3, [sp, #24]
 8001170:	460a      	mov	r2, r1
 8001172:	e7c5      	b.n	8001100 <getKernelMachineClassification+0x200>
 8001174:	f3af 8000 	nop.w
	...
 8001184:	3ff00000 	.word	0x3ff00000
 8001188:	bff00000 	.word	0xbff00000
 800118c:	08007d0c 	.word	0x08007d0c
 8001190:	08007d14 	.word	0x08007d14
 8001194:	08007e24 	.word	0x08007e24
 8001198:	08007e30 	.word	0x08007e30
 800119c:	3ff00000 	.word	0x3ff00000
	if (isInteractionTerms == 1) { // Include the interaction terms in the training process of the model to be generated.
 80011a0:	9b03      	ldr	r3, [sp, #12]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	f001 829a 	beq.w	80026dc <getKernelMachineClassification+0x17dc>
	} else if (isInteractionTerms == 0) { // Do not inlcude the interaction terms in the training process of the model to be generated.		
 80011a8:	461d      	mov	r5, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f041 82a2 	bne.w	80026f4 <getKernelMachineClassification+0x17f4>
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 80011b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80011b2:	9a02      	ldr	r2, [sp, #8]
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 80011b4:	9b01      	ldr	r3, [sp, #4]
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 80011b6:	fb07 f602 	mul.w	r6, r7, r2
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 80011ba:	fb06 3203 	mla	r2, r6, r3, r3
 80011be:	00d4      	lsls	r4, r2, #3
 80011c0:	4620      	mov	r0, r4
 80011c2:	921a      	str	r2, [sp, #104]	; 0x68
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 80011c4:	9608      	str	r6, [sp, #32]
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 80011c6:	f002 fdf3 	bl	8003db0 <malloc>
 80011ca:	4603      	mov	r3, r0
		double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80011cc:	4620      	mov	r0, r4
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 80011ce:	930d      	str	r3, [sp, #52]	; 0x34
 80011d0:	461c      	mov	r4, r3
		double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80011d2:	f002 fded 	bl	8003db0 <malloc>
 80011d6:	3408      	adds	r4, #8
 80011d8:	9b01      	ldr	r3, [sp, #4]
		int currentColumn2 = 0; // This variable is used in the for-loop for the matrix transpose that will be made.
 80011da:	9509      	str	r5, [sp, #36]	; 0x24
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 80011dc:	1c71      	adds	r1, r6, #1
		double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80011de:	e9cd 400f 	strd	r4, r0, [sp, #60]	; 0x3c
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 80011e2:	9104      	str	r1, [sp, #16]
		for (int currentRow=0; currentRow<n; currentRow++) {
 80011e4:	00fa      	lsls	r2, r7, #3
 80011e6:	00c9      	lsls	r1, r1, #3
 80011e8:	00db      	lsls	r3, r3, #3
		double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80011ea:	9003      	str	r0, [sp, #12]
 80011ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80011ee:	9106      	str	r1, [sp, #24]
 80011f0:	9512      	str	r5, [sp, #72]	; 0x48
 80011f2:	920e      	str	r2, [sp, #56]	; 0x38
 80011f4:	930a      	str	r3, [sp, #40]	; 0x28
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
 80011f6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8001350 <getKernelMachineClassification+0x450>
			TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 80011fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
 80011fc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
			TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 80011fe:	eca3 7b02 	vstmia	r3!, {d7}
 8001202:	9310      	str	r3, [sp, #64]	; 0x40
 8001204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001206:	2b00      	cmp	r3, #0
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
 8001208:	ed06 7b02 	vstr	d7, [r6, #-8]
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 800120c:	dd27      	ble.n	800125e <getKernelMachineClassification+0x35e>
 800120e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001210:	9a12      	ldr	r2, [sp, #72]	; 0x48
			currentRow2 = 0; // We reset the counters used in the following for-loop.
 8001212:	f04f 0a00 	mov.w	sl, #0
 8001216:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 800121a:	2701      	movs	r7, #1
				for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
 800121c:	9b01      	ldr	r3, [sp, #4]
				increaseExponentialOfThisValue = 1;
 800121e:	494e      	ldr	r1, [pc, #312]	; (8001358 <getKernelMachineClassification+0x458>)
 8001220:	fb0a 3403 	mla	r4, sl, r3, r3
 8001224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001226:	441c      	add	r4, r3
 8001228:	9b03      	ldr	r3, [sp, #12]
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumn-1 + currentRowTimesM];
 800122a:	e8fb 8902 	ldrd	r8, r9, [fp], #8
 800122e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001234:	4635      	mov	r5, r6
				increaseExponentialOfThisValue = 1;
 8001236:	2000      	movs	r0, #0
 8001238:	441e      	add	r6, r3
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumn-1 + currentRowTimesM];
 800123a:	464b      	mov	r3, r9
 800123c:	4642      	mov	r2, r8
 800123e:	f7ff fa0b 	bl	8000658 <__aeabi_dmul>
					X_tilde[currentRowAndColumn2] = increaseExponentialOfThisValue;
 8001242:	e8e5 0102 	strd	r0, r1, [r5], #8
					TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn2];
 8001246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
 8001248:	42ae      	cmp	r6, r5
					TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn2];
 800124a:	e9c4 0100 	strd	r0, r1, [r4]
				for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
 800124e:	441c      	add	r4, r3
 8001250:	d1f3      	bne.n	800123a <getKernelMachineClassification+0x33a>
 8001252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001254:	449a      	add	sl, r3
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8001256:	9b02      	ldr	r3, [sp, #8]
 8001258:	3701      	adds	r7, #1
 800125a:	42bb      	cmp	r3, r7
 800125c:	dade      	bge.n	800121c <getKernelMachineClassification+0x31c>
			currentColumn2++;
 800125e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001260:	9906      	ldr	r1, [sp, #24]
 8001262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001264:	440a      	add	r2, r1
 8001266:	920f      	str	r2, [sp, #60]	; 0x3c
 8001268:	9902      	ldr	r1, [sp, #8]
 800126a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800126c:	440a      	add	r2, r1
 800126e:	9212      	str	r2, [sp, #72]	; 0x48
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001270:	9a01      	ldr	r2, [sp, #4]
			currentColumn2++;
 8001272:	3301      	adds	r3, #1
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001274:	429a      	cmp	r2, r3
			currentColumn2++;
 8001276:	9309      	str	r3, [sp, #36]	; 0x24
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001278:	dcbd      	bgt.n	80011f6 <getKernelMachineClassification+0x2f6>
		double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 800127a:	9c04      	ldr	r4, [sp, #16]
 800127c:	2108      	movs	r1, #8
 800127e:	fb04 f004 	mul.w	r0, r4, r4
 8001282:	f002 fd4f 	bl	8003d24 <calloc>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001286:	2c00      	cmp	r4, #0
		double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8001288:	4601      	mov	r1, r0
 800128a:	9013      	str	r0, [sp, #76]	; 0x4c
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 800128c:	f340 86c2 	ble.w	8002014 <getKernelMachineClassification+0x1114>
 8001290:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001294:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8001298:	00e3      	lsls	r3, r4, #3
 800129a:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 800129e:	ee08 3a10 	vmov	s16, r3
 80012a2:	2000      	movs	r0, #0
 80012a4:	f8dd b004 	ldr.w	fp, [sp, #4]
 80012a8:	9219      	str	r2, [sp, #100]	; 0x64
 80012aa:	9202      	str	r2, [sp, #8]
 80012ac:	9009      	str	r0, [sp, #36]	; 0x24
 80012ae:	900e      	str	r0, [sp, #56]	; 0x38
 80012b0:	911c      	str	r1, [sp, #112]	; 0x70
 80012b2:	4602      	mov	r2, r0
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 80012b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80012b6:	f04f 0a00 	mov.w	sl, #0
 80012ba:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
				for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80012be:	9b03      	ldr	r3, [sp, #12]
 80012c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80012c4:	e8f7 4502 	ldrd	r4, r5, [r7], #8
 80012c8:	eb03 09ca 	add.w	r9, r3, sl, lsl #3
 80012cc:	2600      	movs	r6, #0
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 80012ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80012d2:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 80012d6:	f7ff f9bf 	bl	8000658 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7ff f803 	bl	80002ec <__adddf3>
				for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80012e6:	3601      	adds	r6, #1
 80012e8:	45b3      	cmp	fp, r6
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 80012ea:	4604      	mov	r4, r0
 80012ec:	460d      	mov	r5, r1
				for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80012ee:	dcee      	bgt.n	80012ce <getKernelMachineClassification+0x3ce>
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 80012f0:	9b02      	ldr	r3, [sp, #8]
 80012f2:	42bb      	cmp	r3, r7
 80012f4:	e947 4502 	strd	r4, r5, [r7, #-8]
 80012f8:	44da      	add	sl, fp
 80012fa:	d1e0      	bne.n	80012be <getKernelMachineClassification+0x3be>
 80012fc:	9906      	ldr	r1, [sp, #24]
 80012fe:	461a      	mov	r2, r3
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001300:	440a      	add	r2, r1
 8001302:	9202      	str	r2, [sp, #8]
 8001304:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800130a:	440a      	add	r2, r1
 800130c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800130e:	920c      	str	r2, [sp, #48]	; 0x30
 8001310:	9a04      	ldr	r2, [sp, #16]
 8001312:	4608      	mov	r0, r1
 8001314:	3301      	adds	r3, #1
 8001316:	4410      	add	r0, r2
 8001318:	4293      	cmp	r3, r2
 800131a:	4601      	mov	r1, r0
 800131c:	900e      	str	r0, [sp, #56]	; 0x38
 800131e:	f000 8545 	beq.w	8001dac <getKernelMachineClassification+0xeac>
 8001322:	9309      	str	r3, [sp, #36]	; 0x24
 8001324:	460a      	mov	r2, r1
 8001326:	e7c5      	b.n	80012b4 <getKernelMachineClassification+0x3b4>
		} else if (Y[currentRow] == -1) {
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <getKernelMachineClassification+0x45c>)
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	2200      	movs	r2, #0
 8001330:	f7ff fbfa 	bl	8000b28 <__aeabi_dcmpeq>
 8001334:	2800      	cmp	r0, #0
 8001336:	f43f ae8e 	beq.w	8001056 <getKernelMachineClassification+0x156>
			Y_tilde[currentRow] = log(zeroEpsilon);
 800133a:	eeb0 0a48 	vmov.f32	s0, s16
 800133e:	eef0 0a68 	vmov.f32	s1, s17
 8001342:	f005 faf5 	bl	8006930 <log>
 8001346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001348:	ed83 0b00 	vstr	d0, [r3]
 800134c:	e683      	b.n	8001056 <getKernelMachineClassification+0x156>
 800134e:	bf00      	nop
 8001350:	00000000 	.word	0x00000000
 8001354:	3ff00000 	.word	0x3ff00000
 8001358:	3ff00000 	.word	0x3ff00000
 800135c:	bff00000 	.word	0xbff00000
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001360:	9f01      	ldr	r7, [sp, #4]
 8001362:	9d02      	ldr	r5, [sp, #8]
		X_tilde[currentRowTimesMplusOne] = 1;
 8001364:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 8001710 <getKernelMachineClassification+0x810>
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001368:	fb05 7307 	mla	r3, r5, r7, r7
 800136c:	00dc      	lsls	r4, r3, #3
 800136e:	4620      	mov	r0, r4
 8001370:	9313      	str	r3, [sp, #76]	; 0x4c
 8001372:	f002 fd1d 	bl	8003db0 <malloc>
	int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
 8001376:	1c6a      	adds	r2, r5, #1
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001378:	4603      	mov	r3, r0
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 800137a:	4620      	mov	r0, r4
 800137c:	00d4      	lsls	r4, r2, #3
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 800137e:	4698      	mov	r8, r3
	int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
 8001380:	9203      	str	r2, [sp, #12]
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8001382:	930a      	str	r3, [sp, #40]	; 0x28
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 8001384:	9412      	str	r4, [sp, #72]	; 0x48
 8001386:	f002 fd13 	bl	8003db0 <malloc>
 800138a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800138c:	9004      	str	r0, [sp, #16]
	for (int currentRow=0; currentRow<n; currentRow++) {
 800138e:	f1a4 0908 	sub.w	r9, r4, #8
 8001392:	eb02 0509 	add.w	r5, r2, r9
 8001396:	463a      	mov	r2, r7
 8001398:	4643      	mov	r3, r8
 800139a:	00d4      	lsls	r4, r2, #3
 800139c:	eb00 08c7 	add.w	r8, r0, r7, lsl #3
		X_tilde[currentRowTimesMplusOne] = 1;
 80013a0:	f04f 0a00 	mov.w	sl, #0
 80013a4:	3308      	adds	r3, #8
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80013a6:	4637      	mov	r7, r6
 80013a8:	940d      	str	r4, [sp, #52]	; 0x34
		X_tilde[currentRowTimesMplusOne] = 1;
 80013aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80013ac:	eb02 01c7 	add.w	r1, r2, r7, lsl #3
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesMplusOne];
 80013b0:	9a04      	ldr	r2, [sp, #16]
 80013b2:	9106      	str	r1, [sp, #24]
 80013b4:	eb02 0cc6 	add.w	ip, r2, r6, lsl #3
		X_tilde[currentRowTimesMplusOne] = 1;
 80013b8:	e943 ab02 	strd	sl, fp, [r3, #-8]
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesMplusOne];
 80013bc:	e9cc ab00 	strd	sl, fp, [ip]
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80013c0:	4618      	mov	r0, r3
 80013c2:	464a      	mov	r2, r9
 80013c4:	f002 fd04 	bl	8003dd0 <memcpy>
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesMplusOne];
 80013c8:	9906      	ldr	r1, [sp, #24]
 80013ca:	4603      	mov	r3, r0
 80013cc:	469c      	mov	ip, r3
 80013ce:	4640      	mov	r0, r8
			X_tilde[currentRowAndColumn] = X[currentColumn-1 + currentRowTimesM];
 80013d0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80013d4:	428d      	cmp	r5, r1
			TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn];
 80013d6:	e9c0 2300 	strd	r2, r3, [r0]
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80013da:	4420      	add	r0, r4
 80013dc:	d1f8      	bne.n	80013d0 <getKernelMachineClassification+0x4d0>
 80013de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80013e0:	4663      	mov	r3, ip
		currentColumn2++;
 80013e2:	4413      	add	r3, r2
 80013e4:	9a02      	ldr	r2, [sp, #8]
 80013e6:	4417      	add	r7, r2
	for (int currentRow=0; currentRow<n; currentRow++) {
 80013e8:	9a01      	ldr	r2, [sp, #4]
		currentColumn2++;
 80013ea:	3601      	adds	r6, #1
	for (int currentRow=0; currentRow<n; currentRow++) {
 80013ec:	42b2      	cmp	r2, r6
 80013ee:	f108 0808 	add.w	r8, r8, #8
 80013f2:	444d      	add	r5, r9
 80013f4:	dcd9      	bgt.n	80013aa <getKernelMachineClassification+0x4aa>
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 80013f6:	9b03      	ldr	r3, [sp, #12]
 80013f8:	2108      	movs	r1, #8
 80013fa:	fb03 f003 	mul.w	r0, r3, r3
 80013fe:	f002 fc91 	bl	8003d24 <calloc>
 8001402:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001404:	f8dd b004 	ldr.w	fp, [sp, #4]
 8001408:	900f      	str	r0, [sp, #60]	; 0x3c
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 800140a:	2300      	movs	r3, #0
 800140c:	930c      	str	r3, [sp, #48]	; 0x30
 800140e:	180a      	adds	r2, r1, r0
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8001410:	930b      	str	r3, [sp, #44]	; 0x2c
 8001412:	9b04      	ldr	r3, [sp, #16]
 8001414:	9014      	str	r0, [sp, #80]	; 0x50
 8001416:	9206      	str	r2, [sp, #24]
 8001418:	9308      	str	r3, [sp, #32]
 800141a:	9309      	str	r3, [sp, #36]	; 0x24
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 800141c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800141e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8001420:	f04f 0800 	mov.w	r8, #0
 8001424:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001428:	9b04      	ldr	r3, [sp, #16]
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 800142a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800142e:	e8f6 4502 	ldrd	r4, r5, [r6], #8
 8001432:	eb03 0ac8 	add.w	sl, r3, r8, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001436:	2700      	movs	r7, #0
				matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 8001438:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 800143c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8001440:	f7ff f90a 	bl	8000658 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff4e 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001450:	3701      	adds	r7, #1
 8001452:	45bb      	cmp	fp, r7
				matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001458:	dcee      	bgt.n	8001438 <getKernelMachineClassification+0x538>
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 800145a:	9b06      	ldr	r3, [sp, #24]
 800145c:	42b3      	cmp	r3, r6
 800145e:	e946 4502 	strd	r4, r5, [r6, #-8]
 8001462:	44d8      	add	r8, fp
 8001464:	d1e0      	bne.n	8001428 <getKernelMachineClassification+0x528>
 8001466:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001468:	461a      	mov	r2, r3
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 800146a:	440a      	add	r2, r1
 800146c:	9206      	str	r2, [sp, #24]
 800146e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001474:	440a      	add	r2, r1
 8001476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001478:	9209      	str	r2, [sp, #36]	; 0x24
 800147a:	9a03      	ldr	r2, [sp, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	4608      	mov	r0, r1
 8001480:	4410      	add	r0, r2
 8001482:	4293      	cmp	r3, r2
 8001484:	930c      	str	r3, [sp, #48]	; 0x30
 8001486:	900b      	str	r0, [sp, #44]	; 0x2c
 8001488:	d1c8      	bne.n	800141c <getKernelMachineClassification+0x51c>
			TransposeOf_X_tilde[currentColumn + currentRowTimesMplusOne] = 0;
 800148a:	9f02      	ldr	r7, [sp, #8]
 800148c:	9b04      	ldr	r3, [sp, #16]
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 800148e:	9e12      	ldr	r6, [sp, #72]	; 0x48
			TransposeOf_X_tilde[currentColumn + currentRowTimesMplusOne] = 0;
 8001490:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
 8001494:	3501      	adds	r5, #1
 8001496:	00ed      	lsls	r5, r5, #3
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 8001498:	2400      	movs	r4, #0
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 800149a:	4618      	mov	r0, r3
 800149c:	462a      	mov	r2, r5
 800149e:	2100      	movs	r1, #0
 80014a0:	f002 fca4 	bl	8003dec <memset>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 80014a4:	42a7      	cmp	r7, r4
 80014a6:	4603      	mov	r3, r0
 80014a8:	4433      	add	r3, r6
 80014aa:	f104 0401 	add.w	r4, r4, #1
 80014ae:	dcf4      	bgt.n	800149a <getKernelMachineClassification+0x59a>
 80014b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mPlusOne] = 1;
 80014b2:	4d97      	ldr	r5, [pc, #604]	; (8001710 <getKernelMachineClassification+0x810>)
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 80014b4:	9904      	ldr	r1, [sp, #16]
	for (int currentUnitaryValue=0; currentUnitaryValue<mPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 80014b6:	9802      	ldr	r0, [sp, #8]
 80014b8:	f103 0608 	add.w	r6, r3, #8
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mPlusOne] = 1;
 80014bc:	2400      	movs	r4, #0
 80014be:	9610      	str	r6, [sp, #64]	; 0x40
	for (int currentUnitaryValue=0; currentUnitaryValue<mPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 80014c0:	2200      	movs	r2, #0
 80014c2:	4290      	cmp	r0, r2
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mPlusOne] = 1;
 80014c4:	e9c1 4500 	strd	r4, r5, [r1]
	for (int currentUnitaryValue=0; currentUnitaryValue<mPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 80014c8:	f102 0201 	add.w	r2, r2, #1
 80014cc:	4431      	add	r1, r6
 80014ce:	dcf8      	bgt.n	80014c2 <getKernelMachineClassification+0x5c2>
 80014d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014d2:	930d      	str	r3, [sp, #52]	; 0x34
 80014d4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80014d8:	9b04      	ldr	r3, [sp, #16]
 80014da:	930e      	str	r3, [sp, #56]	; 0x38
 80014dc:	f8dd a008 	ldr.w	sl, [sp, #8]
	for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 80014e0:	2300      	movs	r3, #0
 80014e2:	9306      	str	r3, [sp, #24]
		for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 80014e4:	f04f 0b00 	mov.w	fp, #0
 80014e8:	46d9      	mov	r9, fp
			if (currentRow != currentColumn) {
 80014ea:	9b06      	ldr	r3, [sp, #24]
 80014ec:	455b      	cmp	r3, fp
 80014ee:	d042      	beq.n	8001576 <getKernelMachineClassification+0x676>
				ratioModifier = matMul1[currentColumn + currentRowTimesMplusOne]/matMul1[currentRowAndColumn2];
 80014f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014f2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80014f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f9d4 	bl	80008ac <__aeabi_ddiv>
 8001504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001506:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800150c:	ec41 0b18 	vmov	d8, r0, r1
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 8001510:	9309      	str	r3, [sp, #36]	; 0x24
 8001512:	eb02 0803 	add.w	r8, r2, r3
 8001516:	2500      	movs	r5, #0
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesMplusOne];
 8001518:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800151c:	ec51 0b18 	vmov	r0, r1, d8
 8001520:	f7ff f89a 	bl	8000658 <__aeabi_dmul>
 8001524:	e9d8 6700 	ldrd	r6, r7, [r8]
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4630      	mov	r0, r6
 800152e:	4639      	mov	r1, r7
 8001530:	f7fe feda 	bl	80002e8 <__aeabi_dsub>
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 8001534:	45aa      	cmp	sl, r5
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesMplusOne];
 8001536:	e8e8 0102 	strd	r0, r1, [r8], #8
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 800153a:	f105 0501 	add.w	r5, r5, #1
 800153e:	dceb      	bgt.n	8001518 <getKernelMachineClassification+0x618>
 8001540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001542:	9a04      	ldr	r2, [sp, #16]
 8001544:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8001548:	4413      	add	r3, r2
 800154a:	461c      	mov	r4, r3
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 800154c:	2500      	movs	r5, #0
					TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesMplusOne];
 800154e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8001552:	ec51 0b18 	vmov	r0, r1, d8
 8001556:	f7ff f87f 	bl	8000658 <__aeabi_dmul>
 800155a:	e9d4 6700 	ldrd	r6, r7, [r4]
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4630      	mov	r0, r6
 8001564:	4639      	mov	r1, r7
 8001566:	f7fe febf 	bl	80002e8 <__aeabi_dsub>
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 800156a:	45aa      	cmp	sl, r5
					TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesMplusOne];
 800156c:	e8e4 0102 	strd	r0, r1, [r4], #8
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 8001570:	f105 0501 	add.w	r5, r5, #1
 8001574:	dceb      	bgt.n	800154e <getKernelMachineClassification+0x64e>
		for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8001576:	9b03      	ldr	r3, [sp, #12]
 8001578:	45da      	cmp	sl, fp
 800157a:	4499      	add	r9, r3
 800157c:	f10b 0301 	add.w	r3, fp, #1
 8001580:	dd01      	ble.n	8001586 <getKernelMachineClassification+0x686>
 8001582:	469b      	mov	fp, r3
 8001584:	e7b1      	b.n	80014ea <getKernelMachineClassification+0x5ea>
	for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 8001586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800158a:	4611      	mov	r1, r2
 800158c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800158e:	4419      	add	r1, r3
 8001590:	441a      	add	r2, r3
 8001592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001594:	920d      	str	r2, [sp, #52]	; 0x34
 8001596:	3308      	adds	r3, #8
 8001598:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800159a:	930c      	str	r3, [sp, #48]	; 0x30
 800159c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800159e:	910e      	str	r1, [sp, #56]	; 0x38
 80015a0:	4413      	add	r3, r2
 80015a2:	9902      	ldr	r1, [sp, #8]
 80015a4:	9a06      	ldr	r2, [sp, #24]
 80015a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80015a8:	4291      	cmp	r1, r2
 80015aa:	f102 0301 	add.w	r3, r2, #1
 80015ae:	dd02      	ble.n	80015b6 <getKernelMachineClassification+0x6b6>
 80015b0:	9306      	str	r3, [sp, #24]
 80015b2:	468a      	mov	sl, r1
 80015b4:	e796      	b.n	80014e4 <getKernelMachineClassification+0x5e4>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 80015b6:	f04f 0900 	mov.w	r9, #0
 80015ba:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80015be:	46c8      	mov	r8, r9
 80015c0:	468a      	mov	sl, r1
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 80015c2:	9b04      	ldr	r3, [sp, #16]
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 80015c4:	e9db 6700 	ldrd	r6, r7, [fp]
 80015c8:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 80015cc:	2400      	movs	r4, #0
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 80015ce:	e9d5 0100 	ldrd	r0, r1, [r5]
 80015d2:	4632      	mov	r2, r6
 80015d4:	463b      	mov	r3, r7
 80015d6:	f7ff f969 	bl	80008ac <__aeabi_ddiv>
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 80015da:	45a2      	cmp	sl, r4
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 80015dc:	e8e5 0102 	strd	r0, r1, [r5], #8
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 80015e0:	f104 0401 	add.w	r4, r4, #1
 80015e4:	dcf3      	bgt.n	80015ce <getKernelMachineClassification+0x6ce>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 80015e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80015e8:	449b      	add	fp, r3
 80015ea:	9b03      	ldr	r3, [sp, #12]
 80015ec:	45ca      	cmp	sl, r9
 80015ee:	4498      	add	r8, r3
 80015f0:	f109 0301 	add.w	r3, r9, #1
 80015f4:	dd01      	ble.n	80015fa <getKernelMachineClassification+0x6fa>
 80015f6:	4699      	mov	r9, r3
 80015f8:	e7e3      	b.n	80015c2 <getKernelMachineClassification+0x6c2>
	double *matMul2 = (double *) calloc(mPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 80015fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80015fc:	2108      	movs	r1, #8
 80015fe:	f002 fb91 	bl	8003d24 <calloc>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8001602:	2300      	movs	r3, #0
 8001604:	930b      	str	r3, [sp, #44]	; 0x2c
	double *matMul2 = (double *) calloc(mPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 8001606:	9009      	str	r0, [sp, #36]	; 0x24
 8001608:	9306      	str	r3, [sp, #24]
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 800160a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800160c:	9a06      	ldr	r2, [sp, #24]
 800160e:	2700      	movs	r7, #0
 8001610:	46b9      	mov	r9, r7
 8001612:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 8001616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001618:	f8dd a020 	ldr.w	sl, [sp, #32]
 800161c:	e8f8 4502 	ldrd	r4, r5, [r8], #8
 8001620:	eb03 0bc9 	add.w	fp, r3, r9, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 8001624:	2600      	movs	r6, #0
				matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesMplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesMplusOne];
 8001626:	e8fb 2302 	ldrd	r2, r3, [fp], #8
 800162a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800162e:	f7ff f813 	bl	8000658 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fe57 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 800163e:	9a02      	ldr	r2, [sp, #8]
 8001640:	42b2      	cmp	r2, r6
				matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesMplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesMplusOne];
 8001642:	4604      	mov	r4, r0
 8001644:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 8001646:	f106 0601 	add.w	r6, r6, #1
 800164a:	dcec      	bgt.n	8001626 <getKernelMachineClassification+0x726>
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	4499      	add	r9, r3
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001650:	9b01      	ldr	r3, [sp, #4]
 8001652:	3701      	adds	r7, #1
 8001654:	42bb      	cmp	r3, r7
 8001656:	e948 4502 	strd	r4, r5, [r8, #-8]
 800165a:	dcdc      	bgt.n	8001616 <getKernelMachineClassification+0x716>
 800165c:	9b08      	ldr	r3, [sp, #32]
 800165e:	4611      	mov	r1, r2
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8001660:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001662:	4413      	add	r3, r2
 8001664:	9308      	str	r3, [sp, #32]
 8001666:	9a01      	ldr	r2, [sp, #4]
 8001668:	9b06      	ldr	r3, [sp, #24]
 800166a:	4413      	add	r3, r2
 800166c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800166e:	9306      	str	r3, [sp, #24]
 8001670:	4291      	cmp	r1, r2
 8001672:	f102 0301 	add.w	r3, r2, #1
 8001676:	dd01      	ble.n	800167c <getKernelMachineClassification+0x77c>
 8001678:	930b      	str	r3, [sp, #44]	; 0x2c
 800167a:	e7c6      	b.n	800160a <getKernelMachineClassification+0x70a>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 800167c:	f04f 0b00 	mov.w	fp, #0
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8001680:	46da      	mov	sl, fp
 8001682:	f8cd b00c 	str.w	fp, [sp, #12]
 8001686:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800168a:	f8dd b004 	ldr.w	fp, [sp, #4]
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 8001690:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8001692:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 8001696:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800169a:	2600      	movs	r6, #0
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 800169c:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 80016a0:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 80016a4:	f7fe ffd8 	bl	8000658 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4620      	mov	r0, r4
 80016ae:	4629      	mov	r1, r5
 80016b0:	f7fe fe1c 	bl	80002ec <__adddf3>
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80016b4:	3601      	adds	r6, #1
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 80016b6:	4604      	mov	r4, r0
 80016b8:	460d      	mov	r5, r1
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80016ba:	45b3      	cmp	fp, r6
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 80016bc:	e949 4502 	strd	r4, r5, [r9, #-8]
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80016c0:	dcec      	bgt.n	800169c <getKernelMachineClassification+0x79c>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 80016c2:	9a03      	ldr	r2, [sp, #12]
 80016c4:	9902      	ldr	r1, [sp, #8]
 80016c6:	4291      	cmp	r1, r2
 80016c8:	44da      	add	sl, fp
 80016ca:	f102 0301 	add.w	r3, r2, #1
 80016ce:	dd01      	ble.n	80016d4 <getKernelMachineClassification+0x7d4>
 80016d0:	9303      	str	r3, [sp, #12]
 80016d2:	e7dc      	b.n	800168e <getKernelMachineClassification+0x78e>
	coefficients[1+m] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 80016d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80016d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
	free(X_tilde);
 80016d8:	980a      	ldr	r0, [sp, #40]	; 0x28
	coefficients[1+m] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 80016da:	4413      	add	r3, r2
 80016dc:	461c      	mov	r4, r3
	coefficients[2+m] = 1; // We store the value of "alpha" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <getKernelMachineClassification+0x810>)
 80016e0:	2200      	movs	r2, #0
	coefficients[1+m] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 80016e2:	2600      	movs	r6, #0
 80016e4:	2700      	movs	r7, #0
	coefficients[2+m] = 1; // We store the value of "alpha" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 80016e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
	coefficients[1+m] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 80016ea:	e9c4 6700 	strd	r6, r7, [r4]
	free(X_tilde);
 80016ee:	f002 fb67 	bl	8003dc0 <free>
	free(TransposeOf_X_tilde);
 80016f2:	9804      	ldr	r0, [sp, #16]
 80016f4:	f002 fb64 	bl	8003dc0 <free>
	free(matMul1);
 80016f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80016fa:	f002 fb61 	bl	8003dc0 <free>
	free(matMul2);
 80016fe:	9809      	ldr	r0, [sp, #36]	; 0x24
}
 8001700:	b025      	add	sp, #148	; 0x94
 8001702:	ecbd 8b0a 	vpop	{d8-d12}
 8001706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Free the Heap memory used for the locally allocated variables since they will no longer be used.
	free(Y_tilde);
	free(X_tilde);
	free(TransposeOf_X_tilde);
	free(matMul1);
	free(matMul2);
 800170a:	f002 bb59 	b.w	8003dc0 <free>
 800170e:	bf00      	nop
 8001710:	3ff00000 	.word	0x3ff00000
			TransposeOf_X_tilde[currentColumn + currentRowTimesmTimesNplusOne] = 0;
 8001714:	9b04      	ldr	r3, [sp, #16]
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 8001716:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001718:	9f06      	ldr	r7, [sp, #24]
			TransposeOf_X_tilde[currentColumn + currentRowTimesmTimesNplusOne] = 0;
 800171a:	00d5      	lsls	r5, r2, #3
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 800171c:	2400      	movs	r4, #0
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 800171e:	4618      	mov	r0, r3
 8001720:	462a      	mov	r2, r5
 8001722:	2100      	movs	r1, #0
 8001724:	f002 fb62 	bl	8003dec <memset>
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 8001728:	42a7      	cmp	r7, r4
 800172a:	4603      	mov	r3, r0
 800172c:	4433      	add	r3, r6
 800172e:	f104 0401 	add.w	r4, r4, #1
 8001732:	d1f4      	bne.n	800171e <getKernelMachineClassification+0x81e>
 8001734:	9b09      	ldr	r3, [sp, #36]	; 0x24
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 8001736:	4d78      	ldr	r5, [pc, #480]	; (8001918 <getKernelMachineClassification+0xa18>)
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 8001738:	9904      	ldr	r1, [sp, #16]
	for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 800173a:	9806      	ldr	r0, [sp, #24]
 800173c:	f103 0608 	add.w	r6, r3, #8
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 8001740:	2400      	movs	r4, #0
 8001742:	961c      	str	r6, [sp, #112]	; 0x70
	for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 8001744:	2200      	movs	r2, #0
 8001746:	4282      	cmp	r2, r0
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 8001748:	e9c1 4500 	strd	r4, r5, [r1]
	for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 800174c:	f102 0201 	add.w	r2, r2, #1
 8001750:	4431      	add	r1, r6
 8001752:	d1f8      	bne.n	8001746 <getKernelMachineClassification+0x846>
 8001754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001756:	9a04      	ldr	r2, [sp, #16]
 8001758:	9212      	str	r2, [sp, #72]	; 0x48
 800175a:	4619      	mov	r1, r3
 800175c:	4411      	add	r1, r2
 800175e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001760:	911a      	str	r1, [sp, #104]	; 0x68
 8001762:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001764:	930e      	str	r3, [sp, #56]	; 0x38
 8001766:	1858      	adds	r0, r3, r1
 8001768:	930f      	str	r3, [sp, #60]	; 0x3c
	for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 800176a:	2300      	movs	r3, #0
 800176c:	901d      	str	r0, [sp, #116]	; 0x74
	for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 800176e:	9117      	str	r1, [sp, #92]	; 0x5c
	for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 8001770:	930b      	str	r3, [sp, #44]	; 0x2c
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001774:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001776:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001778:	1ad2      	subs	r2, r2, r3
 800177a:	f04f 0a00 	mov.w	sl, #0
 800177e:	3308      	adds	r3, #8
 8001780:	46d3      	mov	fp, sl
 8001782:	9313      	str	r3, [sp, #76]	; 0x4c
 8001784:	4691      	mov	r9, r2
 8001786:	4688      	mov	r8, r1
			if (currentRow != currentColumn) {
 8001788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800178a:	459a      	cmp	sl, r3
 800178c:	d03c      	beq.n	8001808 <getKernelMachineClassification+0x908>
				ratioModifier = matMul1[currentColumn + currentRowTimesmTimesNplusOne]/matMul1[currentRowAndColumn2];
 800178e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001790:	e9d9 0100 	ldrd	r0, r1, [r9]
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7ff f888 	bl	80008ac <__aeabi_ddiv>
 800179c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017a0:	930d      	str	r3, [sp, #52]	; 0x34
 80017a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80017a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80017a6:	eb03 05cb 	add.w	r5, r3, fp, lsl #3
				for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 80017aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
				ratioModifier = matMul1[currentColumn + currentRowTimesmTimesNplusOne]/matMul1[currentRowAndColumn2];
 80017ac:	ec41 0b18 	vmov	d8, r0, r1
				for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 80017b0:	444b      	add	r3, r9
 80017b2:	9308      	str	r3, [sp, #32]
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesmTimesNplusOne];
 80017b4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80017b8:	ec51 0b18 	vmov	r0, r1, d8
 80017bc:	f7fe ff4c 	bl	8000658 <__aeabi_dmul>
 80017c0:	e9d5 6700 	ldrd	r6, r7, [r5]
 80017c4:	460b      	mov	r3, r1
 80017c6:	4602      	mov	r2, r0
 80017c8:	4639      	mov	r1, r7
 80017ca:	4630      	mov	r0, r6
 80017cc:	f7fe fd8c 	bl	80002e8 <__aeabi_dsub>
 80017d0:	e8e5 0102 	strd	r0, r1, [r5], #8
				for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 80017d4:	9b08      	ldr	r3, [sp, #32]
 80017d6:	42ab      	cmp	r3, r5
 80017d8:	d1ec      	bne.n	80017b4 <getKernelMachineClassification+0x8b4>
 80017da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80017dc:	9a04      	ldr	r2, [sp, #16]
 80017de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80017e0:	4413      	add	r3, r2
 80017e2:	461c      	mov	r4, r3
					TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesmTimesNplusOne];
 80017e4:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80017e8:	ec51 0b18 	vmov	r0, r1, d8
 80017ec:	f7fe ff34 	bl	8000658 <__aeabi_dmul>
 80017f0:	e9d4 6700 	ldrd	r6, r7, [r4]
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4630      	mov	r0, r6
 80017fa:	4639      	mov	r1, r7
 80017fc:	f7fe fd74 	bl	80002e8 <__aeabi_dsub>
 8001800:	e8e4 0102 	strd	r0, r1, [r4], #8
				for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 8001804:	45a0      	cmp	r8, r4
 8001806:	d1ed      	bne.n	80017e4 <getKernelMachineClassification+0x8e4>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	9a06      	ldr	r2, [sp, #24]
 800180c:	449b      	add	fp, r3
 800180e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001810:	4592      	cmp	sl, r2
 8001812:	4498      	add	r8, r3
 8001814:	4499      	add	r9, r3
 8001816:	f10a 0301 	add.w	r3, sl, #1
 800181a:	d001      	beq.n	8001820 <getKernelMachineClassification+0x920>
 800181c:	469a      	mov	sl, r3
 800181e:	e7b3      	b.n	8001788 <getKernelMachineClassification+0x888>
	for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 8001820:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001824:	4611      	mov	r1, r2
 8001826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001828:	4419      	add	r1, r3
 800182a:	441a      	add	r2, r3
 800182c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800182e:	920f      	str	r2, [sp, #60]	; 0x3c
 8001830:	3b08      	subs	r3, #8
 8001832:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001834:	9317      	str	r3, [sp, #92]	; 0x5c
 8001836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001838:	9112      	str	r1, [sp, #72]	; 0x48
 800183a:	4413      	add	r3, r2
 800183c:	9906      	ldr	r1, [sp, #24]
 800183e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001840:	930e      	str	r3, [sp, #56]	; 0x38
 8001842:	428a      	cmp	r2, r1
 8001844:	f102 0301 	add.w	r3, r2, #1
 8001848:	d001      	beq.n	800184e <getKernelMachineClassification+0x94e>
 800184a:	930b      	str	r3, [sp, #44]	; 0x2c
 800184c:	e791      	b.n	8001772 <getKernelMachineClassification+0x872>
 800184e:	9b03      	ldr	r3, [sp, #12]
 8001850:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001852:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001854:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8001856:	ebc3 7943 	rsb	r9, r3, r3, lsl #29
 800185a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 800185e:	f04f 0800 	mov.w	r8, #0
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 8001862:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8001866:	eb09 0407 	add.w	r4, r9, r7
 800186a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800186e:	4652      	mov	r2, sl
 8001870:	465b      	mov	r3, fp
 8001872:	f7ff f81b 	bl	80008ac <__aeabi_ddiv>
 8001876:	e8e4 0102 	strd	r0, r1, [r4], #8
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 800187a:	42a7      	cmp	r7, r4
 800187c:	d1f5      	bne.n	800186a <getKernelMachineClassification+0x96a>
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 800187e:	9a06      	ldr	r2, [sp, #24]
 8001880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001882:	4542      	cmp	r2, r8
 8001884:	441f      	add	r7, r3
 8001886:	4435      	add	r5, r6
 8001888:	f108 0301 	add.w	r3, r8, #1
 800188c:	d001      	beq.n	8001892 <getKernelMachineClassification+0x992>
 800188e:	4698      	mov	r8, r3
 8001890:	e7e7      	b.n	8001862 <getKernelMachineClassification+0x962>
	double *matMul2 = (double *) calloc(mTimesNPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 8001892:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001894:	2108      	movs	r1, #8
 8001896:	f002 fa45 	bl	8003d24 <calloc>
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 800189a:	f04f 0b00 	mov.w	fp, #0
	double *matMul2 = (double *) calloc(mTimesNPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 800189e:	f8cd b020 	str.w	fp, [sp, #32]
 80018a2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80018a6:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 80018aa:	900b      	str	r0, [sp, #44]	; 0x2c
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 80018ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ae:	9a08      	ldr	r2, [sp, #32]
 80018b0:	2700      	movs	r7, #0
 80018b2:	46b9      	mov	r9, r7
 80018b4:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 80018b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 80018ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80018bc:	e8f8 4502 	ldrd	r4, r5, [r8], #8
 80018c0:	eb03 0ac9 	add.w	sl, r3, r9, lsl #3
				matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesmTimesNplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesmTimesNplusOne];
 80018c4:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 80018c8:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80018cc:	f7fe fec4 	bl	8000658 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fd08 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 80018dc:	45b3      	cmp	fp, r6
				matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesmTimesNplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesmTimesNplusOne];
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 80018e2:	d1ef      	bne.n	80018c4 <getKernelMachineClassification+0x9c4>
 80018e4:	9b03      	ldr	r3, [sp, #12]
 80018e6:	4499      	add	r9, r3
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 80018e8:	9b01      	ldr	r3, [sp, #4]
 80018ea:	3701      	adds	r7, #1
 80018ec:	42bb      	cmp	r3, r7
 80018ee:	e948 4502 	strd	r4, r5, [r8, #-8]
 80018f2:	dce1      	bgt.n	80018b8 <getKernelMachineClassification+0x9b8>
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 80018f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018f8:	4611      	mov	r1, r2
 80018fa:	4419      	add	r1, r3
 80018fc:	9a01      	ldr	r2, [sp, #4]
 80018fe:	910a      	str	r1, [sp, #40]	; 0x28
 8001900:	449b      	add	fp, r3
 8001902:	9b08      	ldr	r3, [sp, #32]
 8001904:	9906      	ldr	r1, [sp, #24]
 8001906:	4413      	add	r3, r2
 8001908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800190a:	9308      	str	r3, [sp, #32]
 800190c:	4291      	cmp	r1, r2
 800190e:	f102 0301 	add.w	r3, r2, #1
 8001912:	d003      	beq.n	800191c <getKernelMachineClassification+0xa1c>
 8001914:	930d      	str	r3, [sp, #52]	; 0x34
 8001916:	e7c9      	b.n	80018ac <getKernelMachineClassification+0x9ac>
 8001918:	3ff00000 	.word	0x3ff00000
 800191c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800191e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001920:	f103 0b08 	add.w	fp, r3, #8
 8001924:	4493      	add	fp, r2
 8001926:	f8cd b00c 	str.w	fp, [sp, #12]
 800192a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800192e:	4699      	mov	r9, r3
 8001930:	f04f 0a00 	mov.w	sl, #0
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001936:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8001938:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 800193c:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001940:	2600      	movs	r6, #0
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y_tilde[currentMultipliedElements];
 8001942:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8001946:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 800194a:	f7fe fe85 	bl	8000658 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fcc9 	bl	80002ec <__adddf3>
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800195a:	3601      	adds	r6, #1
 800195c:	45b3      	cmp	fp, r6
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y_tilde[currentMultipliedElements];
 800195e:	4604      	mov	r4, r0
 8001960:	460d      	mov	r5, r1
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001962:	dcee      	bgt.n	8001942 <getKernelMachineClassification+0xa42>
	for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001964:	9b03      	ldr	r3, [sp, #12]
 8001966:	454b      	cmp	r3, r9
 8001968:	e949 4502 	strd	r4, r5, [r9, #-8]
 800196c:	44da      	add	sl, fp
 800196e:	d1e1      	bne.n	8001934 <getKernelMachineClassification+0xa34>
	if (isForceGaussianCurve == 1) {
 8001970:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001972:	2b01      	cmp	r3, #1
 8001974:	f000 8100 	beq.w	8001b78 <getKernelMachineClassification+0xc78>
 8001978:	ed9f 7b7d 	vldr	d7, [pc, #500]	; 8001b70 <getKernelMachineClassification+0xc70>
 800197c:	f04f 0b00 	mov.w	fp, #0
 8001980:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001984:	eeb0 aa47 	vmov.f32	s20, s14
 8001988:	eef0 aa67 	vmov.f32	s21, s15
 800198c:	eeb0 ba47 	vmov.f32	s22, s14
 8001990:	eef0 ba67 	vmov.f32	s23, s15
 8001994:	f8cd b00c 	str.w	fp, [sp, #12]
 8001998:	f8dd b008 	ldr.w	fp, [sp, #8]
 800199c:	eeb0 9a47 	vmov.f32	s18, s14
 80019a0:	eef0 9a67 	vmov.f32	s19, s15
			Y_tilde[currentRow] = coefficients[0];
 80019a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80019a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80019a8:	9903      	ldr	r1, [sp, #12]
 80019aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019ae:	e8e2 4502 	strd	r4, r5, [r2], #8
 80019b2:	9216      	str	r2, [sp, #88]	; 0x58
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80019b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
			Y_tilde[currentRow] = coefficients[0];
 80019b6:	4699      	mov	r9, r3
 80019b8:	eb02 0ac1 	add.w	sl, r2, r1, lsl #3
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80019bc:	f04f 0801 	mov.w	r8, #1
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumnMinusOne + currentRowTimesM];
 80019c0:	e8fa 6702 	ldrd	r6, r7, [sl], #8
					Y_tilde[currentRow] = Y_tilde[currentRow] + coefficients[currentExponential + currentColumnMinusOneTimesN]*increaseExponentialOfThisValue;
 80019c4:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 80019c8:	4630      	mov	r0, r6
 80019ca:	4639      	mov	r1, r7
 80019cc:	f7fe fe44 	bl	8000658 <__aeabi_dmul>
 80019d0:	4622      	mov	r2, r4
 80019d2:	462b      	mov	r3, r5
 80019d4:	f7fe fc8a 	bl	80002ec <__adddf3>
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumnMinusOne + currentRowTimesM];
 80019d8:	4632      	mov	r2, r6
					Y_tilde[currentRow] = Y_tilde[currentRow] + coefficients[currentExponential + currentColumnMinusOneTimesN]*increaseExponentialOfThisValue;
 80019da:	4604      	mov	r4, r0
 80019dc:	460d      	mov	r5, r1
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumnMinusOne + currentRowTimesM];
 80019de:	463b      	mov	r3, r7
 80019e0:	4630      	mov	r0, r6
 80019e2:	4639      	mov	r1, r7
 80019e4:	f7fe fe38 	bl	8000658 <__aeabi_dmul>
					Y_tilde[currentRow] = Y_tilde[currentRow] + coefficients[currentExponential + currentColumnMinusOneTimesN]*increaseExponentialOfThisValue;
 80019e8:	e9f9 2304 	ldrd	r2, r3, [r9, #16]!
 80019ec:	f7fe fe34 	bl	8000658 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fc78 	bl	80002ec <__adddf3>
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80019fc:	f108 0801 	add.w	r8, r8, #1
 8001a00:	45c3      	cmp	fp, r8
					Y_tilde[currentRow] = Y_tilde[currentRow] + coefficients[currentExponential + currentColumnMinusOneTimesN]*increaseExponentialOfThisValue;
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8001a06:	dadb      	bge.n	80019c0 <getKernelMachineClassification+0xac0>
			Y_tilde[currentRow] = exp(Y_tilde[currentRow]); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8001a08:	ec45 4b10 	vmov	d0, r4, r5
 8001a0c:	f004 ff40 	bl	8006890 <exp>
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
			Y_tilde[currentRow] = exp(Y_tilde[currentRow]); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8001a12:	9e16      	ldr	r6, [sp, #88]	; 0x58
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001a14:	ecb3 8b02 	vldmia	r3!, {d8}
			Y_tilde[currentRow] = exp(Y_tilde[currentRow]); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8001a18:	ec55 4b10 	vmov	r4, r5, d0
 8001a1c:	ed06 0b02 	vstr	d0, [r6, #-8]
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001a20:	ee10 0a10 	vmov	r0, s0
 8001a24:	9315      	str	r3, [sp, #84]	; 0x54
 8001a26:	4629      	mov	r1, r5
 8001a28:	ec53 2b18 	vmov	r2, r3, d8
 8001a2c:	f7fe fe14 	bl	8000658 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	ec51 0b19 	vmov	r0, r1, d9
 8001a38:	f7fe fc58 	bl	80002ec <__adddf3>
			sumOf_y += Y[currentRow];
 8001a3c:	ec53 2b18 	vmov	r2, r3, d8
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001a40:	4680      	mov	r8, r0
 8001a42:	4689      	mov	r9, r1
			sumOf_y += Y[currentRow];
 8001a44:	ec51 0b1b 	vmov	r0, r1, d11
 8001a48:	f7fe fc50 	bl	80002ec <__adddf3>
			sumOf_x += Y_tilde[currentRow];
 8001a4c:	4622      	mov	r2, r4
			sumOf_y += Y[currentRow];
 8001a4e:	4606      	mov	r6, r0
 8001a50:	460f      	mov	r7, r1
			sumOf_x += Y_tilde[currentRow];
 8001a52:	462b      	mov	r3, r5
 8001a54:	ec51 0b1a 	vmov	r0, r1, d10
 8001a58:	f7fe fc48 	bl	80002ec <__adddf3>
			sumOf_y += Y[currentRow];
 8001a5c:	ec47 6b1b 	vmov	d11, r6, r7
			sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8001a60:	4622      	mov	r2, r4
			sumOf_x += Y_tilde[currentRow];
 8001a62:	4606      	mov	r6, r0
 8001a64:	460f      	mov	r7, r1
			sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8001a66:	462b      	mov	r3, r5
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fdf4 	bl	8000658 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001a78:	f7fe fc38 	bl	80002ec <__adddf3>
 8001a7c:	9a03      	ldr	r2, [sp, #12]
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001a7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001a80:	445a      	add	r2, fp
 8001a82:	9203      	str	r2, [sp, #12]
 8001a84:	9a01      	ldr	r2, [sp, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	429a      	cmp	r2, r3
			sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8001a8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001a8e:	ec49 8b19 	vmov	d9, r8, r9
			sumOf_x += Y_tilde[currentRow];
 8001a92:	ec47 6b1a 	vmov	d10, r6, r7
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001a96:	9319      	str	r3, [sp, #100]	; 0x64
 8001a98:	dc84      	bgt.n	80019a4 <getKernelMachineClassification+0xaa4>
		coefficients[2+2*m] = (n*sumOf_xy - sumOf_y*sumOf_x)/(n*sumOf_xSquared - sumOf_x*sumOf_x);
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7fe fd72 	bl	8000584 <__aeabi_i2d>
 8001aa0:	4680      	mov	r8, r0
 8001aa2:	4689      	mov	r9, r1
 8001aa4:	4642      	mov	r2, r8
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	ec51 0b19 	vmov	r0, r1, d9
 8001aac:	f7fe fdd4 	bl	8000658 <__aeabi_dmul>
 8001ab0:	ec5b ab1a 	vmov	sl, fp, d10
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	460d      	mov	r5, r1
 8001ab8:	ee1a 2a10 	vmov	r2, s20
 8001abc:	465b      	mov	r3, fp
 8001abe:	ec51 0b1b 	vmov	r0, r1, d11
 8001ac2:	f7fe fdc9 	bl	8000658 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fc0b 	bl	80002e8 <__aeabi_dsub>
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	4606      	mov	r6, r0
 8001ad6:	460f      	mov	r7, r1
 8001ad8:	464b      	mov	r3, r9
 8001ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ade:	f7fe fdbb 	bl	8000658 <__aeabi_dmul>
 8001ae2:	ee1a 2a10 	vmov	r2, s20
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	465b      	mov	r3, fp
 8001aea:	4604      	mov	r4, r0
 8001aec:	4659      	mov	r1, fp
 8001aee:	ee1a 0a10 	vmov	r0, s20
 8001af2:	f7fe fdb1 	bl	8000658 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe fbf3 	bl	80002e8 <__aeabi_dsub>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4630      	mov	r0, r6
 8001b08:	4639      	mov	r1, r7
 8001b0a:	f7fe fecf 	bl	80008ac <__aeabi_ddiv>
 8001b0e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001b10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001b12:	442b      	add	r3, r5
 8001b14:	e9c3 0104 	strd	r0, r1, [r3, #16]
		coefficients[1+2*m] = (sumOf_y - coefficients[2+2*m]*sumOf_x)/n;
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	ee1a 0a10 	vmov	r0, s20
 8001b20:	4659      	mov	r1, fp
 8001b22:	f7fe fd99 	bl	8000658 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ec51 0b1b 	vmov	r0, r1, d11
 8001b2e:	f7fe fbdb 	bl	80002e8 <__aeabi_dsub>
 8001b32:	464b      	mov	r3, r9
 8001b34:	4642      	mov	r2, r8
 8001b36:	f7fe feb9 	bl	80008ac <__aeabi_ddiv>
 8001b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3c:	442b      	add	r3, r5
 8001b3e:	e9c3 0100 	strd	r0, r1, [r3]
	free(Y_tilde);
 8001b42:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001b44:	f002 f93c 	bl	8003dc0 <free>
	free(X_tilde);
 8001b48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001b4a:	f002 f939 	bl	8003dc0 <free>
	free(TransposeOf_X_tilde);
 8001b4e:	9804      	ldr	r0, [sp, #16]
 8001b50:	f002 f936 	bl	8003dc0 <free>
	free(matMul1);
 8001b54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001b56:	f002 f933 	bl	8003dc0 <free>
	free(matMul2);
 8001b5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
}
 8001b5c:	b025      	add	sp, #148	; 0x94
 8001b5e:	ecbd 8b0a 	vpop	{d8-d12}
 8001b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(matMul2);
 8001b66:	f002 b92b 	b.w	8003dc0 <free>
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
	...
			coefficients[onePlusCurrentRowTimesTwo] = -1/(2*coefficients[2 + currentRowTimesTwo]); // We obtain and store the approximation/expected value of the variance coefficient value of the current machine learning feature.
 8001b78:	4f8b      	ldr	r7, [pc, #556]	; (8001da8 <getKernelMachineClassification+0xea8>)
 8001b7a:	9c18      	ldr	r4, [sp, #96]	; 0x60
		for (int currentRow=0; currentRow<m; currentRow++) {
 8001b7c:	f8dd 8008 	ldr.w	r8, [sp, #8]
			coefficients[onePlusCurrentRowTimesTwo] = -1/(2*coefficients[2 + currentRowTimesTwo]); // We obtain and store the approximation/expected value of the variance coefficient value of the current machine learning feature.
 8001b80:	2600      	movs	r6, #0
		for (int currentRow=0; currentRow<m; currentRow++) {
 8001b82:	2500      	movs	r5, #0
			coefficients[onePlusCurrentRowTimesTwo] = -1/(2*coefficients[2 + currentRowTimesTwo]); // We obtain and store the approximation/expected value of the variance coefficient value of the current machine learning feature.
 8001b84:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe fbae 	bl	80002ec <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4630      	mov	r0, r6
 8001b96:	4639      	mov	r1, r7
 8001b98:	f7fe fe88 	bl	80008ac <__aeabi_ddiv>
			coefficients[currentRowTimesTwo] = coefficients[onePlusCurrentRowTimesTwo];
 8001b9c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
			coefficients[onePlusCurrentRowTimesTwo] = -1/(2*coefficients[2 + currentRowTimesTwo]); // We obtain and store the approximation/expected value of the variance coefficient value of the current machine learning feature.
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	e9c4 2302 	strd	r2, r3, [r4, #8]
			coefficients[currentRowTimesTwo] = coefficients[currentRowTimesTwo] * coefficients[onePlusCurrentRowTimesTwo]; // We obtain and store the approximation/expected value of the mean coefficient value of the current machine learning feature.
 8001ba8:	4650      	mov	r0, sl
 8001baa:	4659      	mov	r1, fp
 8001bac:	f7fe fd54 	bl	8000658 <__aeabi_dmul>
		for (int currentRow=0; currentRow<m; currentRow++) {
 8001bb0:	3501      	adds	r5, #1
 8001bb2:	45a8      	cmp	r8, r5
			coefficients[currentRowTimesTwo] = coefficients[currentRowTimesTwo] * coefficients[onePlusCurrentRowTimesTwo]; // We obtain and store the approximation/expected value of the mean coefficient value of the current machine learning feature.
 8001bb4:	e8e4 0104 	strd	r0, r1, [r4], #16
		for (int currentRow=0; currentRow<m; currentRow++) {
 8001bb8:	dce4      	bgt.n	8001b84 <getKernelMachineClassification+0xc84>
 8001bba:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8001da0 <getKernelMachineClassification+0xea0>
 8001bbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bc2:	eeb0 9a47 	vmov.f32	s18, s14
 8001bc6:	eef0 9a67 	vmov.f32	s19, s15
 8001bca:	eeb0 ba47 	vmov.f32	s22, s14
 8001bce:	eef0 ba67 	vmov.f32	s23, s15
 8001bd2:	f04f 0b00 	mov.w	fp, #0
 8001bd6:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001bda:	f8cd b00c 	str.w	fp, [sp, #12]
 8001bde:	f8cd b020 	str.w	fp, [sp, #32]
 8001be2:	eeb0 aa47 	vmov.f32	s20, s14
 8001be6:	eef0 aa67 	vmov.f32	s21, s15
			Y_tilde[currentRow] = 0;
 8001bea:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8001da0 <getKernelMachineClassification+0xea0>
 8001bee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001bf0:	9a03      	ldr	r2, [sp, #12]
 8001bf2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001bf6:	eca3 7b02 	vstmia	r3!, {d7}
 8001bfa:	9316      	str	r3, [sp, #88]	; 0x58
			for (int currentColumn=0; currentColumn<m; currentColumn++) {
 8001bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
			Y_tilde[currentRow] = 0;
 8001bfe:	ec55 4b17 	vmov	r4, r5, d7
 8001c02:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
			for (int currentColumn=0; currentColumn<m; currentColumn++) {
 8001c06:	f04f 0900 	mov.w	r9, #0
				squareThisValue = X[currentColumn + currentRow*m] - coefficients[currentColumnTimesTwo];
 8001c0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8001c0e:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8001c12:	f7fe fb69 	bl	80002e8 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
				Y_tilde[currentRow] = Y_tilde[currentRow] + squareThisValue * squareThisValue / (2*coefficients[1 + currentColumnTimesTwo]);
 8001c1a:	f7fe fd1d 	bl	8000658 <__aeabi_dmul>
 8001c1e:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 8001c22:	4606      	mov	r6, r0
 8001c24:	460f      	mov	r7, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe fb5f 	bl	80002ec <__adddf3>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4630      	mov	r0, r6
 8001c34:	4639      	mov	r1, r7
 8001c36:	f7fe fe39 	bl	80008ac <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4620      	mov	r0, r4
 8001c40:	4629      	mov	r1, r5
 8001c42:	f7fe fb53 	bl	80002ec <__adddf3>
			for (int currentColumn=0; currentColumn<m; currentColumn++) {
 8001c46:	f109 0901 	add.w	r9, r9, #1
 8001c4a:	45ca      	cmp	sl, r9
 8001c4c:	f108 0810 	add.w	r8, r8, #16
				Y_tilde[currentRow] = Y_tilde[currentRow] + squareThisValue * squareThisValue / (2*coefficients[1 + currentColumnTimesTwo]);
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
			for (int currentColumn=0; currentColumn<m; currentColumn++) {
 8001c54:	dcd9      	bgt.n	8001c0a <getKernelMachineClassification+0xd0a>
			Y_tilde[currentRow] = exp(-Y_tilde[currentRow]); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8001c56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001c5a:	901e      	str	r0, [sp, #120]	; 0x78
 8001c5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8001c5e:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8001c62:	f004 fe15 	bl	8006890 <exp>
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
			Y_tilde[currentRow] = exp(-Y_tilde[currentRow]); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8001c68:	9e16      	ldr	r6, [sp, #88]	; 0x58
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001c6a:	ecb3 8b02 	vldmia	r3!, {d8}
			Y_tilde[currentRow] = exp(-Y_tilde[currentRow]); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8001c6e:	ec55 4b10 	vmov	r4, r5, d0
 8001c72:	ed06 0b02 	vstr	d0, [r6, #-8]
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001c76:	ee10 0a10 	vmov	r0, s0
 8001c7a:	9315      	str	r3, [sp, #84]	; 0x54
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	ec53 2b18 	vmov	r2, r3, d8
 8001c82:	f7fe fce9 	bl	8000658 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	ec51 0b1a 	vmov	r0, r1, d10
 8001c8e:	f7fe fb2d 	bl	80002ec <__adddf3>
			sumOf_y += Y[currentRow];
 8001c92:	ec53 2b18 	vmov	r2, r3, d8
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001c96:	4680      	mov	r8, r0
 8001c98:	4689      	mov	r9, r1
			sumOf_y += Y[currentRow];
 8001c9a:	ec51 0b1b 	vmov	r0, r1, d11
 8001c9e:	f7fe fb25 	bl	80002ec <__adddf3>
			sumOf_x += Y_tilde[currentRow];
 8001ca2:	4622      	mov	r2, r4
			sumOf_y += Y[currentRow];
 8001ca4:	4606      	mov	r6, r0
 8001ca6:	460f      	mov	r7, r1
			sumOf_x += Y_tilde[currentRow];
 8001ca8:	462b      	mov	r3, r5
 8001caa:	ec51 0b19 	vmov	r0, r1, d9
 8001cae:	f7fe fb1d 	bl	80002ec <__adddf3>
			sumOf_y += Y[currentRow];
 8001cb2:	ec47 6b1b 	vmov	d11, r6, r7
			sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8001cb6:	4622      	mov	r2, r4
			sumOf_x += Y_tilde[currentRow];
 8001cb8:	4606      	mov	r6, r0
 8001cba:	460f      	mov	r7, r1
			sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fcc9 	bl	8000658 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001cce:	f7fe fb0d 	bl	80002ec <__adddf3>
 8001cd2:	9a03      	ldr	r2, [sp, #12]
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001cd4:	9b08      	ldr	r3, [sp, #32]
 8001cd6:	4452      	add	r2, sl
 8001cd8:	9203      	str	r2, [sp, #12]
 8001cda:	9a01      	ldr	r2, [sp, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	429a      	cmp	r2, r3
			sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8001ce0:	e9cd 0106 	strd	r0, r1, [sp, #24]
			sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8001ce4:	ec49 8b1a 	vmov	d10, r8, r9
			sumOf_x += Y_tilde[currentRow];
 8001ce8:	ec47 6b19 	vmov	d9, r6, r7
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001cec:	9308      	str	r3, [sp, #32]
 8001cee:	f73f af7c 	bgt.w	8001bea <getKernelMachineClassification+0xcea>
		coefficients[1+m*2] = (n*sumOf_xy - sumOf_y*sumOf_x)/(n*sumOf_xSquared - sumOf_x*sumOf_x);
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f7fe fc46 	bl	8000584 <__aeabi_i2d>
 8001cf8:	4606      	mov	r6, r0
 8001cfa:	460f      	mov	r7, r1
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	463b      	mov	r3, r7
 8001d00:	ec51 0b1a 	vmov	r0, r1, d10
 8001d04:	f7fe fca8 	bl	8000658 <__aeabi_dmul>
 8001d08:	ec5b ab19 	vmov	sl, fp, d9
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460d      	mov	r5, r1
 8001d10:	ee19 2a10 	vmov	r2, s18
 8001d14:	465b      	mov	r3, fp
 8001d16:	ec51 0b1b 	vmov	r0, r1, d11
 8001d1a:	f7fe fc9d 	bl	8000658 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fadf 	bl	80002e8 <__aeabi_dsub>
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	4680      	mov	r8, r0
 8001d2e:	4689      	mov	r9, r1
 8001d30:	463b      	mov	r3, r7
 8001d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001d36:	f7fe fc8f 	bl	8000658 <__aeabi_dmul>
 8001d3a:	ee19 2a10 	vmov	r2, s18
 8001d3e:	460d      	mov	r5, r1
 8001d40:	465b      	mov	r3, fp
 8001d42:	4604      	mov	r4, r0
 8001d44:	4659      	mov	r1, fp
 8001d46:	ee19 0a10 	vmov	r0, s18
 8001d4a:	f7fe fc85 	bl	8000658 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f7fe fac7 	bl	80002e8 <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4640      	mov	r0, r8
 8001d60:	4649      	mov	r1, r9
 8001d62:	f7fe fda3 	bl	80008ac <__aeabi_ddiv>
 8001d66:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001d68:	460b      	mov	r3, r1
 8001d6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4429      	add	r1, r5
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
		coefficients[m*2] = (sumOf_y - coefficients[1+m*2]*sumOf_x)/n;
 8001d74:	ee19 0a10 	vmov	r0, s18
 8001d78:	4659      	mov	r1, fp
 8001d7a:	f7fe fc6d 	bl	8000658 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ec51 0b1b 	vmov	r0, r1, d11
 8001d86:	f7fe faaf 	bl	80002e8 <__aeabi_dsub>
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4632      	mov	r2, r6
 8001d8e:	f7fe fd8d 	bl	80008ac <__aeabi_ddiv>
 8001d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001d94:	442b      	add	r3, r5
 8001d96:	e9c3 0100 	strd	r0, r1, [r3]
 8001d9a:	e6d2      	b.n	8001b42 <getKernelMachineClassification+0xc42>
 8001d9c:	f3af 8000 	nop.w
	...
 8001da8:	bff00000 	.word	0xbff00000
				TransposeOf_X_tilde[currentColumn + currentRowTimesmTimesNplusOne] = 0;
 8001dac:	9b03      	ldr	r3, [sp, #12]
 8001dae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001db0:	9e06      	ldr	r6, [sp, #24]
 8001db2:	ee18 7a10 	vmov	r7, s16
 8001db6:	2400      	movs	r4, #0
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 8001db8:	4618      	mov	r0, r3
 8001dba:	463a      	mov	r2, r7
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f002 f815 	bl	8003dec <memset>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 8001dc2:	42ac      	cmp	r4, r5
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4433      	add	r3, r6
 8001dc8:	f104 0401 	add.w	r4, r4, #1
 8001dcc:	d1f4      	bne.n	8001db8 <getKernelMachineClassification+0xeb8>
 8001dce:	9b06      	ldr	r3, [sp, #24]
			TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 8001dd0:	4da1      	ldr	r5, [pc, #644]	; (8002058 <getKernelMachineClassification+0x1158>)
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 8001dd2:	9903      	ldr	r1, [sp, #12]
 8001dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dd6:	f103 0608 	add.w	r6, r3, #8
			TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 8001dda:	2400      	movs	r4, #0
 8001ddc:	9617      	str	r6, [sp, #92]	; 0x5c
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 8001dde:	2200      	movs	r2, #0
		for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 8001de0:	4282      	cmp	r2, r0
			TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 8001de2:	e9c1 4500 	strd	r4, r5, [r1]
		for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 8001de6:	f102 0201 	add.w	r2, r2, #1
 8001dea:	4431      	add	r1, r6
 8001dec:	d1f8      	bne.n	8001de0 <getKernelMachineClassification+0xee0>
 8001dee:	9b08      	ldr	r3, [sp, #32]
 8001df0:	9903      	ldr	r1, [sp, #12]
 8001df2:	9110      	str	r1, [sp, #64]	; 0x40
 8001df4:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	ee18 4a10 	vmov	r4, s16
 8001dfe:	9314      	str	r3, [sp, #80]	; 0x50
 8001e00:	3b08      	subs	r3, #8
 8001e02:	2200      	movs	r2, #0
 8001e04:	440c      	add	r4, r1
 8001e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8001e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001e0a:	920a      	str	r2, [sp, #40]	; 0x28
 8001e0c:	9415      	str	r4, [sp, #84]	; 0x54
 8001e0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8001e10:	930e      	str	r3, [sp, #56]	; 0x38
 8001e12:	9312      	str	r3, [sp, #72]	; 0x48
			for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001e16:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8001e1a:	f04f 0a00 	mov.w	sl, #0
 8001e1e:	f8cd a008 	str.w	sl, [sp, #8]
 8001e22:	4698      	mov	r8, r3
				if (currentRow != currentColumn) {
 8001e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e26:	4553      	cmp	r3, sl
 8001e28:	d040      	beq.n	8001eac <getKernelMachineClassification+0xfac>
					ratioModifier = matMul1[currentColumn + currentRowTimesmTimesNplusOne]/matMul1[currentRowAndColumn2];
 8001e2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001e2e:	445b      	add	r3, fp
 8001e30:	4413      	add	r3, r2
 8001e32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fd36 	bl	80008ac <__aeabi_ddiv>
 8001e40:	9b02      	ldr	r3, [sp, #8]
 8001e42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001e44:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8001e48:	ec41 0b18 	vmov	d8, r0, r1
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 8001e4c:	00dc      	lsls	r4, r3, #3
 8001e4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
						matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesmTimesNplusOne];
 8001e52:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8001e56:	ec51 0b18 	vmov	r0, r1, d8
 8001e5a:	f7fe fbfd 	bl	8000658 <__aeabi_dmul>
 8001e5e:	e9d5 6700 	ldrd	r6, r7, [r5]
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4630      	mov	r0, r6
 8001e68:	4639      	mov	r1, r7
 8001e6a:	f7fe fa3d 	bl	80002e8 <__aeabi_dsub>
 8001e6e:	e8e5 0102 	strd	r0, r1, [r5], #8
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 8001e72:	45ab      	cmp	fp, r5
 8001e74:	d1ed      	bne.n	8001e52 <getKernelMachineClassification+0xf52>
 8001e76:	9b03      	ldr	r3, [sp, #12]
 8001e78:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8001e7c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001e7e:	ec5a 9b18 	vmov	r9, sl, d8
 8001e82:	441c      	add	r4, r3
						TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesmTimesNplusOne];
 8001e84:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8001e88:	4648      	mov	r0, r9
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	f7fe fbe4 	bl	8000658 <__aeabi_dmul>
 8001e90:	e9d4 6700 	ldrd	r6, r7, [r4]
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4630      	mov	r0, r6
 8001e9a:	4639      	mov	r1, r7
 8001e9c:	f7fe fa24 	bl	80002e8 <__aeabi_dsub>
 8001ea0:	e8e4 0102 	strd	r0, r1, [r4], #8
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 8001ea4:	45a0      	cmp	r8, r4
 8001ea6:	d1ed      	bne.n	8001e84 <getKernelMachineClassification+0xf84>
 8001ea8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
			for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001eac:	9b02      	ldr	r3, [sp, #8]
 8001eae:	9a04      	ldr	r2, [sp, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	9b06      	ldr	r3, [sp, #24]
 8001eb8:	4592      	cmp	sl, r2
 8001eba:	4498      	add	r8, r3
 8001ebc:	449b      	add	fp, r3
 8001ebe:	f10a 0301 	add.w	r3, sl, #1
 8001ec2:	d001      	beq.n	8001ec8 <getKernelMachineClassification+0xfc8>
 8001ec4:	469a      	mov	sl, r3
 8001ec6:	e7ad      	b.n	8001e24 <getKernelMachineClassification+0xf24>
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 8001ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001eca:	9b06      	ldr	r3, [sp, #24]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001ed0:	4419      	add	r1, r3
 8001ed2:	441a      	add	r2, r3
 8001ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ed6:	9212      	str	r2, [sp, #72]	; 0x48
 8001ed8:	3308      	adds	r3, #8
 8001eda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ee0:	9110      	str	r1, [sp, #64]	; 0x40
 8001ee2:	4413      	add	r3, r2
 8001ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8001eea:	428a      	cmp	r2, r1
 8001eec:	f102 0301 	add.w	r3, r2, #1
 8001ef0:	d001      	beq.n	8001ef6 <getKernelMachineClassification+0xff6>
 8001ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8001ef4:	e78e      	b.n	8001e14 <getKernelMachineClassification+0xf14>
 8001ef6:	2700      	movs	r7, #0
 8001ef8:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8001efc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001efe:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8001f02:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8001f06:	46b9      	mov	r9, r7
				TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 8001f08:	e9d8 6700 	ldrd	r6, r7, [r8]
 8001f0c:	eb0a 0405 	add.w	r4, sl, r5
 8001f10:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001f14:	4632      	mov	r2, r6
 8001f16:	463b      	mov	r3, r7
 8001f18:	f7fe fcc8 	bl	80008ac <__aeabi_ddiv>
 8001f1c:	e8e4 0102 	strd	r0, r1, [r4], #8
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 8001f20:	42a5      	cmp	r5, r4
 8001f22:	d1f5      	bne.n	8001f10 <getKernelMachineClassification+0x1010>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 8001f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f26:	9b06      	ldr	r3, [sp, #24]
 8001f28:	4591      	cmp	r9, r2
 8001f2a:	441d      	add	r5, r3
 8001f2c:	44d8      	add	r8, fp
 8001f2e:	f109 0301 	add.w	r3, r9, #1
 8001f32:	d001      	beq.n	8001f38 <getKernelMachineClassification+0x1038>
 8001f34:	4699      	mov	r9, r3
 8001f36:	e7e7      	b.n	8001f08 <getKernelMachineClassification+0x1008>
		double *matMul2 = (double *) calloc(mTimesNPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 8001f38:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	f001 fef2 	bl	8003d24 <calloc>
 8001f40:	2300      	movs	r3, #0
 8001f42:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
 8001f46:	9302      	str	r3, [sp, #8]
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f4a:	9a02      	ldr	r2, [sp, #8]
 8001f4c:	f04f 0900 	mov.w	r9, #0
 8001f50:	46cb      	mov	fp, r9
 8001f52:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 8001f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001f58:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001f5a:	e8fa 4502 	ldrd	r4, r5, [sl], #8
 8001f5e:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 8001f62:	2600      	movs	r6, #0
					matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesmTimesNplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesmTimesNplusOne];
 8001f64:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8001f68:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8001f6c:	f7fe fb74 	bl	8000658 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe f9b8 	bl	80002ec <__adddf3>
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 8001f7c:	9a08      	ldr	r2, [sp, #32]
 8001f7e:	42b2      	cmp	r2, r6
					matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesmTimesNplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesmTimesNplusOne];
 8001f80:	4604      	mov	r4, r0
 8001f82:	460d      	mov	r5, r1
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 8001f84:	f106 0601 	add.w	r6, r6, #1
 8001f88:	dcec      	bgt.n	8001f64 <getKernelMachineClassification+0x1064>
 8001f8a:	9b04      	ldr	r3, [sp, #16]
 8001f8c:	449b      	add	fp, r3
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	f109 0901 	add.w	r9, r9, #1
 8001f94:	454b      	cmp	r3, r9
 8001f96:	e94a 4502 	strd	r4, r5, [sl, #-8]
 8001f9a:	dcdc      	bgt.n	8001f56 <getKernelMachineClassification+0x1056>
 8001f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f9e:	4611      	mov	r1, r2
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001fa0:	9a06      	ldr	r2, [sp, #24]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8001fa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	4291      	cmp	r1, r2
 8001fb2:	f102 0301 	add.w	r3, r2, #1
 8001fb6:	dd01      	ble.n	8001fbc <getKernelMachineClassification+0x10bc>
 8001fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8001fba:	e7c5      	b.n	8001f48 <getKernelMachineClassification+0x1048>
 8001fbc:	f04f 0b00 	mov.w	fp, #0
 8001fc0:	46da      	mov	sl, fp
 8001fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8001fc6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001fca:	f8dd b004 	ldr.w	fp, [sp, #4]
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 8001fd0:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8001fd2:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 8001fd6:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001fda:	2600      	movs	r6, #0
				coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 8001fdc:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8001fe0:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 8001fe4:	f7fe fb38 	bl	8000658 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe f97c 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001ff4:	3601      	adds	r6, #1
				coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001ffa:	45b3      	cmp	fp, r6
				coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 8001ffc:	e949 4502 	strd	r4, r5, [r9, #-8]
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8002000:	dcec      	bgt.n	8001fdc <getKernelMachineClassification+0x10dc>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 8002002:	9a02      	ldr	r2, [sp, #8]
 8002004:	9908      	ldr	r1, [sp, #32]
 8002006:	4291      	cmp	r1, r2
 8002008:	44da      	add	sl, fp
 800200a:	f102 0301 	add.w	r3, r2, #1
 800200e:	dd06      	ble.n	800201e <getKernelMachineClassification+0x111e>
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	e7dc      	b.n	8001fce <getKernelMachineClassification+0x10ce>
		double *matMul2 = (double *) calloc(mTimesNPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 8002014:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002016:	2108      	movs	r1, #8
 8002018:	f001 fe84 	bl	8003d24 <calloc>
 800201c:	9009      	str	r0, [sp, #36]	; 0x24
		coefficients[1+m*N] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 800201e:	9a06      	ldr	r2, [sp, #24]
 8002020:	9b18      	ldr	r3, [sp, #96]	; 0x60
		free(X_tilde);
 8002022:	980d      	ldr	r0, [sp, #52]	; 0x34
		coefficients[1+m*N] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 8002024:	4413      	add	r3, r2
 8002026:	461c      	mov	r4, r3
		coefficients[2+m*N] = 1; // We store the value of "alpha" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <getKernelMachineClassification+0x1158>)
 800202a:	2200      	movs	r2, #0
		coefficients[1+m*N] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 800202c:	2600      	movs	r6, #0
 800202e:	2700      	movs	r7, #0
		coefficients[2+m*N] = 1; // We store the value of "alpha" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 8002030:	e9c4 2302 	strd	r2, r3, [r4, #8]
		coefficients[1+m*N] = 0; // We store the value of "b_0" from the main function to be solved, which is "y_hat = alpha.K(x) + b_0"
 8002034:	e9c4 6700 	strd	r6, r7, [r4]
		free(X_tilde);
 8002038:	f001 fec2 	bl	8003dc0 <free>
		free(TransposeOf_X_tilde);
 800203c:	9803      	ldr	r0, [sp, #12]
 800203e:	f001 febf 	bl	8003dc0 <free>
		free(matMul1);
 8002042:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002044:	f001 febc 	bl	8003dc0 <free>
		free(matMul2);
 8002048:	9809      	ldr	r0, [sp, #36]	; 0x24
}
 800204a:	b025      	add	sp, #148	; 0x94
 800204c:	ecbd 8b0a 	vpop	{d8-d12}
 8002050:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(matMul2);
 8002054:	f001 beb4 	b.w	8003dc0 <free>
 8002058:	3ff00000 	.word	0x3ff00000
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 800205c:	9901      	ldr	r1, [sp, #4]
	int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
 800205e:	9d02      	ldr	r5, [sp, #8]
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8002060:	00ca      	lsls	r2, r1, #3
	int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
 8002062:	1c6b      	adds	r3, r5, #1
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8002064:	4610      	mov	r0, r2
	int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
 8002066:	9304      	str	r3, [sp, #16]
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8002068:	fb03 f301 	mul.w	r3, r3, r1
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 800206c:	4617      	mov	r7, r2
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 800206e:	00dc      	lsls	r4, r3, #3
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8002070:	920c      	str	r2, [sp, #48]	; 0x30
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8002072:	931c      	str	r3, [sp, #112]	; 0x70
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 8002074:	f001 fe9c 	bl	8003db0 <malloc>
 8002078:	4603      	mov	r3, r0
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 800207a:	4620      	mov	r0, r4
	double *Y_tilde = (double *) malloc(n*p*sizeof(double)); // This variable will contain the output data of the system under study ("Y") as required by the training of this algorithm.
 800207c:	9313      	str	r3, [sp, #76]	; 0x4c
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 800207e:	f001 fe97 	bl	8003db0 <malloc>
 8002082:	4603      	mov	r3, r0
 8002084:	461e      	mov	r6, r3
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 8002086:	4620      	mov	r0, r4
	double *X_tilde = (double *) malloc(n*mPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8002088:	930a      	str	r3, [sp, #40]	; 0x28
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 800208a:	f001 fe91 	bl	8003db0 <malloc>
 800208e:	4633      	mov	r3, r6
 8002090:	3308      	adds	r3, #8
 8002092:	9308      	str	r3, [sp, #32]
 8002094:	00eb      	lsls	r3, r5, #3
	int currentColumn2 = 0; // This variable is used in the for-loop for the matrix transpose that will be made.
 8002096:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800209a:	9319      	str	r3, [sp, #100]	; 0x64
			Y_tilde[currentRow] = 0.0001;
 800209c:	ed9f bba6 	vldr	d11, [pc, #664]	; 8002338 <getKernelMachineClassification+0x1438>
 80020a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80020a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80020a4:	9006      	str	r0, [sp, #24]
			Y_tilde[currentRow] = 0.0001;
 80020a6:	ed9f aba6 	vldr	d10, [pc, #664]	; 8002340 <getKernelMachineClassification+0x1440>
			Y_tilde[currentRow] = 0.9999;
 80020aa:	ed9f 9ba7 	vldr	d9, [pc, #668]	; 8002348 <getKernelMachineClassification+0x1448>
 80020ae:	ed9f 8ba8 	vldr	d8, [pc, #672]	; 8002350 <getKernelMachineClassification+0x1450>
 80020b2:	463c      	mov	r4, r7
 80020b4:	eb00 0b07 	add.w	fp, r0, r7
 80020b8:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80020bc:	9103      	str	r1, [sp, #12]
	int currentColumn2 = 0; // This variable is used in the for-loop for the matrix transpose that will be made.
 80020be:	464f      	mov	r7, r9
	double *TransposeOf_X_tilde = (double *) malloc(mPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 80020c0:	46ca      	mov	sl, r9
 80020c2:	464d      	mov	r5, r9
		if (Y[currentRow] == 1) {
 80020c4:	9b03      	ldr	r3, [sp, #12]
 80020c6:	e8f3 8902 	ldrd	r8, r9, [r3], #8
 80020ca:	2200      	movs	r2, #0
 80020cc:	9303      	str	r3, [sp, #12]
 80020ce:	4640      	mov	r0, r8
 80020d0:	4ba3      	ldr	r3, [pc, #652]	; (8002360 <getKernelMachineClassification+0x1460>)
 80020d2:	4649      	mov	r1, r9
 80020d4:	f7fe fd28 	bl	8000b28 <__aeabi_dcmpeq>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d07d      	beq.n	80021d8 <getKernelMachineClassification+0x12d8>
			Y_tilde[currentRow] = 0.9999;
 80020dc:	eeb0 0a48 	vmov.f32	s0, s16
 80020e0:	eef0 0a68 	vmov.f32	s1, s17
 80020e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80020e6:	eb03 08c7 	add.w	r8, r3, r7, lsl #3
 80020ea:	ed88 9b00 	vstr	d9, [r8]
		if (Y[currentRow] == -1) {
 80020ee:	ea4f 09c7 	mov.w	r9, r7, lsl #3
		Y_tilde[currentRow] = log(Y_tilde[currentRow]/(1-Y_tilde[currentRow]));
 80020f2:	f004 fc1d 	bl	8006930 <log>
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesMplusOne];
 80020f6:	9b06      	ldr	r3, [sp, #24]
 80020f8:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8002358 <getKernelMachineClassification+0x1458>
 80020fc:	4499      	add	r9, r3
		X_tilde[currentRowTimesMplusOne] = 1;
 80020fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002100:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002104:	ed83 7b00 	vstr	d7, [r3]
 8002108:	9b14      	ldr	r3, [sp, #80]	; 0x50
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesMplusOne];
 800210a:	ed89 7b00 	vstr	d7, [r9]
 800210e:	eb03 02ca 	add.w	r2, r3, sl, lsl #3
		Y_tilde[currentRow] = log(Y_tilde[currentRow]/(1-Y_tilde[currentRow]));
 8002112:	ed88 0b00 	vstr	d0, [r8]
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8002116:	9b08      	ldr	r3, [sp, #32]
 8002118:	eb03 0cc5 	add.w	ip, r3, r5, lsl #3
		TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesMplusOne];
 800211c:	465b      	mov	r3, fp
			X_tilde[currentRowAndColumn] = X[currentColumn-1 + currentRowTimesM];
 800211e:	e8f2 0102 	ldrd	r0, r1, [r2], #8
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8002122:	4296      	cmp	r6, r2
			TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn];
 8002124:	e9c3 0100 	strd	r0, r1, [r3]
			X_tilde[currentRowAndColumn] = X[currentColumn-1 + currentRowTimesM];
 8002128:	e8ec 0102 	strd	r0, r1, [ip], #8
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 800212c:	4423      	add	r3, r4
 800212e:	d1f6      	bne.n	800211e <getKernelMachineClassification+0x121e>
		currentColumn2++;
 8002130:	9b04      	ldr	r3, [sp, #16]
 8002132:	441d      	add	r5, r3
 8002134:	9b02      	ldr	r3, [sp, #8]
 8002136:	449a      	add	sl, r3
 8002138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800213a:	441e      	add	r6, r3
	for (int currentRow=0; currentRow<n; currentRow++) {
 800213c:	9b01      	ldr	r3, [sp, #4]
		currentColumn2++;
 800213e:	3701      	adds	r7, #1
	for (int currentRow=0; currentRow<n; currentRow++) {
 8002140:	42bb      	cmp	r3, r7
 8002142:	f10b 0b08 	add.w	fp, fp, #8
 8002146:	dcbd      	bgt.n	80020c4 <getKernelMachineClassification+0x11c4>
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8002148:	9b04      	ldr	r3, [sp, #16]
 800214a:	2108      	movs	r1, #8
 800214c:	fb03 f003 	mul.w	r0, r3, r3
 8002150:	f001 fde8 	bl	8003d24 <calloc>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8002154:	2300      	movs	r3, #0
 8002156:	930b      	str	r3, [sp, #44]	; 0x2c
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8002158:	9309      	str	r3, [sp, #36]	; 0x24
 800215a:	9b06      	ldr	r3, [sp, #24]
 800215c:	9012      	str	r0, [sp, #72]	; 0x48
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 800215e:	9308      	str	r3, [sp, #32]
	double *matMul1 = (double *) calloc(mPlusOne*mPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8002160:	9303      	str	r3, [sp, #12]
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 8002162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002166:	931a      	str	r3, [sp, #104]	; 0x68
 8002168:	f04f 0b00 	mov.w	fp, #0
 800216c:	46da      	mov	sl, fp
 800216e:	eb03 09c2 	add.w	r9, r3, r2, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8002172:	9b06      	ldr	r3, [sp, #24]
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 8002174:	9f03      	ldr	r7, [sp, #12]
 8002176:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 800217a:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800217e:	2600      	movs	r6, #0
				matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 8002180:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8002184:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8002188:	f7fe fa66 	bl	8000658 <__aeabi_dmul>
 800218c:	460b      	mov	r3, r1
 800218e:	4602      	mov	r2, r0
 8002190:	4629      	mov	r1, r5
 8002192:	4620      	mov	r0, r4
 8002194:	f7fe f8aa 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8002198:	9b01      	ldr	r3, [sp, #4]
 800219a:	3601      	adds	r6, #1
 800219c:	42b3      	cmp	r3, r6
				matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80021a2:	dced      	bgt.n	8002180 <getKernelMachineClassification+0x1280>
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 80021a4:	9a02      	ldr	r2, [sp, #8]
 80021a6:	455a      	cmp	r2, fp
 80021a8:	449a      	add	sl, r3
 80021aa:	e949 4502 	strd	r4, r5, [r9, #-8]
 80021ae:	f10b 0301 	add.w	r3, fp, #1
 80021b2:	dd01      	ble.n	80021b8 <getKernelMachineClassification+0x12b8>
 80021b4:	469b      	mov	fp, r3
 80021b6:	e7dc      	b.n	8002172 <getKernelMachineClassification+0x1272>
 80021b8:	9b03      	ldr	r3, [sp, #12]
 80021ba:	4611      	mov	r1, r2
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 80021bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021be:	4413      	add	r3, r2
 80021c0:	9303      	str	r3, [sp, #12]
 80021c2:	9a04      	ldr	r2, [sp, #16]
 80021c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021c6:	4413      	add	r3, r2
 80021c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80021ca:	9309      	str	r3, [sp, #36]	; 0x24
 80021cc:	4291      	cmp	r1, r2
 80021ce:	f102 0301 	add.w	r3, r2, #1
 80021d2:	dd16      	ble.n	8002202 <getKernelMachineClassification+0x1302>
 80021d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80021d6:	e7c4      	b.n	8002162 <getKernelMachineClassification+0x1262>
		if (Y[currentRow] == -1) {
 80021d8:	4b62      	ldr	r3, [pc, #392]	; (8002364 <getKernelMachineClassification+0x1464>)
 80021da:	4640      	mov	r0, r8
 80021dc:	4649      	mov	r1, r9
 80021de:	2200      	movs	r2, #0
 80021e0:	f7fe fca2 	bl	8000b28 <__aeabi_dcmpeq>
 80021e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80021e6:	eb03 08c7 	add.w	r8, r3, r7, lsl #3
 80021ea:	2800      	cmp	r0, #0
 80021ec:	f000 8253 	beq.w	8002696 <getKernelMachineClassification+0x1796>
			Y_tilde[currentRow] = 0.0001;
 80021f0:	eeb0 0a4a 	vmov.f32	s0, s20
 80021f4:	eef0 0a6a 	vmov.f32	s1, s21
 80021f8:	ed88 bb00 	vstr	d11, [r8]
 80021fc:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8002200:	e777      	b.n	80020f2 <getKernelMachineClassification+0x11f2>
 8002202:	9b19      	ldr	r3, [sp, #100]	; 0x64
			TransposeOf_X_tilde[currentColumn + currentRowTimesMplusOne] = 0;
 8002204:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8002208:	f103 0708 	add.w	r7, r3, #8
 800220c:	3501      	adds	r5, #1
 800220e:	9b06      	ldr	r3, [sp, #24]
 8002210:	9716      	str	r7, [sp, #88]	; 0x58
 8002212:	460e      	mov	r6, r1
 8002214:	00ed      	lsls	r5, r5, #3
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 8002216:	2400      	movs	r4, #0
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 8002218:	4618      	mov	r0, r3
 800221a:	462a      	mov	r2, r5
 800221c:	2100      	movs	r1, #0
 800221e:	f001 fde5 	bl	8003dec <memset>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 8002222:	42a6      	cmp	r6, r4
 8002224:	4603      	mov	r3, r0
 8002226:	443b      	add	r3, r7
 8002228:	f104 0401 	add.w	r4, r4, #1
 800222c:	dcf4      	bgt.n	8002218 <getKernelMachineClassification+0x1318>
 800222e:	9b19      	ldr	r3, [sp, #100]	; 0x64
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mPlusOne] = 1;
 8002230:	4d4b      	ldr	r5, [pc, #300]	; (8002360 <getKernelMachineClassification+0x1460>)
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We set all values to zero.
 8002232:	9906      	ldr	r1, [sp, #24]
	for (int currentUnitaryValue=0; currentUnitaryValue<mPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 8002234:	9802      	ldr	r0, [sp, #8]
 8002236:	f103 0610 	add.w	r6, r3, #16
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mPlusOne] = 1;
 800223a:	2400      	movs	r4, #0
 800223c:	9617      	str	r6, [sp, #92]	; 0x5c
	for (int currentUnitaryValue=0; currentUnitaryValue<mPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 800223e:	2200      	movs	r2, #0
 8002240:	4290      	cmp	r0, r2
		TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mPlusOne] = 1;
 8002242:	e9c1 4500 	strd	r4, r5, [r1]
	for (int currentUnitaryValue=0; currentUnitaryValue<mPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 8002246:	f102 0201 	add.w	r2, r2, #1
 800224a:	4431      	add	r1, r6
 800224c:	dcf8      	bgt.n	8002240 <getKernelMachineClassification+0x1340>
 800224e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002250:	930e      	str	r3, [sp, #56]	; 0x38
 8002252:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8002256:	9b06      	ldr	r3, [sp, #24]
 8002258:	930f      	str	r3, [sp, #60]	; 0x3c
 800225a:	f8dd b008 	ldr.w	fp, [sp, #8]
	for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 800225e:	2300      	movs	r3, #0
 8002260:	9309      	str	r3, [sp, #36]	; 0x24
		for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8002262:	2300      	movs	r3, #0
 8002264:	9303      	str	r3, [sp, #12]
 8002266:	469a      	mov	sl, r3
			if (currentRow != currentColumn) {
 8002268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800226a:	459a      	cmp	sl, r3
 800226c:	d044      	beq.n	80022f8 <getKernelMachineClassification+0x13f8>
				ratioModifier = matMul1[currentColumn + currentRowTimesMplusOne]/matMul1[currentRowAndColumn2];
 800226e:	9c03      	ldr	r4, [sp, #12]
 8002270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002272:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800227a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe fb14 	bl	80008ac <__aeabi_ddiv>
 8002284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002286:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002288:	00e4      	lsls	r4, r4, #3
 800228a:	ec41 0b18 	vmov	d8, r0, r1
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 800228e:	191e      	adds	r6, r3, r4
 8002290:	2500      	movs	r5, #0
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesMplusOne];
 8002292:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8002296:	ec51 0b18 	vmov	r0, r1, d8
 800229a:	f7fe f9dd 	bl	8000658 <__aeabi_dmul>
 800229e:	e9d6 8900 	ldrd	r8, r9, [r6]
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4640      	mov	r0, r8
 80022a8:	4649      	mov	r1, r9
 80022aa:	f7fe f81d 	bl	80002e8 <__aeabi_dsub>
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 80022ae:	45ab      	cmp	fp, r5
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesMplusOne];
 80022b0:	e8e6 0102 	strd	r0, r1, [r6], #8
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 80022b4:	f105 0501 	add.w	r5, r5, #1
 80022b8:	dceb      	bgt.n	8002292 <getKernelMachineClassification+0x1392>
 80022ba:	9b06      	ldr	r3, [sp, #24]
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 80022bc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 80022c0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 80022c4:	ec5a 9b18 	vmov	r9, sl, d8
 80022c8:	441c      	add	r4, r3
 80022ca:	2500      	movs	r5, #0
					TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesMplusOne];
 80022cc:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80022d0:	4648      	mov	r0, r9
 80022d2:	4651      	mov	r1, sl
 80022d4:	f7fe f9c0 	bl	8000658 <__aeabi_dmul>
 80022d8:	e9d4 6700 	ldrd	r6, r7, [r4]
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4630      	mov	r0, r6
 80022e2:	4639      	mov	r1, r7
 80022e4:	f7fe f800 	bl	80002e8 <__aeabi_dsub>
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 80022e8:	45ab      	cmp	fp, r5
					TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesMplusOne];
 80022ea:	e8e4 0102 	strd	r0, r1, [r4], #8
				for (int currentModifiedElements=0; currentModifiedElements<mPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 80022ee:	f105 0501 	add.w	r5, r5, #1
 80022f2:	dceb      	bgt.n	80022cc <getKernelMachineClassification+0x13cc>
 80022f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
		for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 80022f8:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80022fc:	45d3      	cmp	fp, sl
 80022fe:	4413      	add	r3, r2
 8002300:	9303      	str	r3, [sp, #12]
 8002302:	f10a 0301 	add.w	r3, sl, #1
 8002306:	dd01      	ble.n	800230c <getKernelMachineClassification+0x140c>
 8002308:	469a      	mov	sl, r3
 800230a:	e7ad      	b.n	8002268 <getKernelMachineClassification+0x1368>
	for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 800230c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800230e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002310:	4611      	mov	r1, r2
 8002312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002314:	4419      	add	r1, r3
 8002316:	441a      	add	r2, r3
 8002318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800231a:	920e      	str	r2, [sp, #56]	; 0x38
 800231c:	3308      	adds	r3, #8
 800231e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002320:	930d      	str	r3, [sp, #52]	; 0x34
 8002322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002324:	910f      	str	r1, [sp, #60]	; 0x3c
 8002326:	4413      	add	r3, r2
 8002328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800232a:	930c      	str	r3, [sp, #48]	; 0x30
 800232c:	4593      	cmp	fp, r2
 800232e:	f102 0301 	add.w	r3, r2, #1
 8002332:	dd19      	ble.n	8002368 <getKernelMachineClassification+0x1468>
 8002334:	9309      	str	r3, [sp, #36]	; 0x24
 8002336:	e794      	b.n	8002262 <getKernelMachineClassification+0x1362>
 8002338:	eb1c432d 	.word	0xeb1c432d
 800233c:	3f1a36e2 	.word	0x3f1a36e2
 8002340:	bbf957e5 	.word	0xbbf957e5
 8002344:	3f1a378e 	.word	0x3f1a378e
 8002348:	48e8a71e 	.word	0x48e8a71e
 800234c:	3fefff2e 	.word	0x3fefff2e
 8002350:	0000025d 	.word	0x0000025d
 8002354:	40c38780 	.word	0x40c38780
 8002358:	00000000 	.word	0x00000000
 800235c:	3ff00000 	.word	0x3ff00000
 8002360:	3ff00000 	.word	0x3ff00000
 8002364:	bff00000 	.word	0xbff00000
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 8002368:	f04f 0900 	mov.w	r9, #0
 800236c:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8002370:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002374:	46c8      	mov	r8, r9
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 8002376:	9b06      	ldr	r3, [sp, #24]
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 8002378:	e9db 6700 	ldrd	r6, r7, [fp]
 800237c:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 8002380:	2400      	movs	r4, #0
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 8002382:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002386:	4632      	mov	r2, r6
 8002388:	463b      	mov	r3, r7
 800238a:	f7fe fa8f 	bl	80008ac <__aeabi_ddiv>
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 800238e:	45a2      	cmp	sl, r4
			TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 8002390:	e8e5 0102 	strd	r0, r1, [r5], #8
		for (int currentColumn=0; currentColumn<mPlusOne; currentColumn++) {
 8002394:	f104 0401 	add.w	r4, r4, #1
 8002398:	dcf3      	bgt.n	8002382 <getKernelMachineClassification+0x1482>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 800239a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800239c:	449b      	add	fp, r3
 800239e:	9b04      	ldr	r3, [sp, #16]
 80023a0:	45ca      	cmp	sl, r9
 80023a2:	4498      	add	r8, r3
 80023a4:	f109 0301 	add.w	r3, r9, #1
 80023a8:	dd01      	ble.n	80023ae <getKernelMachineClassification+0x14ae>
 80023aa:	4699      	mov	r9, r3
 80023ac:	e7e3      	b.n	8002376 <getKernelMachineClassification+0x1476>
	double *matMul2 = (double *) calloc(mPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 80023ae:	981c      	ldr	r0, [sp, #112]	; 0x70
 80023b0:	2108      	movs	r1, #8
 80023b2:	f001 fcb7 	bl	8003d24 <calloc>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	930b      	str	r3, [sp, #44]	; 0x2c
	double *matMul2 = (double *) calloc(mPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 80023ba:	9009      	str	r0, [sp, #36]	; 0x24
 80023bc:	9303      	str	r3, [sp, #12]
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 80023be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023c0:	9a03      	ldr	r2, [sp, #12]
 80023c2:	f04f 0900 	mov.w	r9, #0
 80023c6:	46cb      	mov	fp, r9
 80023c8:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 80023cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 80023ce:	9f08      	ldr	r7, [sp, #32]
 80023d0:	e8fa 4502 	ldrd	r4, r5, [sl], #8
 80023d4:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 80023d8:	2600      	movs	r6, #0
				matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesMplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesMplusOne];
 80023da:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80023de:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80023e2:	f7fe f939 	bl	8000658 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4620      	mov	r0, r4
 80023ec:	4629      	mov	r1, r5
 80023ee:	f7fd ff7d 	bl	80002ec <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 80023f2:	9a02      	ldr	r2, [sp, #8]
 80023f4:	42b2      	cmp	r2, r6
				matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesMplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesMplusOne];
 80023f6:	4604      	mov	r4, r0
 80023f8:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<mPlusOne; currentMultipliedElements++) {
 80023fa:	f106 0601 	add.w	r6, r6, #1
 80023fe:	dcec      	bgt.n	80023da <getKernelMachineClassification+0x14da>
 8002400:	9b04      	ldr	r3, [sp, #16]
 8002402:	449b      	add	fp, r3
		for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8002404:	9b01      	ldr	r3, [sp, #4]
 8002406:	f109 0901 	add.w	r9, r9, #1
 800240a:	454b      	cmp	r3, r9
 800240c:	e94a 4502 	strd	r4, r5, [sl, #-8]
 8002410:	dcdc      	bgt.n	80023cc <getKernelMachineClassification+0x14cc>
 8002412:	9b08      	ldr	r3, [sp, #32]
 8002414:	4611      	mov	r1, r2
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 8002416:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002418:	4413      	add	r3, r2
 800241a:	9308      	str	r3, [sp, #32]
 800241c:	9a01      	ldr	r2, [sp, #4]
 800241e:	9b03      	ldr	r3, [sp, #12]
 8002420:	4413      	add	r3, r2
 8002422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	4291      	cmp	r1, r2
 8002428:	f102 0301 	add.w	r3, r2, #1
 800242c:	dd01      	ble.n	8002432 <getKernelMachineClassification+0x1532>
 800242e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002430:	e7c5      	b.n	80023be <getKernelMachineClassification+0x14be>
 8002432:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 8002436:	f04f 0900 	mov.w	r9, #0
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) {
 800243a:	46ca      	mov	sl, r9
 800243c:	f8cd 9010 	str.w	r9, [sp, #16]
 8002440:	46d9      	mov	r9, fp
 8002442:	f8dd b004 	ldr.w	fp, [sp, #4]
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8002446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002448:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800244a:	9703      	str	r7, [sp, #12]
 800244c:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 8002450:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
 8002454:	2600      	movs	r6, #0
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y_tilde[currentMultipliedElements];
 8002456:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 800245a:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 800245e:	f7fe f8fb 	bl	8000658 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fd ff3f 	bl	80002ec <__adddf3>
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800246e:	3601      	adds	r6, #1
 8002470:	45b3      	cmp	fp, r6
			coefficients[currentRow] = coefficients[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y_tilde[currentMultipliedElements];
 8002472:	4604      	mov	r4, r0
 8002474:	460d      	mov	r5, r1
		for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8002476:	dcee      	bgt.n	8002456 <getKernelMachineClassification+0x1556>
	for (int currentRow=0; currentRow<mPlusOne; currentRow++) { // In this for-loop, we will store the "Beta" coefficient values of the Kernel function "K(x)".
 8002478:	9a04      	ldr	r2, [sp, #16]
 800247a:	9902      	ldr	r1, [sp, #8]
 800247c:	4291      	cmp	r1, r2
 800247e:	e949 4502 	strd	r4, r5, [r9, #-8]
 8002482:	44da      	add	sl, fp
 8002484:	f102 0301 	add.w	r3, r2, #1
 8002488:	dd01      	ble.n	800248e <getKernelMachineClassification+0x158e>
 800248a:	9304      	str	r3, [sp, #16]
 800248c:	e7db      	b.n	8002446 <getKernelMachineClassification+0x1546>
	double sumOf_xSquared = 0;
 800248e:	ed9f 7ba0 	vldr	d7, [pc, #640]	; 8002710 <getKernelMachineClassification+0x1810>
 8002492:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002494:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
	double sumOf_x = 0;
 8002498:	eeb0 aa47 	vmov.f32	s20, s14
 800249c:	eef0 aa67 	vmov.f32	s21, s15
	double sumOf_xSquared = 0;
 80024a0:	ed8d 7b04 	vstr	d7, [sp, #16]
	double sumOf_y = 0;
 80024a4:	eeb0 9a47 	vmov.f32	s18, s14
 80024a8:	eef0 9a67 	vmov.f32	s19, s15
	double sumOf_xy = 0;
 80024ac:	eeb0 8a47 	vmov.f32	s16, s14
 80024b0:	eef0 8a67 	vmov.f32	s17, s15
 80024b4:	f103 0b08 	add.w	fp, r3, #8
 80024b8:	f8cd b020 	str.w	fp, [sp, #32]
 80024bc:	f04f 0a00 	mov.w	sl, #0
 80024c0:	468b      	mov	fp, r1
		Y_tilde[currentRow] = coefficients[0];
 80024c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80024c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024cc:	9b03      	ldr	r3, [sp, #12]
 80024ce:	e8e3 4502 	strd	r4, r5, [r3], #8
 80024d2:	9303      	str	r3, [sp, #12]
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80024d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
		Y_tilde[currentRow] = coefficients[0];
 80024d6:	2600      	movs	r6, #0
 80024d8:	eb03 07ca 	add.w	r7, r3, sl, lsl #3
			Y_tilde[currentRow] = Y_tilde[currentRow] + coefficients[currentColumn]*X[currentColumn-1 + currentRowTimesM];
 80024dc:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 80024e0:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 80024e4:	f7fe f8b8 	bl	8000658 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4620      	mov	r0, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	f7fd fefc 	bl	80002ec <__adddf3>
 80024f4:	3601      	adds	r6, #1
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80024f6:	45b3      	cmp	fp, r6
			Y_tilde[currentRow] = Y_tilde[currentRow] + coefficients[currentColumn]*X[currentColumn-1 + currentRowTimesM];
 80024f8:	4604      	mov	r4, r0
 80024fa:	460d      	mov	r5, r1
		for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 80024fc:	dcee      	bgt.n	80024dc <getKernelMachineClassification+0x15dc>
		Y_tilde[currentRow] = 1 / (1 + exp(-Y_tilde[currentRow])); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 80024fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002502:	9010      	str	r0, [sp, #64]	; 0x40
 8002504:	9311      	str	r3, [sp, #68]	; 0x44
 8002506:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800250a:	f004 f9c1 	bl	8006890 <exp>
 800250e:	4b82      	ldr	r3, [pc, #520]	; (8002718 <getKernelMachineClassification+0x1818>)
 8002510:	ec51 0b10 	vmov	r0, r1, d0
 8002514:	2200      	movs	r2, #0
 8002516:	f7fd fee9 	bl	80002ec <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	2000      	movs	r0, #0
 8002520:	497d      	ldr	r1, [pc, #500]	; (8002718 <getKernelMachineClassification+0x1818>)
 8002522:	f7fe f9c3 	bl	80008ac <__aeabi_ddiv>
		sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8002526:	9b15      	ldr	r3, [sp, #84]	; 0x54
		Y_tilde[currentRow] = 1 / (1 + exp(-Y_tilde[currentRow])); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8002528:	9e03      	ldr	r6, [sp, #12]
		sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 800252a:	e8f3 7802 	ldrd	r7, r8, [r3], #8
		Y_tilde[currentRow] = 1 / (1 + exp(-Y_tilde[currentRow])); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 800252e:	4604      	mov	r4, r0
 8002530:	460d      	mov	r5, r1
		sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8002532:	463a      	mov	r2, r7
		Y_tilde[currentRow] = 1 / (1 + exp(-Y_tilde[currentRow])); // We will store the results of the transformed function "K(x)" in "Y_tilde".
 8002534:	e946 4502 	strd	r4, r5, [r6, #-8]
		sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8002538:	9315      	str	r3, [sp, #84]	; 0x54
 800253a:	4643      	mov	r3, r8
 800253c:	f7fe f88c 	bl	8000658 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	ec51 0b18 	vmov	r0, r1, d8
 8002548:	f7fd fed0 	bl	80002ec <__adddf3>
 800254c:	ec41 0b17 	vmov	d7, r0, r1
		sumOf_y += Y[currentRow];
 8002550:	463a      	mov	r2, r7
 8002552:	ec51 0b19 	vmov	r0, r1, d9
		sumOf_xy += Y_tilde[currentRow] * Y[currentRow];
 8002556:	eeb0 8a47 	vmov.f32	s16, s14
 800255a:	eef0 8a67 	vmov.f32	s17, s15
		sumOf_y += Y[currentRow];
 800255e:	4643      	mov	r3, r8
 8002560:	f7fd fec4 	bl	80002ec <__adddf3>
		sumOf_x += Y_tilde[currentRow];
 8002564:	4622      	mov	r2, r4
		sumOf_y += Y[currentRow];
 8002566:	4606      	mov	r6, r0
 8002568:	460f      	mov	r7, r1
		sumOf_x += Y_tilde[currentRow];
 800256a:	462b      	mov	r3, r5
 800256c:	ec51 0b1a 	vmov	r0, r1, d10
 8002570:	f7fd febc 	bl	80002ec <__adddf3>
		sumOf_y += Y[currentRow];
 8002574:	ec47 6b19 	vmov	d9, r6, r7
		sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 8002578:	4622      	mov	r2, r4
		sumOf_x += Y_tilde[currentRow];
 800257a:	4606      	mov	r6, r0
 800257c:	460f      	mov	r7, r1
		sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 800257e:	462b      	mov	r3, r5
 8002580:	4620      	mov	r0, r4
 8002582:	4629      	mov	r1, r5
 8002584:	f7fe f868 	bl	8000658 <__aeabi_dmul>
 8002588:	460b      	mov	r3, r1
 800258a:	4602      	mov	r2, r0
 800258c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002590:	f7fd feac 	bl	80002ec <__adddf3>
	for (int currentRow = 0; currentRow < n; currentRow++) {
 8002594:	9b01      	ldr	r3, [sp, #4]
 8002596:	f109 0901 	add.w	r9, r9, #1
 800259a:	454b      	cmp	r3, r9
		sumOf_xSquared += Y_tilde[currentRow] * Y_tilde[currentRow];
 800259c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		sumOf_x += Y_tilde[currentRow];
 80025a0:	ec47 6b1a 	vmov	d10, r6, r7
	for (int currentRow = 0; currentRow < n; currentRow++) {
 80025a4:	44da      	add	sl, fp
 80025a6:	dc8c      	bgt.n	80024c2 <getKernelMachineClassification+0x15c2>
	coefficients[2+m] = (n*sumOf_xy - sumOf_y*sumOf_x)/(n*sumOf_xSquared - sumOf_x*sumOf_x);
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffeb 	bl	8000584 <__aeabi_i2d>
 80025ae:	4680      	mov	r8, r0
 80025b0:	4689      	mov	r9, r1
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	ec51 0b18 	vmov	r0, r1, d8
 80025ba:	f7fe f84d 	bl	8000658 <__aeabi_dmul>
 80025be:	ec5b ab1a 	vmov	sl, fp, d10
 80025c2:	ee1a 2a10 	vmov	r2, s20
 80025c6:	465b      	mov	r3, fp
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	ec51 0b19 	vmov	r0, r1, d9
 80025d0:	f7fe f842 	bl	8000658 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fd fe84 	bl	80002e8 <__aeabi_dsub>
 80025e0:	4642      	mov	r2, r8
 80025e2:	4606      	mov	r6, r0
 80025e4:	460f      	mov	r7, r1
 80025e6:	464b      	mov	r3, r9
 80025e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80025ec:	f7fe f834 	bl	8000658 <__aeabi_dmul>
 80025f0:	ee1a 2a10 	vmov	r2, s20
 80025f4:	465b      	mov	r3, fp
 80025f6:	4604      	mov	r4, r0
 80025f8:	460d      	mov	r5, r1
 80025fa:	ee1a 0a10 	vmov	r0, s20
 80025fe:	4659      	mov	r1, fp
 8002600:	f7fe f82a 	bl	8000658 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fe6c 	bl	80002e8 <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4630      	mov	r0, r6
 8002616:	4639      	mov	r1, r7
 8002618:	f7fe f948 	bl	80008ac <__aeabi_ddiv>
 800261c:	460b      	mov	r3, r1
 800261e:	e9dd 1518 	ldrd	r1, r5, [sp, #96]	; 0x60
 8002622:	4602      	mov	r2, r0
 8002624:	4429      	add	r1, r5
 8002626:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800262a:	460c      	mov	r4, r1
	coefficients[1+m] = (sumOf_y - coefficients[2+m]*sumOf_x)/n;
 800262c:	ee1a 0a10 	vmov	r0, s20
 8002630:	4659      	mov	r1, fp
 8002632:	f7fe f811 	bl	8000658 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	ec51 0b19 	vmov	r0, r1, d9
 800263e:	f7fd fe53 	bl	80002e8 <__aeabi_dsub>
 8002642:	4642      	mov	r2, r8
 8002644:	464b      	mov	r3, r9
 8002646:	f7fe f931 	bl	80008ac <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	free(Y_tilde);
 8002652:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002654:	f001 fbb4 	bl	8003dc0 <free>
	free(X_tilde);
 8002658:	980a      	ldr	r0, [sp, #40]	; 0x28
 800265a:	f001 fbb1 	bl	8003dc0 <free>
	free(TransposeOf_X_tilde);
 800265e:	9806      	ldr	r0, [sp, #24]
 8002660:	f001 fbae 	bl	8003dc0 <free>
	free(matMul1);
 8002664:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002666:	f001 fbab 	bl	8003dc0 <free>
	free(matMul2);
 800266a:	9809      	ldr	r0, [sp, #36]	; 0x24
}
 800266c:	b025      	add	sp, #148	; 0x94
 800266e:	ecbd 8b0a 	vpop	{d8-d12}
 8002672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(matMul2);
 8002676:	f001 bba3 	b.w	8003dc0 <free>
			printf("\nERROR: The output data from the row %d and column %d, had a value that is different than \"-1\" or \"+1\". Please assign the proper output values for this algorithm, considering the possible outputs of -1 and +1.\n", currentRow, p);
 800267a:	4828      	ldr	r0, [pc, #160]	; (800271c <getKernelMachineClassification+0x181c>)
 800267c:	4641      	mov	r1, r8
 800267e:	2201      	movs	r2, #1
 8002680:	f002 f8e0 	bl	8004844 <iprintf>
			exit(1);
 8002684:	2001      	movs	r0, #1
 8002686:	f001 fb5b 	bl	8003d40 <exit>
			printf("\nERROR: Please assign a valid value for the flag \"isForceGaussianCurve\", which may be 1 or 0.\n");
 800268a:	4825      	ldr	r0, [pc, #148]	; (8002720 <getKernelMachineClassification+0x1820>)
 800268c:	f002 f960 	bl	8004950 <puts>
			exit(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f001 fb55 	bl	8003d40 <exit>
 8002696:	ed98 7b00 	vldr	d7, [r8]
 800269a:	491f      	ldr	r1, [pc, #124]	; (8002718 <getKernelMachineClassification+0x1818>)
 800269c:	eeb0 ca47 	vmov.f32	s24, s14
 80026a0:	eef0 ca67 	vmov.f32	s25, s15
 80026a4:	ec53 2b17 	vmov	r2, r3, d7
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fd fe1d 	bl	80002e8 <__aeabi_dsub>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ec51 0b1c 	vmov	r0, r1, d12
 80026b6:	f7fe f8f9 	bl	80008ac <__aeabi_ddiv>
 80026ba:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80026be:	ec41 0b10 	vmov	d0, r0, r1
 80026c2:	e516      	b.n	80020f2 <getKernelMachineClassification+0x11f2>
		printf("\nERROR: The machine learning features (independent variables) must be equal or greater than 1 for this particular algorithm.\n");
 80026c4:	4817      	ldr	r0, [pc, #92]	; (8002724 <getKernelMachineClassification+0x1824>)
 80026c6:	f002 f943 	bl	8004950 <puts>
		exit(1);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f001 fb38 	bl	8003d40 <exit>
		printf("\nERROR: With respect to the system under study, there must only be only one output for this particular algorithm.\n");
 80026d0:	4815      	ldr	r0, [pc, #84]	; (8002728 <getKernelMachineClassification+0x1828>)
 80026d2:	f002 f93d 	bl	8004950 <puts>
		exit(1);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f001 fb32 	bl	8003d40 <exit>
		printf("\nERROR: The functionality of this function, when the argument variable \"isInteractionTerms\" contains a value of 1, has not yet been developed.\n");
 80026dc:	4813      	ldr	r0, [pc, #76]	; (800272c <getKernelMachineClassification+0x182c>)
 80026de:	f002 f937 	bl	8004950 <puts>
		exit(1);
 80026e2:	9803      	ldr	r0, [sp, #12]
 80026e4:	f001 fb2c 	bl	8003d40 <exit>
		printf("\nERROR: The requested Kernel has not yet been implemented in the CenyML library. Please assign a valid one.\n");
 80026e8:	4811      	ldr	r0, [pc, #68]	; (8002730 <getKernelMachineClassification+0x1830>)
 80026ea:	f002 f931 	bl	8004950 <puts>
		exit(1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f001 fb26 	bl	8003d40 <exit>
		printf("\nERROR: The argument variable \"isInteractionTerms\" is meant to store only a binary value that equals either 1 or 0.\n");
 80026f4:	480f      	ldr	r0, [pc, #60]	; (8002734 <getKernelMachineClassification+0x1834>)
 80026f6:	f002 f92b 	bl	8004950 <puts>
		exit(1);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f001 fb20 	bl	8003d40 <exit>
		printf("\nERROR: The number of samples provided must be equal or higher than the number of machine learning features (independent variables) for this particular algorithm.\n");
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <getKernelMachineClassification+0x1838>)
 8002702:	f002 f925 	bl	8004950 <puts>
		exit(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f001 fb1a 	bl	8003d40 <exit>
 800270c:	f3af 8000 	nop.w
	...
 8002718:	3ff00000 	.word	0x3ff00000
 800271c:	08007c38 	.word	0x08007c38
 8002720:	08007e3c 	.word	0x08007e3c
 8002724:	080079d0 	.word	0x080079d0
 8002728:	08007af4 	.word	0x08007af4
 800272c:	08007d20 	.word	0x08007d20
 8002730:	08007e9c 	.word	0x08007e9c
 8002734:	08007db0 	.word	0x08007db0
 8002738:	08007a50 	.word	0x08007a50

0800273c <_write>:
 * @author Controllers Tech
 * CREATION DATE: JANUARY 07, 2022.
 * LAST UPDATE: N/A.
 */
int _write(int file, char *ptr, int len) {
	for (int i=0; i<len; i++) {
 800273c:	1e10      	subs	r0, r2, #0
 800273e:	dd1a      	ble.n	8002776 <_write+0x3a>
int _write(int file, char *ptr, int len) {
 8002740:	b430      	push	{r4, r5}
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002746:	180d      	adds	r5, r1, r0
 8002748:	f8d3 4e80 	ldr.w	r4, [r3, #3712]	; 0xe80
 800274c:	07e4      	lsls	r4, r4, #31
		ITM_SendChar((*ptr++));
 800274e:	f101 0101 	add.w	r1, r1, #1
 8002752:	d50c      	bpl.n	800276e <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002754:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002758:	07e2      	lsls	r2, r4, #31
 800275a:	d508      	bpl.n	800276e <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800275c:	681c      	ldr	r4, [r3, #0]
 800275e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8002762:	b91c      	cbnz	r4, 800276c <_write+0x30>
    {
      __NOP();
 8002764:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002766:	681c      	ldr	r4, [r3, #0]
 8002768:	2c00      	cmp	r4, #0
 800276a:	d0fb      	beq.n	8002764 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800276c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<len; i++) {
 800276e:	42a9      	cmp	r1, r5
 8002770:	d1ea      	bne.n	8002748 <_write+0xc>
	}
	return len;
}
 8002772:	bc30      	pop	{r4, r5}
 8002774:	4770      	bx	lr
 8002776:	4770      	bx	lr

08002778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002778:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800277a:	2300      	movs	r3, #0
{
 800277c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800277e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002782:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002786:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4925      	ldr	r1, [pc, #148]	; (8002820 <SystemClock_Config+0xa8>)
 800278c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800278e:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002792:	4a24      	ldr	r2, [pc, #144]	; (8002824 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002798:	6408      	str	r0, [r1, #64]	; 0x40
 800279a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800279c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80027a0:	9100      	str	r1, [sp, #0]
 80027a2:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027b4:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80027b6:	2009      	movs	r0, #9
 80027b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027bc:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80027be:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027c2:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c4:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027c6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027c8:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027cc:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027ce:	21b4      	movs	r1, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027d2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027d6:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027da:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027dc:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027de:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027e0:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e2:	f000 fe9d 	bl	8003520 <HAL_RCC_OscConfig>
 80027e6:	b108      	cbz	r0, 80027ec <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ea:	e7fe      	b.n	80027ea <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027ec:	f000 fb50 	bl	8002e90 <HAL_PWREx_EnableOverDrive>
 80027f0:	b108      	cbz	r0, 80027f6 <SystemClock_Config+0x7e>
 80027f2:	b672      	cpsid	i
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f6:	260f      	movs	r6, #15
 80027f8:	2702      	movs	r7, #2
 80027fa:	2400      	movs	r4, #0
 80027fc:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002804:	a802      	add	r0, sp, #8
 8002806:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002808:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800280c:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002810:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002812:	f000 fb7b 	bl	8002f0c <HAL_RCC_ClockConfig>
 8002816:	b108      	cbz	r0, 800281c <SystemClock_Config+0xa4>
 8002818:	b672      	cpsid	i
  while (1)
 800281a:	e7fe      	b.n	800281a <SystemClock_Config+0xa2>
}
 800281c:	b017      	add	sp, #92	; 0x5c
 800281e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000

08002828 <main>:
{
 8002828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282c:	ed2d 8b04 	vpush	{d8-d9}
 8002830:	f6ad 1dac 	subw	sp, sp, #2476	; 0x9ac
  HAL_Init();
 8002834:	f000 fa88 	bl	8002d48 <HAL_Init>
  SystemClock_Config();
 8002838:	f7ff ff9e 	bl	8002778 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283c:	2300      	movs	r3, #0
 800283e:	4ab4      	ldr	r2, [pc, #720]	; (8002b10 <main+0x2e8>)
 8002840:	930d      	str	r3, [sp, #52]	; 0x34
 8002842:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hrtc.Instance = RTC;
 8002844:	4cb3      	ldr	r4, [pc, #716]	; (8002b14 <main+0x2ec>)
 8002846:	48b4      	ldr	r0, [pc, #720]	; (8002b18 <main+0x2f0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002848:	6063      	str	r3, [r4, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	f041 0104 	orr.w	r1, r1, #4
 800284e:	6311      	str	r1, [r2, #48]	; 0x30
 8002850:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002852:	6123      	str	r3, [r4, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002854:	f001 0104 	and.w	r1, r1, #4
 8002858:	910d      	str	r1, [sp, #52]	; 0x34
 800285a:	990d      	ldr	r1, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285c:	930e      	str	r3, [sp, #56]	; 0x38
 800285e:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002860:	6163      	str	r3, [r4, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002862:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002866:	6311      	str	r1, [r2, #48]	; 0x30
 8002868:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800286a:	61a3      	str	r3, [r4, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800286c:	f002 0280 	and.w	r2, r2, #128	; 0x80
  RTC_TimeTypeDef sTime = {0};
 8002870:	f50d 785a 	add.w	r8, sp, #872	; 0x368
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002874:	920e      	str	r2, [sp, #56]	; 0x38
  RTC_TimeTypeDef sTime = {0};
 8002876:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800287a:	e9c8 3303 	strd	r3, r3, [r8, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800287e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  RTC_DateTypeDef sDate = {0};
 8002880:	9312      	str	r3, [sp, #72]	; 0x48
  hrtc.Init.AsynchPrediv = 127;
 8002882:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8002884:	6020      	str	r0, [r4, #0]
  RTC_TimeTypeDef sTime = {0};
 8002886:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800288a:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800288c:	23ff      	movs	r3, #255	; 0xff
 800288e:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002892:	f001 f84f 	bl	8003934 <HAL_RTC_Init>
 8002896:	b108      	cbz	r0, 800289c <main+0x74>
 8002898:	b672      	cpsid	i
  while (1)
 800289a:	e7fe      	b.n	800289a <main+0x72>
  sTime.Seconds = 0x0;
 800289c:	4603      	mov	r3, r0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800289e:	2201      	movs	r2, #1
 80028a0:	4641      	mov	r1, r8
 80028a2:	4620      	mov	r0, r4
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028a4:	e9c8 3303 	strd	r3, r3, [r8, #12]
  sTime.Hours = 0x0;
 80028a8:	f8a8 3000 	strh.w	r3, [r8]
  sTime.Seconds = 0x0;
 80028ac:	f888 3002 	strb.w	r3, [r8, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028b0:	f001 f8ae 	bl	8003a10 <HAL_RTC_SetTime>
 80028b4:	b108      	cbz	r0, 80028ba <main+0x92>
 80028b6:	b672      	cpsid	i
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <main+0x90>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80028ba:	4b98      	ldr	r3, [pc, #608]	; (8002b1c <main+0x2f4>)
 80028bc:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028be:	2201      	movs	r2, #1
 80028c0:	a912      	add	r1, sp, #72	; 0x48
 80028c2:	4620      	mov	r0, r4
 80028c4:	f001 f95c 	bl	8003b80 <HAL_RTC_SetDate>
 80028c8:	4602      	mov	r2, r0
 80028ca:	b108      	cbz	r0, 80028d0 <main+0xa8>
 80028cc:	b672      	cpsid	i
  while (1)
 80028ce:	e7fe      	b.n	80028ce <main+0xa6>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 80028d0:	4620      	mov	r0, r4
 80028d2:	4611      	mov	r1, r2
 80028d4:	f001 f9fc 	bl	8003cd0 <HAL_RTCEx_SetTimeStamp>
 80028d8:	b108      	cbz	r0, 80028de <main+0xb6>
 80028da:	b672      	cpsid	i
  while (1)
 80028dc:	e7fe      	b.n	80028dc <main+0xb4>
  char Kernel[] = "polynomial"; // This variable will contain the desired Kernel function that wants to be used. The available options are: "linear", "polynomial", "logistic" and "gaussian".
 80028de:	4b90      	ldr	r3, [pc, #576]	; (8002b20 <main+0x2f8>)
 80028e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028e4:	ab0f      	add	r3, sp, #60	; 0x3c
 80028e6:	c303      	stmia	r3!, {r0, r1}
 80028e8:	f823 2b02 	strh.w	r2, [r3], #2
 80028ec:	0c12      	lsrs	r2, r2, #16
 80028ee:	701a      	strb	r2, [r3, #0]
  double databaseX[] = {10, 10, 10, 20, 10, 30, 10, 40, 10, 50, 10, 60, 10, 70, 10, 80, 10, 90, 10, 100,
 80028f0:	498c      	ldr	r1, [pc, #560]	; (8002b24 <main+0x2fc>)
 80028f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80028f6:	4640      	mov	r0, r8
 80028f8:	f001 fa6a 	bl	8003dd0 <memcpy>
  double databaseY[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; // This variable contains the expected/real output data of the system under study for when n=100.
 80028fc:	498a      	ldr	r1, [pc, #552]	; (8002b28 <main+0x300>)
 80028fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002902:	a812      	add	r0, sp, #72	; 0x48
 8002904:	f001 fa64 	bl	8003dd0 <memcpy>
  b_expected[6] = 1; // This is the expected Beta coefficient value with which the database was generated.
 8002908:	ed9f 8b79 	vldr	d8, [pc, #484]	; 8002af0 <main+0x2c8>
			if (Y_tilde[currentRowAndColumn1] == 0) {
 800290c:	f04f 0a00 	mov.w	sl, #0
 8002910:	f04f 0b00 	mov.w	fp, #0
	printf("----------------------------------------------------------------------\n");
 8002914:	4885      	ldr	r0, [pc, #532]	; (8002b2c <main+0x304>)
 8002916:	f002 f81b 	bl	8004950 <puts>
	printf("----------------------------------------------------------------------\n");
 800291a:	4884      	ldr	r0, [pc, #528]	; (8002b2c <main+0x304>)
 800291c:	f002 f818 	bl	8004950 <puts>
	printf("Initializing the output and input data with %d samples and %d independent variables...\n", n, m);
 8002920:	2202      	movs	r2, #2
 8002922:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002926:	4882      	ldr	r0, [pc, #520]	; (8002b30 <main+0x308>)
 8002928:	f001 ff8c 	bl	8004844 <iprintf>
	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to initialize the input data to be used.
 800292c:	f000 fa32 	bl	8002d94 <HAL_GetTick>
 8002930:	4603      	mov	r3, r0
	double *X = (double *) malloc(n*m*sizeof(double));
 8002932:	f64b 3080 	movw	r0, #48000	; 0xbb80
	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to initialize the input data to be used.
 8002936:	930b      	str	r3, [sp, #44]	; 0x2c
	double *X = (double *) malloc(n*m*sizeof(double));
 8002938:	f001 fa3a 	bl	8003db0 <malloc>
 800293c:	4681      	mov	r9, r0
	double *Y_tilde = (double *) malloc(n*p*sizeof(double));
 800293e:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8002942:	f001 fa35 	bl	8003db0 <malloc>
 8002946:	ee09 0a90 	vmov	s19, r0
	double *X = (double *) malloc(n*m*sizeof(double));
 800294a:	ee09 9a10 	vmov	s18, r9
	for (int currentIteration=0; currentIteration<(n/n_database); currentIteration++) {
 800294e:	900a      	str	r0, [sp, #40]	; 0x28
	double *Y_tilde = (double *) malloc(n*p*sizeof(double));
 8002950:	f04f 0900 	mov.w	r9, #0
		for (int currentRow=0; currentRow<n_database; currentRow++) {
 8002954:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002956:	f44f 7248 	mov.w	r2, #800	; 0x320
 800295a:	a912      	add	r1, sp, #72	; 0x48
 800295c:	4630      	mov	r0, r6
 800295e:	f001 fa37 	bl	8003dd0 <memcpy>
 8002962:	af12      	add	r7, sp, #72	; 0x48
			Y_tilde[currentRowAndColumn1] = databaseY[currentRow];
 8002964:	e8f7 4502 	ldrd	r4, r5, [r7], #8
			if (Y_tilde[currentRowAndColumn1] == 0) {
 8002968:	4652      	mov	r2, sl
 800296a:	465b      	mov	r3, fp
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fe f8da 	bl	8000b28 <__aeabi_dcmpeq>
 8002974:	2800      	cmp	r0, #0
 8002976:	f000 80ae 	beq.w	8002ad6 <main+0x2ae>
		for (int currentRow=0; currentRow<n_database; currentRow++) {
 800297a:	4547      	cmp	r7, r8
 800297c:	eca6 8b02 	vstmia	r6!, {d8}
 8002980:	d1f0      	bne.n	8002964 <main+0x13c>
 8002982:	ee19 2a10 	vmov	r2, s18
 8002986:	4643      	mov	r3, r8
 8002988:	eb02 1209 	add.w	r2, r2, r9, lsl #4
 800298c:	f60d 17a8 	addw	r7, sp, #2472	; 0x9a8
			X[currentRowAndColumn2] = databaseX[currentRow*m];
 8002990:	e9d3 4500 	ldrd	r4, r5, [r3]
			X[1 + currentRowAndColumn2] = databaseX[1 + currentRow*m];
 8002994:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002998:	3310      	adds	r3, #16
		for (int currentRow=0; currentRow<n_database; currentRow++) {
 800299a:	429f      	cmp	r7, r3
			X[currentRowAndColumn2] = databaseX[currentRow*m];
 800299c:	e9c2 4500 	strd	r4, r5, [r2]
			X[1 + currentRowAndColumn2] = databaseX[1 + currentRow*m];
 80029a0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		for (int currentRow=0; currentRow<n_database; currentRow++) {
 80029a4:	f102 0210 	add.w	r2, r2, #16
 80029a8:	d1f2      	bne.n	8002990 <main+0x168>
	for (int currentIteration=0; currentIteration<(n/n_database); currentIteration++) {
 80029aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029ac:	f109 0964 	add.w	r9, r9, #100	; 0x64
 80029b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80029b4:	f502 7248 	add.w	r2, r2, #800	; 0x320
 80029b8:	4599      	cmp	r9, r3
 80029ba:	920a      	str	r2, [sp, #40]	; 0x28
 80029bc:	d1ca      	bne.n	8002954 <main+0x12c>
	elapsedTime = HAL_GetTick() - startingTime; // We obtain the elapsed time to initialize the input data to be used.
 80029be:	f000 f9e9 	bl	8002d94 <HAL_GetTick>
	printf("Output and input data initialization elapsed %ld milliseconds.\n\n", elapsedTime);
 80029c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029c4:	1ac1      	subs	r1, r0, r3
 80029c6:	485b      	ldr	r0, [pc, #364]	; (8002b34 <main+0x30c>)
 80029c8:	f001 ff3c 	bl	8004844 <iprintf>
	printf("Initializing CenyML polynomial Kernel machine classification algorithm ...\n");
 80029cc:	485a      	ldr	r0, [pc, #360]	; (8002b38 <main+0x310>)
 80029ce:	f001 ffbf 	bl	8004950 <puts>
	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to apply the polynomial Kernel machine classification with the input data (X).
 80029d2:	f000 f9df 	bl	8002d94 <HAL_GetTick>
	double *b = (double *) calloc((m*N+3)*p, sizeof(double));
 80029d6:	2108      	movs	r1, #8
	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to apply the polynomial Kernel machine classification with the input data (X).
 80029d8:	4605      	mov	r5, r0
	double *b = (double *) calloc((m*N+3)*p, sizeof(double));
 80029da:	2007      	movs	r0, #7
 80029dc:	f001 f9a2 	bl	8003d24 <calloc>
	getKernelMachineClassification(X, Y_tilde, n, m, p, N, 0, Kernel, isInteractionTerms, 0, 0, b); // NOTE: Remember that this functions stores the resulting coefficients in the pointer variable "b".
 80029e0:	2302      	movs	r3, #2
	double *b = (double *) calloc((m*N+3)*p, sizeof(double));
 80029e2:	4604      	mov	r4, r0
	getKernelMachineClassification(X, Y_tilde, n, m, p, N, 0, Kernel, isInteractionTerms, 0, 0, b); // NOTE: Remember that this functions stores the resulting coefficients in the pointer variable "b".
 80029e4:	2100      	movs	r1, #0
 80029e6:	2001      	movs	r0, #1
 80029e8:	aa0f      	add	r2, sp, #60	; 0x3c
 80029ea:	e9cd 0300 	strd	r0, r3, [sp]
 80029ee:	ec4b ab10 	vmov	d0, sl, fp
 80029f2:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80029f6:	ee19 0a10 	vmov	r0, s18
 80029fa:	9202      	str	r2, [sp, #8]
 80029fc:	9103      	str	r1, [sp, #12]
 80029fe:	464a      	mov	r2, r9
 8002a00:	ee19 1a90 	vmov	r1, s19
 8002a04:	9406      	str	r4, [sp, #24]
 8002a06:	f7fe fa7b 	bl	8000f00 <getKernelMachineClassification>
	elapsedTime = HAL_GetTick() - startingTime; // We obtain the elapsed time to apply the polynomial Kernel machine classification with the input data (X).
 8002a0a:	f000 f9c3 	bl	8002d94 <HAL_GetTick>
	printf("CenyML polynomial Kernel machine classification algorithm elapsed %ld milliseconds.\n\n", elapsedTime);
 8002a0e:	1b41      	subs	r1, r0, r5
 8002a10:	484a      	ldr	r0, [pc, #296]	; (8002b3c <main+0x314>)
 8002a12:	f001 ff17 	bl	8004844 <iprintf>
	printf("Initializing coefficients validation of the CenyML getKernelMachineClassification method ...\n");
 8002a16:	484a      	ldr	r0, [pc, #296]	; (8002b40 <main+0x318>)
 8002a18:	f001 ff9a 	bl	8004950 <puts>
	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to validate the getKernelMachineClassification method.
 8002a1c:	f000 f9ba 	bl	8002d94 <HAL_GetTick>
	differentiation = fabs(b[currentRow] - b_expected[currentRow]);
 8002a20:	a335      	add	r3, pc, #212	; (adr r3, 8002af8 <main+0x2d0>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to validate the getKernelMachineClassification method.
 8002a26:	4605      	mov	r5, r0
	differentiation = fabs(b[currentRow] - b_expected[currentRow]);
 8002a28:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002a2c:	f7fd fc5e 	bl	80002ec <__adddf3>
 8002a30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
 8002a36:	9008      	str	r0, [sp, #32]
	if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 8002a38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a3c:	4652      	mov	r2, sl
 8002a3e:	465b      	mov	r3, fp
 8002a40:	f7fe f89a 	bl	8000b78 <__aeabi_dcmpgt>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d14c      	bne.n	8002ae2 <main+0x2ba>
	differentiation = fabs(b[currentRow] - b_expected[currentRow]);
 8002a48:	a32d      	add	r3, pc, #180	; (adr r3, 8002b00 <main+0x2d8>)
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002a52:	f7fd fc49 	bl	80002e8 <__aeabi_dsub>
 8002a56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5c:	9008      	str	r0, [sp, #32]
	if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 8002a5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a62:	4652      	mov	r2, sl
 8002a64:	465b      	mov	r3, fp
 8002a66:	f7fe f887 	bl	8000b78 <__aeabi_dcmpgt>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d139      	bne.n	8002ae2 <main+0x2ba>
	differentiation = fabs(b[currentRow] - b_expected[currentRow]);
 8002a6e:	a326      	add	r3, pc, #152	; (adr r3, 8002b08 <main+0x2e0>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002a78:	f7fd fc38 	bl	80002ec <__adddf3>
 8002a7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a80:	9309      	str	r3, [sp, #36]	; 0x24
 8002a82:	9008      	str	r0, [sp, #32]
	if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 8002a84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a88:	4652      	mov	r2, sl
 8002a8a:	465b      	mov	r3, fp
 8002a8c:	f7fe f874 	bl	8000b78 <__aeabi_dcmpgt>
 8002a90:	bb38      	cbnz	r0, 8002ae2 <main+0x2ba>
		printf("Validation process MATCHED!\n");
 8002a92:	482c      	ldr	r0, [pc, #176]	; (8002b44 <main+0x31c>)
 8002a94:	f001 ff5c 	bl	8004950 <puts>
	elapsedTime = HAL_GetTick() - startingTime; // We obtain the elapsed time to validate the getKernelMachineClassification method.
 8002a98:	f000 f97c 	bl	8002d94 <HAL_GetTick>
	printf("The coefficients validation of the CenyML getKernelMachineClassification method elapsed %ld milliseconds.\n\n", elapsedTime);
 8002a9c:	1b41      	subs	r1, r0, r5
 8002a9e:	482a      	ldr	r0, [pc, #168]	; (8002b48 <main+0x320>)
 8002aa0:	f001 fed0 	bl	8004844 <iprintf>
	printf("The program has been successfully completed!\n");
 8002aa4:	4829      	ldr	r0, [pc, #164]	; (8002b4c <main+0x324>)
 8002aa6:	f001 ff53 	bl	8004950 <puts>
	free(X);
 8002aaa:	ee19 0a10 	vmov	r0, s18
 8002aae:	f001 f987 	bl	8003dc0 <free>
	free(Y_tilde);
 8002ab2:	ee19 0a90 	vmov	r0, s19
 8002ab6:	f001 f983 	bl	8003dc0 <free>
	free(b);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f001 f980 	bl	8003dc0 <free>
	printf("----------------------------------------------------------------------\n");
 8002ac0:	481a      	ldr	r0, [pc, #104]	; (8002b2c <main+0x304>)
 8002ac2:	f001 ff45 	bl	8004950 <puts>
	printf("----------------------------------------------------------------------\n");
 8002ac6:	4819      	ldr	r0, [pc, #100]	; (8002b2c <main+0x304>)
 8002ac8:	f001 ff42 	bl	8004950 <puts>
	HAL_Delay(1000); // 1000ms delay.
 8002acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ad0:	f000 f966 	bl	8002da0 <HAL_Delay>
  {
 8002ad4:	e71e      	b.n	8002914 <main+0xec>
		for (int currentRow=0; currentRow<n_database; currentRow++) {
 8002ad6:	4547      	cmp	r7, r8
 8002ad8:	e8e6 4502 	strd	r4, r5, [r6], #8
 8002adc:	f47f af42 	bne.w	8002964 <main+0x13c>
 8002ae0:	e74f      	b.n	8002982 <main+0x15a>
			printf("Validation process DID NOT MATCH! and a difference of %.12f was obtained.\n", differentiation);
 8002ae2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ae6:	481a      	ldr	r0, [pc, #104]	; (8002b50 <main+0x328>)
 8002ae8:	f001 feac 	bl	8004844 <iprintf>
	if (isMatch == 1) { // If the flag "isMatch" indicates a true/high value, then emit message to indicate that the validation process matched.
 8002aec:	e7d4      	b.n	8002a98 <main+0x270>
 8002aee:	bf00      	nop
 8002af0:	00000000 	.word	0x00000000
 8002af4:	bff00000 	.word	0xbff00000
 8002af8:	80000000 	.word	0x80000000
 8002afc:	4006aaaa 	.word	0x4006aaaa
 8002b00:	c0000000 	.word	0xc0000000
 8002b04:	3fb3efe0 	.word	0x3fb3efe0
 8002b08:	a0000000 	.word	0xa0000000
 8002b0c:	3f48d690 	.word	0x3f48d690
 8002b10:	40023800 	.word	0x40023800
 8002b14:	20000208 	.word	0x20000208
 8002b18:	40002800 	.word	0x40002800
 8002b1c:	00010101 	.word	0x00010101
 8002b20:	08007d14 	.word	0x08007d14
 8002b24:	08007070 	.word	0x08007070
 8002b28:	080076b0 	.word	0x080076b0
 8002b2c:	08007f08 	.word	0x08007f08
 8002b30:	08007f50 	.word	0x08007f50
 8002b34:	08007fa8 	.word	0x08007fa8
 8002b38:	08007fec 	.word	0x08007fec
 8002b3c:	08008038 	.word	0x08008038
 8002b40:	08008090 	.word	0x08008090
 8002b44:	0800813c 	.word	0x0800813c
 8002b48:	08008158 	.word	0x08008158
 8002b4c:	080081c4 	.word	0x080081c4
 8002b50:	080080f0 	.word	0x080080f0

08002b54 <Error_Handler>:
 8002b54:	b672      	cpsid	i
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <Error_Handler+0x2>

08002b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <HAL_MspInit+0x34>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	9100      	str	r1, [sp, #0]
 8002b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
 8002b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b6a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b6e:	9200      	str	r2, [sp, #0]
 8002b70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	9101      	str	r1, [sp, #4]
 8002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b86:	b002      	add	sp, #8
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800

08002b90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4604      	mov	r4, r0
 8002b94:	b098      	sub	sp, #96	; 0x60
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b96:	225c      	movs	r2, #92	; 0x5c
 8002b98:	a801      	add	r0, sp, #4
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f001 f926 	bl	8003dec <memset>
  if(hrtc->Instance==RTC)
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RTC_MspInit+0x40>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ba8:	b018      	add	sp, #96	; 0x60
 8002baa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bac:	2220      	movs	r2, #32
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bae:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb2:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bb4:	9201      	str	r2, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bb6:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb8:	f000 fa46 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8002bbc:	b920      	cbnz	r0, 8002bc8 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RTC_MspInit+0x44>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	b018      	add	sp, #96	; 0x60
 8002bc6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002bc8:	f7ff ffc4 	bl	8002b54 <Error_Handler>
 8002bcc:	e7f7      	b.n	8002bbe <HAL_RTC_MspInit+0x2e>
 8002bce:	bf00      	nop
 8002bd0:	40002800 	.word	0x40002800
 8002bd4:	42470e3c 	.word	0x42470e3c

08002bd8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <NMI_Handler>
 8002bda:	bf00      	nop

08002bdc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <HardFault_Handler>
 8002bde:	bf00      	nop

08002be0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <MemManage_Handler>
 8002be2:	bf00      	nop

08002be4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <BusFault_Handler>
 8002be6:	bf00      	nop

08002be8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler>
 8002bea:	bf00      	nop

08002bec <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

08002bf0 <DebugMon_Handler>:
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <PendSV_Handler>:
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop

08002bf8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf8:	f000 b8c0 	b.w	8002d7c <HAL_IncTick>

08002bfc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	4770      	bx	lr

08002c00 <_kill>:

int _kill(int pid, int sig)
{
 8002c00:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002c02:	f001 f897 	bl	8003d34 <__errno>
 8002c06:	2316      	movs	r3, #22
 8002c08:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c0e:	bd08      	pop	{r3, pc}

08002c10 <_exit>:

void _exit (int status)
{
 8002c10:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002c12:	f001 f88f 	bl	8003d34 <__errno>
 8002c16:	2316      	movs	r3, #22
 8002c18:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002c1a:	e7fe      	b.n	8002c1a <_exit+0xa>

08002c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c1c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	1e16      	subs	r6, r2, #0
 8002c20:	dd07      	ble.n	8002c32 <_read+0x16>
 8002c22:	460c      	mov	r4, r1
 8002c24:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002c26:	f3af 8000 	nop.w
 8002c2a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	42a5      	cmp	r5, r4
 8002c30:	d1f9      	bne.n	8002c26 <_read+0xa>
	}

return len;
}
 8002c32:	4630      	mov	r0, r6
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	bf00      	nop

08002c38 <_close>:
}

int _close(int file)
{
	return -1;
}
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop

08002c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c44:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002c46:	2000      	movs	r0, #0
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop

08002c4c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	4770      	bx	lr

08002c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002c50:	2000      	movs	r0, #0
 8002c52:	4770      	bx	lr

08002c54 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c54:	490c      	ldr	r1, [pc, #48]	; (8002c88 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c56:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002c58:	680b      	ldr	r3, [r1, #0]
{
 8002c5a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c5c:	4c0c      	ldr	r4, [pc, #48]	; (8002c90 <_sbrk+0x3c>)
 8002c5e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002c60:	b12b      	cbz	r3, 8002c6e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c62:	4418      	add	r0, r3
 8002c64:	4290      	cmp	r0, r2
 8002c66:	d807      	bhi.n	8002c78 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002c68:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <_sbrk+0x40>)
 8002c70:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002c72:	4418      	add	r0, r3
 8002c74:	4290      	cmp	r0, r2
 8002c76:	d9f7      	bls.n	8002c68 <_sbrk+0x14>
    errno = ENOMEM;
 8002c78:	f001 f85c 	bl	8003d34 <__errno>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd10      	pop	{r4, pc}
 8002c88:	200001fc 	.word	0x200001fc
 8002c8c:	20020000 	.word	0x20020000
 8002c90:	00000400 	.word	0x00000400
 8002c94:	20000240 	.word	0x20000240

08002c98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <SystemInit+0x10>)
 8002c9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc8:	4c0b      	ldr	r4, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd6:	f7ff ffdf 	bl	8002c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f001 f845 	bl	8003d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7ff fda3 	bl	8002828 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cf0:	08008628 	.word	0x08008628
  ldr r2, =_sbss
 8002cf4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cf8:	2000023c 	.word	0x2000023c

08002cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC_IRQHandler>
	...

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d02:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_InitTick+0x3c>)
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_InitTick+0x40>)
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
{
 8002d0a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d10:	fbb0 f0f2 	udiv	r0, r0, r2
 8002d14:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d18:	f000 f8a0 	bl	8002e5c <HAL_SYSTICK_Config>
 8002d1c:	b908      	cbnz	r0, 8002d22 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	2d0f      	cmp	r5, #15
 8002d20:	d901      	bls.n	8002d26 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
 8002d26:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d30:	f000 f85c 	bl	8002dec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_InitTick+0x44>)
 8002d36:	4620      	mov	r0, r4
 8002d38:	601d      	str	r5, [r3, #0]
}
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000008 	.word	0x20000008

08002d48 <HAL_Init>:
{
 8002d48:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_Init+0x30>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d62:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f82d 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6a:	200f      	movs	r0, #15
 8002d6c:	f7ff ffc8 	bl	8002d00 <HAL_InitTick>
  HAL_MspInit();
 8002d70:	f7ff fef2 	bl	8002b58 <HAL_MspInit>
}
 8002d74:	2000      	movs	r0, #0
 8002d76:	bd08      	pop	{r3, pc}
 8002d78:	40023c00 	.word	0x40023c00

08002d7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d7c:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <HAL_IncTick+0x10>)
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <HAL_IncTick+0x14>)
 8002d80:	6811      	ldr	r1, [r2, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	440b      	add	r3, r1
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000228 	.word	0x20000228
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d94:	4b01      	ldr	r3, [pc, #4]	; (8002d9c <HAL_GetTick+0x8>)
 8002d96:	6818      	ldr	r0, [r3, #0]
}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000228 	.word	0x20000228

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff fff6 	bl	8002d94 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002daa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002dac:	d002      	beq.n	8002db4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_Delay+0x20>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	1b43      	subs	r3, r0, r5
 8002dba:	42a3      	cmp	r3, r4
 8002dbc:	d3fa      	bcc.n	8002db4 <HAL_Delay+0x14>
  {
  }
}
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4908      	ldr	r1, [pc, #32]	; (8002de8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8002dc6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dca:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dcc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002dd0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002de0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002de4:	60cb      	str	r3, [r1, #12]
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_NVIC_SetPriority+0x68>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df4:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df6:	f1c3 0507 	rsb	r5, r3, #7
 8002dfa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	bf28      	it	cs
 8002e02:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e04:	2c06      	cmp	r4, #6
 8002e06:	d919      	bls.n	8002e3c <HAL_NVIC_SetPriority+0x50>
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e0e:	409c      	lsls	r4, r3
 8002e10:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e18:	40ac      	lsls	r4, r5
 8002e1a:	ea21 0104 	bic.w	r1, r1, r4
 8002e1e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002e20:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e22:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002e26:	db0c      	blt.n	8002e42 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002e2c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002e30:	0109      	lsls	r1, r1, #4
 8002e32:	b2c9      	uxtb	r1, r1
 8002e34:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002e38:	bc30      	pop	{r4, r5}
 8002e3a:	4770      	bx	lr
 8002e3c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3e:	4613      	mov	r3, r2
 8002e40:	e7e8      	b.n	8002e14 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_NVIC_SetPriority+0x6c>)
 8002e44:	f000 000f 	and.w	r0, r0, #15
 8002e48:	0109      	lsls	r1, r1, #4
 8002e4a:	4403      	add	r3, r0
 8002e4c:	b2c9      	uxtb	r1, r1
 8002e4e:	7619      	strb	r1, [r3, #24]
 8002e50:	bc30      	pop	{r4, r5}
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	e000ecfc 	.word	0xe000ecfc

08002e5c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	3801      	subs	r0, #1
 8002e5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e62:	d20e      	bcs.n	8002e82 <HAL_SYSTICK_Config+0x26>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	4c08      	ldr	r4, [pc, #32]	; (8002e8c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6c:	20f0      	movs	r0, #240	; 0xf0
 8002e6e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e72:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e74:	2107      	movs	r1, #7
  return (0UL);                                                     /* Function successful */
 8002e76:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	6019      	str	r1, [r3, #0]
 8002e80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002e82:	2001      	movs	r0, #1
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000e010 	.word	0xe000e010
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e90:	b530      	push	{r4, r5, lr}
 8002e92:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e96:	491a      	ldr	r1, [pc, #104]	; (8002f00 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e98:	4d1a      	ldr	r5, [pc, #104]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	9201      	str	r2, [sp, #4]
 8002e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eae:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eb2:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8002eb4:	f7ff ff6e 	bl	8002d94 <HAL_GetTick>
 8002eb8:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002eba:	e005      	b.n	8002ec8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ebc:	f7ff ff6a 	bl	8002d94 <HAL_GetTick>
 8002ec0:	1b00      	subs	r0, r0, r4
 8002ec2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ec6:	d816      	bhi.n	8002ef6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ec8:	686b      	ldr	r3, [r5, #4]
 8002eca:	03da      	lsls	r2, r3, #15
 8002ecc:	d5f6      	bpl.n	8002ebc <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed0:	4d0c      	ldr	r5, [pc, #48]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002ed6:	f7ff ff5d 	bl	8002d94 <HAL_GetTick>
 8002eda:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002edc:	e005      	b.n	8002eea <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ede:	f7ff ff59 	bl	8002d94 <HAL_GetTick>
 8002ee2:	1b00      	subs	r0, r0, r4
 8002ee4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ee8:	d805      	bhi.n	8002ef6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eea:	686b      	ldr	r3, [r5, #4]
 8002eec:	039b      	lsls	r3, r3, #14
 8002eee:	d5f6      	bpl.n	8002ede <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002ef0:	2000      	movs	r0, #0
}
 8002ef2:	b003      	add	sp, #12
 8002ef4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002ef6:	2003      	movs	r0, #3
}
 8002ef8:	b003      	add	sp, #12
 8002efa:	bd30      	pop	{r4, r5, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	420e0040 	.word	0x420e0040
 8002f04:	40007000 	.word	0x40007000
 8002f08:	420e0044 	.word	0x420e0044

08002f0c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	f000 8087 	beq.w	8003020 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f12:	4a48      	ldr	r2, [pc, #288]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8002f14:	6813      	ldr	r3, [r2, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	428b      	cmp	r3, r1
{
 8002f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f20:	460d      	mov	r5, r1
 8002f22:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	d209      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	b2cb      	uxtb	r3, r1
 8002f28:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d002      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f34:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	0798      	lsls	r0, r3, #30
 8002f3e:	d514      	bpl.n	8002f6a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	0759      	lsls	r1, r3, #29
 8002f42:	d504      	bpl.n	8002f4e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f44:	493c      	ldr	r1, [pc, #240]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002f46:	688a      	ldr	r2, [r1, #8]
 8002f48:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002f4c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	071a      	lsls	r2, r3, #28
 8002f50:	d504      	bpl.n	8002f5c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f52:	4939      	ldr	r1, [pc, #228]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002f54:	688a      	ldr	r2, [r1, #8]
 8002f56:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002f5a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4936      	ldr	r1, [pc, #216]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002f5e:	68a0      	ldr	r0, [r4, #8]
 8002f60:	688a      	ldr	r2, [r1, #8]
 8002f62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f66:	4302      	orrs	r2, r0
 8002f68:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	07df      	lsls	r7, r3, #31
 8002f6c:	d521      	bpl.n	8002fb2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	2a01      	cmp	r2, #1
 8002f72:	d057      	beq.n	8003024 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f74:	1e93      	subs	r3, r2, #2
 8002f76:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7c:	d94d      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	0799      	lsls	r1, r3, #30
 8002f80:	d5d8      	bpl.n	8002f34 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f82:	4e2d      	ldr	r6, [pc, #180]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002f84:	68b3      	ldr	r3, [r6, #8]
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002f8e:	f7ff ff01 	bl	8002d94 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f92:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002f96:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f98:	e004      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9a:	f7ff fefb 	bl	8002d94 <HAL_GetTick>
 8002f9e:	1bc0      	subs	r0, r0, r7
 8002fa0:	4540      	cmp	r0, r8
 8002fa2:	d844      	bhi.n	800302e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa4:	68b3      	ldr	r3, [r6, #8]
 8002fa6:	6862      	ldr	r2, [r4, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fb0:	d1f3      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb2:	4a20      	ldr	r2, [pc, #128]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8002fb4:	6813      	ldr	r3, [r2, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	42ab      	cmp	r3, r5
 8002fbc:	d906      	bls.n	8002fcc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	b2eb      	uxtb	r3, r5
 8002fc0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	42ab      	cmp	r3, r5
 8002fca:	d1b3      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	075a      	lsls	r2, r3, #29
 8002fd0:	d506      	bpl.n	8002fe0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd2:	4919      	ldr	r1, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002fd4:	68e0      	ldr	r0, [r4, #12]
 8002fd6:	688a      	ldr	r2, [r1, #8]
 8002fd8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002fdc:	4302      	orrs	r2, r0
 8002fde:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	d507      	bpl.n	8002ff4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002fe6:	6921      	ldr	r1, [r4, #16]
 8002fe8:	6893      	ldr	r3, [r2, #8]
 8002fea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002fee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ff2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff4:	f000 fa3c 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002ffa:	4c10      	ldr	r4, [pc, #64]	; (800303c <HAL_RCC_ClockConfig+0x130>)
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	4910      	ldr	r1, [pc, #64]	; (8003040 <HAL_RCC_ClockConfig+0x134>)
 8003000:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003004:	4603      	mov	r3, r0
 8003006:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003008:	480e      	ldr	r0, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800300c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003010:	f7ff fe76 	bl	8002d00 <HAL_InitTick>
  return HAL_OK;
 8003014:	2000      	movs	r0, #0
}
 8003016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	0198      	lsls	r0, r3, #6
 800301c:	d4b1      	bmi.n	8002f82 <HAL_RCC_ClockConfig+0x76>
 800301e:	e789      	b.n	8002f34 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
}
 8003022:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	039e      	lsls	r6, r3, #14
 800302a:	d4aa      	bmi.n	8002f82 <HAL_RCC_ClockConfig+0x76>
 800302c:	e782      	b.n	8002f34 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800302e:	2003      	movs	r0, #3
 8003030:	e781      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2a>
 8003032:	bf00      	nop
 8003034:	40023c00 	.word	0x40023c00
 8003038:	40023800 	.word	0x40023800
 800303c:	080081f4 	.word	0x080081f4
 8003040:	20000000 	.word	0x20000000
 8003044:	20000008 	.word	0x20000008

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800304c:	6803      	ldr	r3, [r0, #0]
 800304e:	f013 0601 	ands.w	r6, r3, #1
{
 8003052:	b083      	sub	sp, #12
 8003054:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003056:	d00b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003058:	49b4      	ldr	r1, [pc, #720]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800305a:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800305c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003060:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003064:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003066:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800306a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800306e:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003070:	079a      	lsls	r2, r3, #30
 8003072:	d50b      	bpl.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003074:	49ad      	ldr	r1, [pc, #692]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003076:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003078:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800307c:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8003080:	4302      	orrs	r2, r0
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8003082:	2800      	cmp	r0, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003084:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      plli2sused = 1U;
 8003088:	bf08      	it	eq
 800308a:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800308c:	f013 0504 	ands.w	r5, r3, #4
 8003090:	d012      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003092:	49a6      	ldr	r1, [pc, #664]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003094:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003096:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800309a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800309e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80030a2:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030a6:	bf18      	it	ne
 80030a8:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ac:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030b0:	bf12      	itee	ne
 80030b2:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 80030b4:	2500      	moveq	r5, #0
      plli2sused = 1U;
 80030b6:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030b8:	071f      	lsls	r7, r3, #28
 80030ba:	d50f      	bpl.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030bc:	489b      	ldr	r0, [pc, #620]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80030c4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80030c8:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030ca:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030d2:	f000 80f9 	beq.w	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 80030d6:	2900      	cmp	r1, #0
 80030d8:	bf08      	it	eq
 80030da:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030dc:	0698      	lsls	r0, r3, #26
 80030de:	f100 80aa 	bmi.w	8003236 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030e2:	06df      	lsls	r7, r3, #27
 80030e4:	d504      	bpl.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030e6:	4b92      	ldr	r3, [pc, #584]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030e8:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	6823      	ldr	r3, [r4, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80030f0:	0618      	lsls	r0, r3, #24
 80030f2:	d508      	bpl.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030f4:	498d      	ldr	r1, [pc, #564]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80030f8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80030fc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003100:	4302      	orrs	r2, r0
 8003102:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003106:	0659      	lsls	r1, r3, #25
 8003108:	d508      	bpl.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800310a:	4988      	ldr	r1, [pc, #544]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800310c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800310e:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8003112:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003116:	4302      	orrs	r2, r0
 8003118:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800311c:	05da      	lsls	r2, r3, #23
 800311e:	d50c      	bpl.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003120:	4982      	ldr	r1, [pc, #520]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003124:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8003128:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800312c:	4302      	orrs	r2, r0

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 800312e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003132:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
      pllsaiused = 1U;
 8003136:	bf08      	it	eq
 8003138:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800313a:	059f      	lsls	r7, r3, #22
 800313c:	d508      	bpl.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800313e:	497b      	ldr	r1, [pc, #492]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003140:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003142:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8003146:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800314a:	4302      	orrs	r2, r0
 800314c:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003150:	0558      	lsls	r0, r3, #21
 8003152:	d50b      	bpl.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003154:	4875      	ldr	r0, [pc, #468]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003156:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003158:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800315c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003160:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003162:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003166:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800316c:	2e01      	cmp	r6, #1
 800316e:	d009      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	d006      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003176:	2d01      	cmp	r5, #1
 8003178:	f000 80e2 	beq.w	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800317c:	2000      	movs	r0, #0
}
 800317e:	b003      	add	sp, #12
 8003180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003184:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003186:	4f69      	ldr	r7, [pc, #420]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800318c:	f7ff fe02 	bl	8002d94 <HAL_GetTick>
 8003190:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003192:	e004      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x156>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003194:	f7ff fdfe 	bl	8002d94 <HAL_GetTick>
 8003198:	1b83      	subs	r3, r0, r6
 800319a:	2b02      	cmp	r3, #2
 800319c:	d841      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	0119      	lsls	r1, r3, #4
 80031a2:	d4f7      	bmi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	07da      	lsls	r2, r3, #31
 80031a8:	d53f      	bpl.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d13c      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031b0:	495e      	ldr	r1, [pc, #376]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b2:	6860      	ldr	r0, [r4, #4]
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031b4:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031b8:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031bc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80031c0:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 80031c4:	4332      	orrs	r2, r6
 80031c6:	68a6      	ldr	r6, [r4, #8]
 80031c8:	4302      	orrs	r2, r0
 80031ca:	6960      	ldr	r0, [r4, #20]
 80031cc:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
 80031d0:	ea42 7200 	orr.w	r2, r2, r0, lsl #28
 80031d4:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d8:	075e      	lsls	r6, r3, #29
 80031da:	d504      	bpl.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80031dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031de:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80031e2:	f000 8084 	beq.w	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80031e6:	0718      	lsls	r0, r3, #28
 80031e8:	d503      	bpl.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80031ec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80031f0:	d07d      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80031f2:	0559      	lsls	r1, r3, #21
 80031f4:	d504      	bpl.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80031f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80031f8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80031fc:	f000 8103 	beq.w	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003200:	051a      	lsls	r2, r3, #20
 8003202:	d463      	bmi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLI2S_ENABLE();
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003206:	4f49      	ldr	r7, [pc, #292]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    __HAL_RCC_PLLI2S_ENABLE();
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800320c:	f7ff fdc2 	bl	8002d94 <HAL_GetTick>
 8003210:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	d4ae      	bmi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003218:	f7ff fdbc 	bl	8002d94 <HAL_GetTick>
 800321c:	1b80      	subs	r0, r0, r6
 800321e:	2802      	cmp	r0, #2
 8003220:	d9f7      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        return HAL_TIMEOUT;
 8003222:	2003      	movs	r0, #3
}
 8003224:	b003      	add	sp, #12
 8003226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800322a:	079f      	lsls	r7, r3, #30
 800322c:	d5d4      	bpl.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x190>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800322e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003230:	2a00      	cmp	r2, #0
 8003232:	d1d1      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003234:	e7bc      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    PWR->CR |= PWR_CR_DBP;
 8003238:	4f3f      	ldr	r7, [pc, #252]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	2200      	movs	r2, #0
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003258:	f7ff fd9c 	bl	8002d94 <HAL_GetTick>
 800325c:	4680      	mov	r8, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800325e:	e005      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7ff fd98 	bl	8002d94 <HAL_GetTick>
 8003264:	eba0 0008 	sub.w	r0, r0, r8
 8003268:	2802      	cmp	r0, #2
 800326a:	d8da      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	05d9      	lsls	r1, r3, #23
 8003270:	d5f6      	bpl.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x218>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003272:	4f2e      	ldr	r7, [pc, #184]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003274:	6c23      	ldr	r3, [r4, #64]	; 0x40
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003276:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003278:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800327c:	d011      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800327e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8003282:	4291      	cmp	r1, r2
 8003284:	d00f      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003288:	4a2c      	ldr	r2, [pc, #176]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800328e:	2001      	movs	r0, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003290:	2100      	movs	r1, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8003292:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003294:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8003296:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329a:	07da      	lsls	r2, r3, #31
 800329c:	f100 80cd 	bmi.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80032a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80032aa:	f000 80a1 	beq.w	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80032ae:	491f      	ldr	r1, [pc, #124]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032b0:	688a      	ldr	r2, [r1, #8]
 80032b2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80032b6:	608a      	str	r2, [r1, #8]
 80032b8:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032ba:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	e70c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      plli2sused = 1U;
 80032c8:	2601      	movs	r6, #1
 80032ca:	e707      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032cc:	1d20      	adds	r0, r4, #4
 80032ce:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80032d6:	6961      	ldr	r1, [r4, #20]
 80032d8:	4303      	orrs	r3, r0
 80032da:	0852      	lsrs	r2, r2, #1
 80032dc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80032e0:	3a01      	subs	r2, #1
 80032e2:	4912      	ldr	r1, [pc, #72]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80032ec:	e78a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032ee:	490f      	ldr	r1, [pc, #60]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80032f0:	6860      	ldr	r0, [r4, #4]
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032f2:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032f6:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80032fa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80032fe:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003302:	4332      	orrs	r2, r6
 8003304:	68a6      	ldr	r6, [r4, #8]
 8003306:	4302      	orrs	r2, r0
 8003308:	6920      	ldr	r0, [r4, #16]
 800330a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
 800330e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003312:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003316:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800331a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800331c:	f020 001f 	bic.w	r0, r0, #31
 8003320:	3a01      	subs	r2, #1
 8003322:	4302      	orrs	r2, r0
 8003324:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8003328:	e763      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	424711e0 	.word	0x424711e0
 8003334:	42470068 	.word	0x42470068
 8003338:	40007000 	.word	0x40007000
 800333c:	42470e40 	.word	0x42470e40
    __HAL_RCC_PLLSAI_DISABLE();
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x420>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003342:	4e4a      	ldr	r6, [pc, #296]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x424>)
    __HAL_RCC_PLLSAI_DISABLE();
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003348:	f7ff fd24 	bl	8002d94 <HAL_GetTick>
 800334c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x314>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003350:	f7ff fd20 	bl	8002d94 <HAL_GetTick>
 8003354:	1b40      	subs	r0, r0, r5
 8003356:	2802      	cmp	r0, #2
 8003358:	f63f af63 	bhi.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800335c:	6833      	ldr	r3, [r6, #0]
 800335e:	009f      	lsls	r7, r3, #2
 8003360:	d4f6      	bmi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x308>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	0750      	lsls	r0, r2, #29
 8003366:	d579      	bpl.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800336a:	2b00      	cmp	r3, #0
 800336c:	d176      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x414>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800336e:	493f      	ldr	r1, [pc, #252]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x424>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003370:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003372:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003376:	69e5      	ldr	r5, [r4, #28]
 8003378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337c:	4303      	orrs	r3, r0
 800337e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003380:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003384:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800338c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8003390:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003392:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003396:	3801      	subs	r0, #1
 8003398:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80033a0:	05d2      	lsls	r2, r2, #23
 80033a2:	d514      	bpl.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x386>
 80033a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033aa:	d110      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x386>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ac:	492f      	ldr	r1, [pc, #188]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x424>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80033ae:	69a5      	ldr	r5, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80033b4:	e9d4 0207 	ldrd	r0, r2, [r4, #28]
 80033b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80033bc:	432b      	orrs	r3, r5
 80033be:	0852      	lsrs	r2, r2, #1
 80033c0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80033c4:	3a01      	subs	r2, #1
 80033c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x420>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033d0:	4d26      	ldr	r5, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x424>)
    __HAL_RCC_PLLSAI_ENABLE();
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80033d6:	f7ff fcdd 	bl	8002d94 <HAL_GetTick>
 80033da:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f53f aecc 	bmi.w	800317c <HAL_RCCEx_PeriphCLKConfig+0x134>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033e4:	f7ff fcd6 	bl	8002d94 <HAL_GetTick>
 80033e8:	1b00      	subs	r0, r0, r4
 80033ea:	2802      	cmp	r0, #2
 80033ec:	d9f6      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x394>
 80033ee:	e718      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f0:	481e      	ldr	r0, [pc, #120]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80033f2:	6882      	ldr	r2, [r0, #8]
 80033f4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80033f8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80033fc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003400:	430a      	orrs	r2, r1
 8003402:	6082      	str	r2, [r0, #8]
 8003404:	e758      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x270>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003406:	4f19      	ldr	r7, [pc, #100]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x424>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003408:	6866      	ldr	r6, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800340a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800340e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003412:	68e1      	ldr	r1, [r4, #12]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003414:	f3c0 4c01 	ubfx	ip, r0, #16, #2
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003418:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800341c:	68a0      	ldr	r0, [r4, #8]
 800341e:	4332      	orrs	r2, r6
 8003420:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003424:	f10c 0601 	add.w	r6, ip, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003428:	0849      	lsrs	r1, r1, #1
 800342a:	ea42 6246 	orr.w	r2, r2, r6, lsl #25
 800342e:	3901      	subs	r1, #1
 8003430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003434:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003438:	e6e2      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        tickstart = HAL_GetTick();
 800343a:	f7ff fcab 	bl	8002d94 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003442:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7ff fca5 	bl	8002d94 <HAL_GetTick>
 800344a:	eba0 0008 	sub.w	r0, r0, r8
 800344e:	4548      	cmp	r0, r9
 8003450:	f63f aee7 	bhi.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003456:	079b      	lsls	r3, r3, #30
 8003458:	d5f5      	bpl.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800345a:	e721      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800345c:	0711      	lsls	r1, r2, #28
 800345e:	d59f      	bpl.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x358>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003462:	2b00      	cmp	r3, #0
 8003464:	d19c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003466:	e782      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003468:	42470070 	.word	0x42470070
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003470:	4928      	ldr	r1, [pc, #160]	; (8003514 <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8003472:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003474:	688b      	ldr	r3, [r1, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d007      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x1e>
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d01d      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x4e>
 8003482:	4a25      	ldr	r2, [pc, #148]	; (8003518 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003484:	4825      	ldr	r0, [pc, #148]	; (800351c <HAL_RCC_GetSysClockFreq+0xac>)
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf08      	it	eq
 800348a:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800348c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003490:	684b      	ldr	r3, [r1, #4]
 8003492:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003496:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349a:	d130      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349c:	6849      	ldr	r1, [r1, #4]
 800349e:	481f      	ldr	r0, [pc, #124]	; (800351c <HAL_RCC_GetSysClockFreq+0xac>)
 80034a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034a4:	fba1 0100 	umull	r0, r1, r1, r0
 80034a8:	f7fd fbae 	bl	8000c08 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80034b4:	3301      	adds	r3, #1
 80034b6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80034b8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80034bc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034be:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c0:	684b      	ldr	r3, [r1, #4]
 80034c2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ca:	d10e      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034cc:	6849      	ldr	r1, [r1, #4]
 80034ce:	4813      	ldr	r0, [pc, #76]	; (800351c <HAL_RCC_GetSysClockFreq+0xac>)
 80034d0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034d4:	fba1 0100 	umull	r0, r1, r1, r0
 80034d8:	f7fd fb96 	bl	8000c08 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80034e4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80034e8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	684b      	ldr	r3, [r1, #4]
 80034ec:	480a      	ldr	r0, [pc, #40]	; (8003518 <HAL_RCC_GetSysClockFreq+0xa8>)
 80034ee:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80034f2:	fba3 0100 	umull	r0, r1, r3, r0
 80034f6:	2300      	movs	r3, #0
 80034f8:	f7fd fb86 	bl	8000c08 <__aeabi_uldivmod>
 80034fc:	e7ee      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	684b      	ldr	r3, [r1, #4]
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003502:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003506:	fba3 0100 	umull	r0, r1, r3, r0
 800350a:	2300      	movs	r3, #0
 800350c:	f7fd fb7c 	bl	8000c08 <__aeabi_uldivmod>
 8003510:	e7cc      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x3c>
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	007a1200 	.word	0x007a1200
 800351c:	00f42400 	.word	0x00f42400

08003520 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	2800      	cmp	r0, #0
 8003522:	f000 81b5 	beq.w	8003890 <HAL_RCC_OscConfig+0x370>
{
 8003526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	6803      	ldr	r3, [r0, #0]
 800352c:	07da      	lsls	r2, r3, #31
{
 800352e:	b082      	sub	sp, #8
 8003530:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	d536      	bpl.n	80035a2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003534:	49ad      	ldr	r1, [pc, #692]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003536:	688a      	ldr	r2, [r1, #8]
 8003538:	f002 020c 	and.w	r2, r2, #12
 800353c:	2a04      	cmp	r2, #4
 800353e:	f000 80df 	beq.w	8003700 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003542:	688a      	ldr	r2, [r1, #8]
 8003544:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003548:	2a08      	cmp	r2, #8
 800354a:	f000 80d5 	beq.w	80036f8 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	49a7      	ldr	r1, [pc, #668]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003550:	688a      	ldr	r2, [r1, #8]
 8003552:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003556:	2a0c      	cmp	r2, #12
 8003558:	f000 8104 	beq.w	8003764 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003562:	f000 8118 	beq.w	8003796 <HAL_RCC_OscConfig+0x276>
 8003566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356a:	f000 8198 	beq.w	800389e <HAL_RCC_OscConfig+0x37e>
 800356e:	4d9f      	ldr	r5, [pc, #636]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003570:	682a      	ldr	r2, [r5, #0]
 8003572:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003576:	602a      	str	r2, [r5, #0]
 8003578:	682a      	ldr	r2, [r5, #0]
 800357a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800357e:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 810d 	bne.w	80037a0 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7ff fc05 	bl	8002d94 <HAL_GetTick>
 800358a:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358c:	e005      	b.n	800359a <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358e:	f7ff fc01 	bl	8002d94 <HAL_GetTick>
 8003592:	1b80      	subs	r0, r0, r6
 8003594:	2864      	cmp	r0, #100	; 0x64
 8003596:	f200 80fa 	bhi.w	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	0399      	lsls	r1, r3, #14
 800359e:	d4f6      	bmi.n	800358e <HAL_RCC_OscConfig+0x6e>
 80035a0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	079a      	lsls	r2, r3, #30
 80035a4:	d52f      	bpl.n	8003606 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035a6:	4a91      	ldr	r2, [pc, #580]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 80035a8:	6891      	ldr	r1, [r2, #8]
 80035aa:	f011 0f0c 	tst.w	r1, #12
 80035ae:	f000 8098 	beq.w	80036e2 <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035b2:	6891      	ldr	r1, [r2, #8]
 80035b4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035b8:	2908      	cmp	r1, #8
 80035ba:	f000 808e 	beq.w	80036da <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	498b      	ldr	r1, [pc, #556]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035c6:	2a0c      	cmp	r2, #12
 80035c8:	f000 8164 	beq.w	8003894 <HAL_RCC_OscConfig+0x374>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035cc:	68e3      	ldr	r3, [r4, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8116 	beq.w	8003800 <HAL_RCC_OscConfig+0x2e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d4:	4b86      	ldr	r3, [pc, #536]	; (80037f0 <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4e85      	ldr	r6, [pc, #532]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035dc:	f7ff fbda 	bl	8002d94 <HAL_GetTick>
 80035e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	e005      	b.n	80035f0 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7ff fbd6 	bl	8002d94 <HAL_GetTick>
 80035e8:	1b40      	subs	r0, r0, r5
 80035ea:	2802      	cmp	r0, #2
 80035ec:	f200 80cf 	bhi.w	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	0798      	lsls	r0, r3, #30
 80035f4:	d5f6      	bpl.n	80035e4 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	6833      	ldr	r3, [r6, #0]
 80035f8:	6922      	ldr	r2, [r4, #16]
 80035fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	071a      	lsls	r2, r3, #28
 8003608:	d452      	bmi.n	80036b0 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360a:	0758      	lsls	r0, r3, #29
 800360c:	d530      	bpl.n	8003670 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4a77      	ldr	r2, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003610:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003612:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003616:	f000 8099 	beq.w	800374c <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	4e75      	ldr	r6, [pc, #468]	; (80037f4 <HAL_RCC_OscConfig+0x2d4>)
 800361e:	6833      	ldr	r3, [r6, #0]
 8003620:	05d9      	lsls	r1, r3, #23
 8003622:	f140 80a4 	bpl.w	800376e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	f000 80c7 	beq.w	80037bc <HAL_RCC_OscConfig+0x29c>
 800362e:	2b05      	cmp	r3, #5
 8003630:	f000 813f 	beq.w	80038b2 <HAL_RCC_OscConfig+0x392>
 8003634:	4e6d      	ldr	r6, [pc, #436]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003636:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	6732      	str	r2, [r6, #112]	; 0x70
 800363e:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003640:	f022 0204 	bic.w	r2, r2, #4
 8003644:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80bd 	bne.w	80037c6 <HAL_RCC_OscConfig+0x2a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7ff fba2 	bl	8002d94 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003654:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	e005      	b.n	8003664 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7ff fb9c 	bl	8002d94 <HAL_GetTick>
 800365c:	1bc0      	subs	r0, r0, r7
 800365e:	4540      	cmp	r0, r8
 8003660:	f200 8095 	bhi.w	800378e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003666:	0798      	lsls	r0, r3, #30
 8003668:	d4f6      	bmi.n	8003658 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366a:	2d00      	cmp	r5, #0
 800366c:	f040 810a 	bne.w	8003884 <HAL_RCC_OscConfig+0x364>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003670:	69a0      	ldr	r0, [r4, #24]
 8003672:	b1c8      	cbz	r0, 80036a8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003674:	4d5d      	ldr	r5, [pc, #372]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003676:	68ab      	ldr	r3, [r5, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	f000 80d0 	beq.w	8003822 <HAL_RCC_OscConfig+0x302>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b5d      	ldr	r3, [pc, #372]	; (80037f8 <HAL_RCC_OscConfig+0x2d8>)
 8003684:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003686:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003688:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368a:	f000 811c 	beq.w	80038c6 <HAL_RCC_OscConfig+0x3a6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7ff fb81 	bl	8002d94 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003694:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	e004      	b.n	80036a2 <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7ff fb7c 	bl	8002d94 <HAL_GetTick>
 800369c:	1b40      	subs	r0, r0, r5
 800369e:	2802      	cmp	r0, #2
 80036a0:	d875      	bhi.n	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	d4f7      	bmi.n	8003698 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2000      	movs	r0, #0
}
 80036aa:	b002      	add	sp, #8
 80036ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036b0:	6963      	ldr	r3, [r4, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 80036b6:	4b51      	ldr	r3, [pc, #324]	; (80037fc <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	4e4c      	ldr	r6, [pc, #304]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80036be:	f7ff fb69 	bl	8002d94 <HAL_GetTick>
 80036c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c4:	e004      	b.n	80036d0 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c6:	f7ff fb65 	bl	8002d94 <HAL_GetTick>
 80036ca:	1b40      	subs	r0, r0, r5
 80036cc:	2802      	cmp	r0, #2
 80036ce:	d85e      	bhi.n	800378e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80036d2:	079b      	lsls	r3, r3, #30
 80036d4:	d5f7      	bpl.n	80036c6 <HAL_RCC_OscConfig+0x1a6>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	e797      	b.n	800360a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036da:	6852      	ldr	r2, [r2, #4]
 80036dc:	0257      	lsls	r7, r2, #9
 80036de:	f53f af6e 	bmi.w	80035be <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4a42      	ldr	r2, [pc, #264]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	0795      	lsls	r5, r2, #30
 80036e8:	d524      	bpl.n	8003734 <HAL_RCC_OscConfig+0x214>
 80036ea:	68e2      	ldr	r2, [r4, #12]
 80036ec:	2a01      	cmp	r2, #1
 80036ee:	d021      	beq.n	8003734 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80036f0:	2001      	movs	r0, #1
}
 80036f2:	b002      	add	sp, #8
 80036f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f8:	684a      	ldr	r2, [r1, #4]
 80036fa:	0257      	lsls	r7, r2, #9
 80036fc:	f57f af27 	bpl.w	800354e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	0395      	lsls	r5, r2, #14
 8003706:	f57f af4c 	bpl.w	80035a2 <HAL_RCC_OscConfig+0x82>
 800370a:	6862      	ldr	r2, [r4, #4]
 800370c:	2a00      	cmp	r2, #0
 800370e:	f47f af48 	bne.w	80035a2 <HAL_RCC_OscConfig+0x82>
 8003712:	e7ed      	b.n	80036f0 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8003714:	4a39      	ldr	r2, [pc, #228]	; (80037fc <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003716:	4e35      	ldr	r6, [pc, #212]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 8003718:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800371a:	f7ff fb3b 	bl	8002d94 <HAL_GetTick>
 800371e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e004      	b.n	800372c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003722:	f7ff fb37 	bl	8002d94 <HAL_GetTick>
 8003726:	1b40      	subs	r0, r0, r5
 8003728:	2802      	cmp	r0, #2
 800372a:	d830      	bhi.n	800378e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800372e:	079f      	lsls	r7, r3, #30
 8003730:	d4f7      	bmi.n	8003722 <HAL_RCC_OscConfig+0x202>
 8003732:	e7d0      	b.n	80036d6 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	492d      	ldr	r1, [pc, #180]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003736:	6920      	ldr	r0, [r4, #16]
 8003738:	680a      	ldr	r2, [r1, #0]
 800373a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800373e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003742:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003744:	071a      	lsls	r2, r3, #28
 8003746:	f57f af60 	bpl.w	800360a <HAL_RCC_OscConfig+0xea>
 800374a:	e7b1      	b.n	80036b0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003760:	2501      	movs	r5, #1
 8003762:	e75b      	b.n	800361c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003764:	684a      	ldr	r2, [r1, #4]
 8003766:	0256      	lsls	r6, r2, #9
 8003768:	f57f aef8 	bpl.w	800355c <HAL_RCC_OscConfig+0x3c>
 800376c:	e7c8      	b.n	8003700 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003776:	f7ff fb0d 	bl	8002d94 <HAL_GetTick>
 800377a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	6833      	ldr	r3, [r6, #0]
 800377e:	05da      	lsls	r2, r3, #23
 8003780:	f53f af51 	bmi.w	8003626 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7ff fb06 	bl	8002d94 <HAL_GetTick>
 8003788:	1bc0      	subs	r0, r0, r7
 800378a:	2802      	cmp	r0, #2
 800378c:	d9f6      	bls.n	800377c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800378e:	2003      	movs	r0, #3
}
 8003790:	b002      	add	sp, #8
 8003792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037a0:	f7ff faf8 	bl	8002d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a4:	4e11      	ldr	r6, [pc, #68]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80037a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a8:	e004      	b.n	80037b4 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037aa:	f7ff faf3 	bl	8002d94 <HAL_GetTick>
 80037ae:	1b40      	subs	r0, r0, r5
 80037b0:	2864      	cmp	r0, #100	; 0x64
 80037b2:	d8ec      	bhi.n	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b4:	6833      	ldr	r3, [r6, #0]
 80037b6:	0398      	lsls	r0, r3, #14
 80037b8:	d5f7      	bpl.n	80037aa <HAL_RCC_OscConfig+0x28a>
 80037ba:	e6f1      	b.n	80035a0 <HAL_RCC_OscConfig+0x80>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
 80037be:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80037c6:	f7ff fae5 	bl	8002d94 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	4f08      	ldr	r7, [pc, #32]	; (80037ec <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80037cc:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e004      	b.n	80037de <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7ff fade 	bl	8002d94 <HAL_GetTick>
 80037d8:	1b80      	subs	r0, r0, r6
 80037da:	4540      	cmp	r0, r8
 80037dc:	d8d7      	bhi.n	800378e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e0:	079b      	lsls	r3, r3, #30
 80037e2:	d5f7      	bpl.n	80037d4 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	f43f af43 	beq.w	8003670 <HAL_RCC_OscConfig+0x150>
 80037ea:	e04b      	b.n	8003884 <HAL_RCC_OscConfig+0x364>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	42470000 	.word	0x42470000
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42470060 	.word	0x42470060
 80037fc:	42470e80 	.word	0x42470e80
        __HAL_RCC_HSI_DISABLE();
 8003800:	4a49      	ldr	r2, [pc, #292]	; (8003928 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	4e4a      	ldr	r6, [pc, #296]	; (800392c <HAL_RCC_OscConfig+0x40c>)
        __HAL_RCC_HSI_DISABLE();
 8003804:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003806:	f7ff fac5 	bl	8002d94 <HAL_GetTick>
 800380a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380c:	e004      	b.n	8003818 <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380e:	f7ff fac1 	bl	8002d94 <HAL_GetTick>
 8003812:	1b40      	subs	r0, r0, r5
 8003814:	2802      	cmp	r0, #2
 8003816:	d8ba      	bhi.n	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003818:	6833      	ldr	r3, [r6, #0]
 800381a:	0799      	lsls	r1, r3, #30
 800381c:	d4f7      	bmi.n	800380e <HAL_RCC_OscConfig+0x2ee>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	e6f1      	b.n	8003606 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003822:	2801      	cmp	r0, #1
 8003824:	f43f af41 	beq.w	80036aa <HAL_RCC_OscConfig+0x18a>
        pll_config = RCC->PLLCFGR;
 8003828:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003830:	4291      	cmp	r1, r2
 8003832:	f47f af5d 	bne.w	80036f0 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003838:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383c:	4291      	cmp	r1, r2
 800383e:	f47f af57 	bne.w	80036f0 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003842:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003844:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003848:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800384e:	f47f af4f 	bne.w	80036f0 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003852:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003854:	0852      	lsrs	r2, r2, #1
 8003856:	3a01      	subs	r2, #1
 8003858:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003860:	f47f af46 	bne.w	80036f0 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800386e:	f47f af3f 	bne.w	80036f0 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003872:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003874:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003878:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 800387c:	bf14      	ite	ne
 800387e:	2001      	movne	r0, #1
 8003880:	2000      	moveq	r0, #0
 8003882:	e712      	b.n	80036aa <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_RCC_OscConfig+0x40c>)
 8003886:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	e6ef      	b.n	8003670 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
}
 8003892:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003894:	684a      	ldr	r2, [r1, #4]
 8003896:	0256      	lsls	r6, r2, #9
 8003898:	f53f ae98 	bmi.w	80035cc <HAL_RCC_OscConfig+0xac>
 800389c:	e721      	b.n	80036e2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <HAL_RCC_OscConfig+0x40c>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038ae:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b0:	e776      	b.n	80037a0 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <HAL_RCC_OscConfig+0x40c>)
 80038b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038b6:	f042 0204 	orr.w	r2, r2, #4
 80038ba:	671a      	str	r2, [r3, #112]	; 0x70
 80038bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	e77f      	b.n	80037c6 <HAL_RCC_OscConfig+0x2a6>
        tickstart = HAL_GetTick();
 80038c6:	f7ff fa65 	bl	8002d94 <HAL_GetTick>
 80038ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038cc:	e005      	b.n	80038da <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ce:	f7ff fa61 	bl	8002d94 <HAL_GetTick>
 80038d2:	1b80      	subs	r0, r0, r6
 80038d4:	2802      	cmp	r0, #2
 80038d6:	f63f af5a 	bhi.w	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	0199      	lsls	r1, r3, #6
 80038de:	d4f6      	bmi.n	80038ce <HAL_RCC_OscConfig+0x3ae>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80038e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80038e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038ea:	4313      	orrs	r3, r2
 80038ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038ee:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80038f2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80038f6:	0852      	lsrs	r2, r2, #1
 80038f8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80038fc:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80038fe:	490c      	ldr	r1, [pc, #48]	; (8003930 <HAL_RCC_OscConfig+0x410>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	4e0a      	ldr	r6, [pc, #40]	; (800392c <HAL_RCC_OscConfig+0x40c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003906:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003908:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800390a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800390c:	f7ff fa42 	bl	8002d94 <HAL_GetTick>
 8003910:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	e005      	b.n	8003920 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7ff fa3e 	bl	8002d94 <HAL_GetTick>
 8003918:	1b00      	subs	r0, r0, r4
 800391a:	2802      	cmp	r0, #2
 800391c:	f63f af37 	bhi.w	800378e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	6833      	ldr	r3, [r6, #0]
 8003922:	019a      	lsls	r2, r3, #6
 8003924:	d5f6      	bpl.n	8003914 <HAL_RCC_OscConfig+0x3f4>
 8003926:	e6bf      	b.n	80036a8 <HAL_RCC_OscConfig+0x188>
 8003928:	42470000 	.word	0x42470000
 800392c:	40023800 	.word	0x40023800
 8003930:	42470060 	.word	0x42470060

08003934 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003934:	2800      	cmp	r0, #0
 8003936:	d068      	beq.n	8003a0a <HAL_RTC_Init+0xd6>
{
 8003938:	b538      	push	{r3, r4, r5, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800393a:	7f43      	ldrb	r3, [r0, #29]
 800393c:	4604      	mov	r4, r0
 800393e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003942:	2b00      	cmp	r3, #0
 8003944:	d05d      	beq.n	8003a02 <HAL_RTC_Init+0xce>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 800394a:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800394c:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800394e:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003950:	6259      	str	r1, [r3, #36]	; 0x24
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	0655      	lsls	r5, r2, #25
 8003958:	d53c      	bpl.n	80039d4 <HAL_RTC_Init+0xa0>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800395a:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800395c:	6862      	ldr	r2, [r4, #4]
 800395e:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003962:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8003966:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800396a:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800396c:	6899      	ldr	r1, [r3, #8]
 800396e:	432a      	orrs	r2, r5
 8003970:	4302      	orrs	r2, r0
 8003972:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003974:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003976:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003978:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68a1      	ldr	r1, [r4, #8]
 800397e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003982:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	0691      	lsls	r1, r2, #26
 8003990:	d50d      	bpl.n	80039ae <HAL_RTC_Init+0x7a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003992:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003994:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003996:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800399a:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800399c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800399e:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80039a0:	4302      	orrs	r2, r0
    hrtc->State = HAL_RTC_STATE_READY;
 80039a2:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a6:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80039a8:	7761      	strb	r1, [r4, #29]
    return HAL_OK;
 80039aa:	2000      	movs	r0, #0
}
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80039b6:	f7ff f9ed 	bl	8002d94 <HAL_GetTick>
 80039ba:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80039bc:	e005      	b.n	80039ca <HAL_RTC_Init+0x96>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039be:	f7ff f9e9 	bl	8002d94 <HAL_GetTick>
 80039c2:	1b43      	subs	r3, r0, r5
 80039c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c8:	d814      	bhi.n	80039f4 <HAL_RTC_Init+0xc0>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	0692      	lsls	r2, r2, #26
 80039d0:	d5f5      	bpl.n	80039be <HAL_RTC_Init+0x8a>
 80039d2:	e7de      	b.n	8003992 <HAL_RTC_Init+0x5e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039da:	f7ff f9db 	bl	8002d94 <HAL_GetTick>
 80039de:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	0650      	lsls	r0, r2, #25
 80039e6:	d4b8      	bmi.n	800395a <HAL_RTC_Init+0x26>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039e8:	f7ff f9d4 	bl	8002d94 <HAL_GetTick>
 80039ec:	1b43      	subs	r3, r0, r5
 80039ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f2:	d9f5      	bls.n	80039e0 <HAL_RTC_Init+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039f8:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039fa:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039fc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80039fe:	2001      	movs	r0, #1
}
 8003a00:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003a02:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003a04:	f7ff f8c4 	bl	8002b90 <HAL_RTC_MspInit>
 8003a08:	e79d      	b.n	8003946 <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 8003a0a:	2001      	movs	r0, #1
}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop

08003a10 <HAL_RTC_SetTime>:
{
 8003a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8003a14:	7f03      	ldrb	r3, [r0, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	f000 80af 	beq.w	8003b7a <HAL_RTC_SetTime+0x16a>
 8003a1c:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a1e:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8003a20:	2101      	movs	r1, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a22:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hrtc);
 8003a24:	7701      	strb	r1, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a26:	4606      	mov	r6, r0
 8003a28:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	d047      	beq.n	8003abe <HAL_RTC_SetTime+0xae>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a30:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)sTime->Seconds) | \
 8003a32:	78aa      	ldrb	r2, [r5, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a34:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003a38:	bf16      	itet	ne
 8003a3a:	78ec      	ldrbne	r4, [r5, #3]
      sTime->TimeFormat = 0x00U;
 8003a3c:	70eb      	strbeq	r3, [r5, #3]
 8003a3e:	0423      	lslne	r3, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a40:	786c      	ldrb	r4, [r5, #1]
 8003a42:	0224      	lsls	r4, r4, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003a48:	4314      	orrs	r4, r2
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003a4a:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4c:	22ca      	movs	r2, #202	; 0xca
 8003a4e:	2353      	movs	r3, #83	; 0x53
 8003a50:	627a      	str	r2, [r7, #36]	; 0x24
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	065a      	lsls	r2, r3, #25
 8003a58:	d56a      	bpl.n	8003b30 <HAL_RTC_SetTime+0x120>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a5a:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003a5e:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003a62:	603c      	str	r4, [r7, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003a64:	68ba      	ldr	r2, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a66:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003a6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a6e:	60ba      	str	r2, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	430b      	orrs	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7e:	60fb      	str	r3, [r7, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	069b      	lsls	r3, r3, #26
 8003a84:	d412      	bmi.n	8003aac <HAL_RTC_SetTime+0x9c>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a8c:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8003a8e:	f7ff f981 	bl	8002d94 <HAL_GetTick>
 8003a92:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a94:	e005      	b.n	8003aa2 <HAL_RTC_SetTime+0x92>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a96:	f7ff f97d 	bl	8002d94 <HAL_GetTick>
 8003a9a:	1b40      	subs	r0, r0, r5
 8003a9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003aa0:	d862      	bhi.n	8003b68 <HAL_RTC_SetTime+0x158>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003aa2:	6837      	ldr	r7, [r6, #0]
 8003aa4:	68fc      	ldr	r4, [r7, #12]
 8003aa6:	f014 0420 	ands.w	r4, r4, #32
 8003aaa:	d0f4      	beq.n	8003a96 <HAL_RTC_SetTime+0x86>
   __HAL_UNLOCK(hrtc);
 8003aac:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aae:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8003ab0:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab2:	6279      	str	r1, [r7, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003ab4:	7772      	strb	r2, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8003ab6:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8003ab8:	4618      	mov	r0, r3
}
 8003aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003abe:	68bc      	ldr	r4, [r7, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003ac0:	782b      	ldrb	r3, [r5, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ac2:	f014 0c40 	ands.w	ip, r4, #64	; 0x40
 8003ac6:	bf16      	itet	ne
 8003ac8:	78ec      	ldrbne	r4, [r5, #3]
      sTime->TimeFormat = 0x00U;
 8003aca:	f885 c003 	strbeq.w	ip, [r5, #3]
 8003ace:	ea4f 4c04 	movne.w	ip, r4, lsl #16
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;

  while(Value >= 10U)
 8003ad2:	2b09      	cmp	r3, #9
 8003ad4:	d909      	bls.n	8003aea <HAL_RTC_SetTime+0xda>
  uint32_t bcdhigh = 0U;
 8003ad6:	2100      	movs	r1, #0
  {
    bcdhigh++;
    Value -= 10U;
 8003ad8:	3b0a      	subs	r3, #10
 8003ada:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003adc:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003ade:	f101 0101 	add.w	r1, r1, #1
  while(Value >= 10U)
 8003ae2:	d8f9      	bhi.n	8003ad8 <HAL_RTC_SetTime+0xc8>
 8003ae4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003ae8:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003aea:	7869      	ldrb	r1, [r5, #1]
  while(Value >= 10U)
 8003aec:	2909      	cmp	r1, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003aee:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8003af2:	d909      	bls.n	8003b08 <HAL_RTC_SetTime+0xf8>
  uint32_t bcdhigh = 0U;
 8003af4:	2400      	movs	r4, #0
    Value -= 10U;
 8003af6:	390a      	subs	r1, #10
 8003af8:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8003afa:	2909      	cmp	r1, #9
    bcdhigh++;
 8003afc:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8003b00:	d8f9      	bhi.n	8003af6 <HAL_RTC_SetTime+0xe6>
 8003b02:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8003b06:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003b08:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10U)
 8003b0a:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b0c:	ea4f 2101 	mov.w	r1, r1, lsl #8
  while(Value >= 10U)
 8003b10:	d909      	bls.n	8003b26 <HAL_RTC_SetTime+0x116>
    Value -= 10U;
 8003b12:	f1a0 040a 	sub.w	r4, r0, #10
 8003b16:	b2e0      	uxtb	r0, r4
  while(Value >= 10U)
 8003b18:	2809      	cmp	r0, #9
    bcdhigh++;
 8003b1a:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003b1e:	d8f8      	bhi.n	8003b12 <HAL_RTC_SetTime+0x102>
 8003b20:	ea40 1402 	orr.w	r4, r0, r2, lsl #4
 8003b24:	b2e0      	uxtb	r0, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b26:	ea43 040c 	orr.w	r4, r3, ip
 8003b2a:	430c      	orrs	r4, r1
 8003b2c:	4304      	orrs	r4, r0
 8003b2e:	e78d      	b.n	8003a4c <HAL_RTC_SetTime+0x3c>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b34:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8003b36:	f7ff f92d 	bl	8002d94 <HAL_GetTick>
 8003b3a:	4680      	mov	r8, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b3c:	6837      	ldr	r7, [r6, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f013 0940 	ands.w	r9, r3, #64	; 0x40
 8003b44:	d189      	bne.n	8003a5a <HAL_RTC_SetTime+0x4a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b46:	f7ff f925 	bl	8002d94 <HAL_GetTick>
 8003b4a:	eba0 0008 	sub.w	r0, r0, r8
 8003b4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b52:	d9f3      	bls.n	8003b3c <HAL_RTC_SetTime+0x12c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b54:	6832      	ldr	r2, [r6, #0]
 8003b56:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b58:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b5a:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8003b5c:	f886 901c 	strb.w	r9, [r6, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b60:	7773      	strb	r3, [r6, #29]
    return HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
}
 8003b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b68:	6832      	ldr	r2, [r6, #0]
 8003b6a:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b6c:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b6e:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003b70:	7734      	strb	r4, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b72:	7773      	strb	r3, [r6, #29]
        return HAL_ERROR;
 8003b74:	2001      	movs	r0, #1
}
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8003b7a:	2002      	movs	r0, #2
}
 8003b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003b80 <HAL_RTC_SetDate>:
{
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8003b82:	7f03      	ldrb	r3, [r0, #28]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f000 809e 	beq.w	8003cc6 <HAL_RTC_SetDate+0x146>
 8003b8a:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b8c:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b92:	776b      	strb	r3, [r5, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b94:	2a00      	cmp	r2, #0
 8003b96:	d038      	beq.n	8003c0a <HAL_RTC_SetDate+0x8a>
                  (((uint32_t)sDate->Month) << 8U) | \
 8003b98:	784c      	ldrb	r4, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b9a:	78c8      	ldrb	r0, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 8003b9c:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003b9e:	780b      	ldrb	r3, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003ba0:	0224      	lsls	r4, r4, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ba2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003ba6:	4314      	orrs	r4, r2
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ba8:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bac:	682a      	ldr	r2, [r5, #0]
 8003bae:	21ca      	movs	r1, #202	; 0xca
 8003bb0:	2353      	movs	r3, #83	; 0x53
 8003bb2:	6251      	str	r1, [r2, #36]	; 0x24
 8003bb4:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bb6:	68d3      	ldr	r3, [r2, #12]
 8003bb8:	0659      	lsls	r1, r3, #25
 8003bba:	d55f      	bpl.n	8003c7c <HAL_RTC_SetDate+0xfc>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003bbc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003bc0:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003bc4:	6054      	str	r4, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003bc6:	68d3      	ldr	r3, [r2, #12]
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bcc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bce:	6893      	ldr	r3, [r2, #8]
 8003bd0:	069b      	lsls	r3, r3, #26
 8003bd2:	d412      	bmi.n	8003bfa <HAL_RTC_SetDate+0x7a>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003bd4:	68d3      	ldr	r3, [r2, #12]
 8003bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bda:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003bdc:	f7ff f8da 	bl	8002d94 <HAL_GetTick>
 8003be0:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003be2:	e005      	b.n	8003bf0 <HAL_RTC_SetDate+0x70>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003be4:	f7ff f8d6 	bl	8002d94 <HAL_GetTick>
 8003be8:	1b80      	subs	r0, r0, r6
 8003bea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bee:	d862      	bhi.n	8003cb6 <HAL_RTC_SetDate+0x136>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003bf0:	682a      	ldr	r2, [r5, #0]
 8003bf2:	68d4      	ldr	r4, [r2, #12]
 8003bf4:	f014 0420 	ands.w	r4, r4, #32
 8003bf8:	d0f4      	beq.n	8003be4 <HAL_RTC_SetDate+0x64>
    __HAL_UNLOCK(hrtc);
 8003bfa:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bfc:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8003bfe:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c00:	6250      	str	r0, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003c02:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003c04:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8003c06:	4618      	mov	r0, r3
}
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c0a:	784b      	ldrb	r3, [r1, #1]
 8003c0c:	06d8      	lsls	r0, r3, #27
 8003c0e:	d54e      	bpl.n	8003cae <HAL_RTC_SetDate+0x12e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c10:	78cc      	ldrb	r4, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	330a      	adds	r3, #10
 8003c18:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003c1a:	2c09      	cmp	r4, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c1c:	704b      	strb	r3, [r1, #1]
  while(Value >= 10U)
 8003c1e:	d954      	bls.n	8003cca <HAL_RTC_SetDate+0x14a>
  uint32_t bcdhigh = 0U;
 8003c20:	2000      	movs	r0, #0
    Value -= 10U;
 8003c22:	3c0a      	subs	r4, #10
 8003c24:	b2e4      	uxtb	r4, r4
  while(Value >= 10U)
 8003c26:	2c09      	cmp	r4, #9
    bcdhigh++;
 8003c28:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8003c2c:	d8f9      	bhi.n	8003c22 <HAL_RTC_SetDate+0xa2>
 8003c2e:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
 8003c32:	b2e4      	uxtb	r4, r4
 8003c34:	2b09      	cmp	r3, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c36:	ea4f 4004 	mov.w	r0, r4, lsl #16
  while(Value >= 10U)
 8003c3a:	d909      	bls.n	8003c50 <HAL_RTC_SetDate+0xd0>
  uint32_t bcdhigh = 0U;
 8003c3c:	2400      	movs	r4, #0
    Value -= 10U;
 8003c3e:	3b0a      	subs	r3, #10
 8003c40:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003c42:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003c44:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8003c48:	d8f9      	bhi.n	8003c3e <HAL_RTC_SetDate+0xbe>
 8003c4a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003c4e:	b2db      	uxtb	r3, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003c50:	788e      	ldrb	r6, [r1, #2]
  while(Value >= 10U)
 8003c52:	2e09      	cmp	r6, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c54:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8003c58:	d909      	bls.n	8003c6e <HAL_RTC_SetDate+0xee>
    Value -= 10U;
 8003c5a:	f1a6 040a 	sub.w	r4, r6, #10
 8003c5e:	b2e6      	uxtb	r6, r4
  while(Value >= 10U)
 8003c60:	2e09      	cmp	r6, #9
    bcdhigh++;
 8003c62:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003c66:	d8f8      	bhi.n	8003c5a <HAL_RTC_SetDate+0xda>
 8003c68:	ea46 1402 	orr.w	r4, r6, r2, lsl #4
 8003c6c:	b2e6      	uxtb	r6, r4
                 ((uint32_t)sDate->WeekDay << 13U));
 8003c6e:	780c      	ldrb	r4, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c70:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8003c74:	4323      	orrs	r3, r4
 8003c76:	ea43 0406 	orr.w	r4, r3, r6
 8003c7a:	e797      	b.n	8003bac <HAL_RTC_SetDate+0x2c>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c80:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003c82:	f7ff f887 	bl	8002d94 <HAL_GetTick>
 8003c86:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c88:	682a      	ldr	r2, [r5, #0]
 8003c8a:	68d6      	ldr	r6, [r2, #12]
 8003c8c:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003c90:	d194      	bne.n	8003bbc <HAL_RTC_SetDate+0x3c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c92:	f7ff f87f 	bl	8002d94 <HAL_GetTick>
 8003c96:	1bc0      	subs	r0, r0, r7
 8003c98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c9c:	d9f4      	bls.n	8003c88 <HAL_RTC_SetDate+0x108>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c9e:	682a      	ldr	r2, [r5, #0]
 8003ca0:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ca2:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca4:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8003ca6:	772e      	strb	r6, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ca8:	776b      	strb	r3, [r5, #29]
    return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
}
 8003cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cae:	78cc      	ldrb	r4, [r1, #3]
  while(Value >= 10U)
 8003cb0:	2c09      	cmp	r4, #9
 8003cb2:	d8b5      	bhi.n	8003c20 <HAL_RTC_SetDate+0xa0>
 8003cb4:	e7be      	b.n	8003c34 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cb6:	682a      	ldr	r2, [r5, #0]
 8003cb8:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cba:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cbc:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003cbe:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cc0:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8003cc2:	2001      	movs	r0, #1
}
 8003cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 8003cc6:	2002      	movs	r0, #2
}
 8003cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cca:	0420      	lsls	r0, r4, #16
  while(Value >= 10U)
 8003ccc:	e7b6      	b.n	8003c3c <HAL_RTC_SetDate+0xbc>
 8003cce:	bf00      	nop

08003cd0 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cd0:	7f03      	ldrb	r3, [r0, #28]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d023      	beq.n	8003d1e <HAL_RTCEx_SetTimeStamp+0x4e>
{
 8003cd6:	b430      	push	{r4, r5}
 8003cd8:	4604      	mov	r4, r0

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cda:	2002      	movs	r0, #2

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003cdc:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cde:	7760      	strb	r0, [r4, #29]

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ce0:	20ca      	movs	r0, #202	; 0xca
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003ce2:	689d      	ldr	r5, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ce4:	6258      	str	r0, [r3, #36]	; 0x24
 8003ce6:	2053      	movs	r0, #83	; 0x53
 8003ce8:	6258      	str	r0, [r3, #36]	; 0x24

  hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_TSINSEL;
 8003cea:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003cec:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8003cf0:	6418      	str	r0, [r3, #64]	; 0x40
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003cf2:	f425 6000 	bic.w	r0, r5, #2048	; 0x800
  hrtc->Instance->TAFCR |= (uint32_t)(RTC_TimeStampPin);
 8003cf6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8003cf8:	f020 0008 	bic.w	r0, r0, #8
  tmpreg|= TimeStampEdge;
 8003cfc:	4301      	orrs	r1, r0
  hrtc->Instance->TAFCR |= (uint32_t)(RTC_TimeStampPin);
 8003cfe:	432a      	orrs	r2, r5
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8003d02:	6099      	str	r1, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003d04:	689a      	ldr	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d06:	20ff      	movs	r0, #255	; 0xff

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d08:	2501      	movs	r5, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d0a:	2100      	movs	r1, #0
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8003d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d10:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d12:	6258      	str	r0, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003d14:	7765      	strb	r5, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8003d16:	7721      	strb	r1, [r4, #28]

  return HAL_OK;
 8003d18:	4608      	mov	r0, r1
}
 8003d1a:	bc30      	pop	{r4, r5}
 8003d1c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003d1e:	2002      	movs	r0, #2
}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <calloc>:
 8003d24:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <calloc+0xc>)
 8003d26:	460a      	mov	r2, r1
 8003d28:	4601      	mov	r1, r0
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	f000 b866 	b.w	8003dfc <_calloc_r>
 8003d30:	2000000c 	.word	0x2000000c

08003d34 <__errno>:
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <__errno+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <exit>:
 8003d40:	b508      	push	{r3, lr}
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <exit+0x20>)
 8003d44:	4604      	mov	r4, r0
 8003d46:	b113      	cbz	r3, 8003d4e <exit+0xe>
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f3af 8000 	nop.w
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <exit+0x24>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d54:	b103      	cbz	r3, 8003d58 <exit+0x18>
 8003d56:	4798      	blx	r3
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7fe ff59 	bl	8002c10 <_exit>
 8003d5e:	bf00      	nop
 8003d60:	00000000 	.word	0x00000000
 8003d64:	08008204 	.word	0x08008204

08003d68 <__libc_init_array>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4d0d      	ldr	r5, [pc, #52]	; (8003da0 <__libc_init_array+0x38>)
 8003d6c:	4c0d      	ldr	r4, [pc, #52]	; (8003da4 <__libc_init_array+0x3c>)
 8003d6e:	1b64      	subs	r4, r4, r5
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	2600      	movs	r6, #0
 8003d74:	42a6      	cmp	r6, r4
 8003d76:	d109      	bne.n	8003d8c <__libc_init_array+0x24>
 8003d78:	4d0b      	ldr	r5, [pc, #44]	; (8003da8 <__libc_init_array+0x40>)
 8003d7a:	4c0c      	ldr	r4, [pc, #48]	; (8003dac <__libc_init_array+0x44>)
 8003d7c:	f003 f96c 	bl	8007058 <_init>
 8003d80:	1b64      	subs	r4, r4, r5
 8003d82:	10a4      	asrs	r4, r4, #2
 8003d84:	2600      	movs	r6, #0
 8003d86:	42a6      	cmp	r6, r4
 8003d88:	d105      	bne.n	8003d96 <__libc_init_array+0x2e>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d90:	4798      	blx	r3
 8003d92:	3601      	adds	r6, #1
 8003d94:	e7ee      	b.n	8003d74 <__libc_init_array+0xc>
 8003d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9a:	4798      	blx	r3
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7f2      	b.n	8003d86 <__libc_init_array+0x1e>
 8003da0:	08008620 	.word	0x08008620
 8003da4:	08008620 	.word	0x08008620
 8003da8:	08008620 	.word	0x08008620
 8003dac:	08008624 	.word	0x08008624

08003db0 <malloc>:
 8003db0:	4b02      	ldr	r3, [pc, #8]	; (8003dbc <malloc+0xc>)
 8003db2:	4601      	mov	r1, r0
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f000 b881 	b.w	8003ebc <_malloc_r>
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <free>:
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <free+0xc>)
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	f000 b829 	b.w	8003e1c <_free_r>
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <memcpy>:
 8003dd0:	440a      	add	r2, r1
 8003dd2:	4291      	cmp	r1, r2
 8003dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003dd8:	d100      	bne.n	8003ddc <memcpy+0xc>
 8003dda:	4770      	bx	lr
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de6:	4291      	cmp	r1, r2
 8003de8:	d1f9      	bne.n	8003dde <memcpy+0xe>
 8003dea:	bd10      	pop	{r4, pc}

08003dec <memset>:
 8003dec:	4402      	add	r2, r0
 8003dee:	4603      	mov	r3, r0
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d100      	bne.n	8003df6 <memset+0xa>
 8003df4:	4770      	bx	lr
 8003df6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfa:	e7f9      	b.n	8003df0 <memset+0x4>

08003dfc <_calloc_r>:
 8003dfc:	b513      	push	{r0, r1, r4, lr}
 8003dfe:	434a      	muls	r2, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	9201      	str	r2, [sp, #4]
 8003e04:	f000 f85a 	bl	8003ebc <_malloc_r>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	b118      	cbz	r0, 8003e14 <_calloc_r+0x18>
 8003e0c:	9a01      	ldr	r2, [sp, #4]
 8003e0e:	2100      	movs	r1, #0
 8003e10:	f7ff ffec 	bl	8003dec <memset>
 8003e14:	4620      	mov	r0, r4
 8003e16:	b002      	add	sp, #8
 8003e18:	bd10      	pop	{r4, pc}
	...

08003e1c <_free_r>:
 8003e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e1e:	2900      	cmp	r1, #0
 8003e20:	d048      	beq.n	8003eb4 <_free_r+0x98>
 8003e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e26:	9001      	str	r0, [sp, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e2e:	bfb8      	it	lt
 8003e30:	18e4      	addlt	r4, r4, r3
 8003e32:	f001 ff01 	bl	8005c38 <__malloc_lock>
 8003e36:	4a20      	ldr	r2, [pc, #128]	; (8003eb8 <_free_r+0x9c>)
 8003e38:	9801      	ldr	r0, [sp, #4]
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	b933      	cbnz	r3, 8003e4e <_free_r+0x32>
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	6014      	str	r4, [r2, #0]
 8003e44:	b003      	add	sp, #12
 8003e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e4a:	f001 befb 	b.w	8005c44 <__malloc_unlock>
 8003e4e:	42a3      	cmp	r3, r4
 8003e50:	d90b      	bls.n	8003e6a <_free_r+0x4e>
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	1862      	adds	r2, r4, r1
 8003e56:	4293      	cmp	r3, r2
 8003e58:	bf04      	itt	eq
 8003e5a:	681a      	ldreq	r2, [r3, #0]
 8003e5c:	685b      	ldreq	r3, [r3, #4]
 8003e5e:	6063      	str	r3, [r4, #4]
 8003e60:	bf04      	itt	eq
 8003e62:	1852      	addeq	r2, r2, r1
 8003e64:	6022      	streq	r2, [r4, #0]
 8003e66:	602c      	str	r4, [r5, #0]
 8003e68:	e7ec      	b.n	8003e44 <_free_r+0x28>
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b10b      	cbz	r3, 8003e74 <_free_r+0x58>
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	d9fa      	bls.n	8003e6a <_free_r+0x4e>
 8003e74:	6811      	ldr	r1, [r2, #0]
 8003e76:	1855      	adds	r5, r2, r1
 8003e78:	42a5      	cmp	r5, r4
 8003e7a:	d10b      	bne.n	8003e94 <_free_r+0x78>
 8003e7c:	6824      	ldr	r4, [r4, #0]
 8003e7e:	4421      	add	r1, r4
 8003e80:	1854      	adds	r4, r2, r1
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	d1dd      	bne.n	8003e44 <_free_r+0x28>
 8003e88:	681c      	ldr	r4, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	6053      	str	r3, [r2, #4]
 8003e8e:	4421      	add	r1, r4
 8003e90:	6011      	str	r1, [r2, #0]
 8003e92:	e7d7      	b.n	8003e44 <_free_r+0x28>
 8003e94:	d902      	bls.n	8003e9c <_free_r+0x80>
 8003e96:	230c      	movs	r3, #12
 8003e98:	6003      	str	r3, [r0, #0]
 8003e9a:	e7d3      	b.n	8003e44 <_free_r+0x28>
 8003e9c:	6825      	ldr	r5, [r4, #0]
 8003e9e:	1961      	adds	r1, r4, r5
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	bf04      	itt	eq
 8003ea4:	6819      	ldreq	r1, [r3, #0]
 8003ea6:	685b      	ldreq	r3, [r3, #4]
 8003ea8:	6063      	str	r3, [r4, #4]
 8003eaa:	bf04      	itt	eq
 8003eac:	1949      	addeq	r1, r1, r5
 8003eae:	6021      	streq	r1, [r4, #0]
 8003eb0:	6054      	str	r4, [r2, #4]
 8003eb2:	e7c7      	b.n	8003e44 <_free_r+0x28>
 8003eb4:	b003      	add	sp, #12
 8003eb6:	bd30      	pop	{r4, r5, pc}
 8003eb8:	20000200 	.word	0x20000200

08003ebc <_malloc_r>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	1ccd      	adds	r5, r1, #3
 8003ec0:	f025 0503 	bic.w	r5, r5, #3
 8003ec4:	3508      	adds	r5, #8
 8003ec6:	2d0c      	cmp	r5, #12
 8003ec8:	bf38      	it	cc
 8003eca:	250c      	movcc	r5, #12
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	4606      	mov	r6, r0
 8003ed0:	db01      	blt.n	8003ed6 <_malloc_r+0x1a>
 8003ed2:	42a9      	cmp	r1, r5
 8003ed4:	d903      	bls.n	8003ede <_malloc_r+0x22>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	2000      	movs	r0, #0
 8003edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ede:	f001 feab 	bl	8005c38 <__malloc_lock>
 8003ee2:	4921      	ldr	r1, [pc, #132]	; (8003f68 <_malloc_r+0xac>)
 8003ee4:	680a      	ldr	r2, [r1, #0]
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	b99c      	cbnz	r4, 8003f12 <_malloc_r+0x56>
 8003eea:	4f20      	ldr	r7, [pc, #128]	; (8003f6c <_malloc_r+0xb0>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	b923      	cbnz	r3, 8003efa <_malloc_r+0x3e>
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 fd34 	bl	8004960 <_sbrk_r>
 8003ef8:	6038      	str	r0, [r7, #0]
 8003efa:	4629      	mov	r1, r5
 8003efc:	4630      	mov	r0, r6
 8003efe:	f000 fd2f 	bl	8004960 <_sbrk_r>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d123      	bne.n	8003f4e <_malloc_r+0x92>
 8003f06:	230c      	movs	r3, #12
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f001 fe9a 	bl	8005c44 <__malloc_unlock>
 8003f10:	e7e3      	b.n	8003eda <_malloc_r+0x1e>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	1b5b      	subs	r3, r3, r5
 8003f16:	d417      	bmi.n	8003f48 <_malloc_r+0x8c>
 8003f18:	2b0b      	cmp	r3, #11
 8003f1a:	d903      	bls.n	8003f24 <_malloc_r+0x68>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	441c      	add	r4, r3
 8003f20:	6025      	str	r5, [r4, #0]
 8003f22:	e004      	b.n	8003f2e <_malloc_r+0x72>
 8003f24:	6863      	ldr	r3, [r4, #4]
 8003f26:	42a2      	cmp	r2, r4
 8003f28:	bf0c      	ite	eq
 8003f2a:	600b      	streq	r3, [r1, #0]
 8003f2c:	6053      	strne	r3, [r2, #4]
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f001 fe88 	bl	8005c44 <__malloc_unlock>
 8003f34:	f104 000b 	add.w	r0, r4, #11
 8003f38:	1d23      	adds	r3, r4, #4
 8003f3a:	f020 0007 	bic.w	r0, r0, #7
 8003f3e:	1ac2      	subs	r2, r0, r3
 8003f40:	d0cc      	beq.n	8003edc <_malloc_r+0x20>
 8003f42:	1a1b      	subs	r3, r3, r0
 8003f44:	50a3      	str	r3, [r4, r2]
 8003f46:	e7c9      	b.n	8003edc <_malloc_r+0x20>
 8003f48:	4622      	mov	r2, r4
 8003f4a:	6864      	ldr	r4, [r4, #4]
 8003f4c:	e7cc      	b.n	8003ee8 <_malloc_r+0x2c>
 8003f4e:	1cc4      	adds	r4, r0, #3
 8003f50:	f024 0403 	bic.w	r4, r4, #3
 8003f54:	42a0      	cmp	r0, r4
 8003f56:	d0e3      	beq.n	8003f20 <_malloc_r+0x64>
 8003f58:	1a21      	subs	r1, r4, r0
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f000 fd00 	bl	8004960 <_sbrk_r>
 8003f60:	3001      	adds	r0, #1
 8003f62:	d1dd      	bne.n	8003f20 <_malloc_r+0x64>
 8003f64:	e7cf      	b.n	8003f06 <_malloc_r+0x4a>
 8003f66:	bf00      	nop
 8003f68:	20000200 	.word	0x20000200
 8003f6c:	20000204 	.word	0x20000204

08003f70 <__cvt>:
 8003f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f74:	ec55 4b10 	vmov	r4, r5, d0
 8003f78:	2d00      	cmp	r5, #0
 8003f7a:	460e      	mov	r6, r1
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	462b      	mov	r3, r5
 8003f80:	bfbb      	ittet	lt
 8003f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f86:	461d      	movlt	r5, r3
 8003f88:	2300      	movge	r3, #0
 8003f8a:	232d      	movlt	r3, #45	; 0x2d
 8003f8c:	700b      	strb	r3, [r1, #0]
 8003f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f94:	4691      	mov	r9, r2
 8003f96:	f023 0820 	bic.w	r8, r3, #32
 8003f9a:	bfbc      	itt	lt
 8003f9c:	4622      	movlt	r2, r4
 8003f9e:	4614      	movlt	r4, r2
 8003fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fa4:	d005      	beq.n	8003fb2 <__cvt+0x42>
 8003fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003faa:	d100      	bne.n	8003fae <__cvt+0x3e>
 8003fac:	3601      	adds	r6, #1
 8003fae:	2102      	movs	r1, #2
 8003fb0:	e000      	b.n	8003fb4 <__cvt+0x44>
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	ab03      	add	r3, sp, #12
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	ab02      	add	r3, sp, #8
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	ec45 4b10 	vmov	d0, r4, r5
 8003fc0:	4653      	mov	r3, sl
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	f000 fe28 	bl	8004c18 <_dtoa_r>
 8003fc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fcc:	4607      	mov	r7, r0
 8003fce:	d102      	bne.n	8003fd6 <__cvt+0x66>
 8003fd0:	f019 0f01 	tst.w	r9, #1
 8003fd4:	d022      	beq.n	800401c <__cvt+0xac>
 8003fd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fda:	eb07 0906 	add.w	r9, r7, r6
 8003fde:	d110      	bne.n	8004002 <__cvt+0x92>
 8003fe0:	783b      	ldrb	r3, [r7, #0]
 8003fe2:	2b30      	cmp	r3, #48	; 0x30
 8003fe4:	d10a      	bne.n	8003ffc <__cvt+0x8c>
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4620      	mov	r0, r4
 8003fec:	4629      	mov	r1, r5
 8003fee:	f7fc fd9b 	bl	8000b28 <__aeabi_dcmpeq>
 8003ff2:	b918      	cbnz	r0, 8003ffc <__cvt+0x8c>
 8003ff4:	f1c6 0601 	rsb	r6, r6, #1
 8003ff8:	f8ca 6000 	str.w	r6, [sl]
 8003ffc:	f8da 3000 	ldr.w	r3, [sl]
 8004000:	4499      	add	r9, r3
 8004002:	2200      	movs	r2, #0
 8004004:	2300      	movs	r3, #0
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc fd8d 	bl	8000b28 <__aeabi_dcmpeq>
 800400e:	b108      	cbz	r0, 8004014 <__cvt+0xa4>
 8004010:	f8cd 900c 	str.w	r9, [sp, #12]
 8004014:	2230      	movs	r2, #48	; 0x30
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	454b      	cmp	r3, r9
 800401a:	d307      	bcc.n	800402c <__cvt+0xbc>
 800401c:	9b03      	ldr	r3, [sp, #12]
 800401e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004020:	1bdb      	subs	r3, r3, r7
 8004022:	4638      	mov	r0, r7
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	b004      	add	sp, #16
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	9103      	str	r1, [sp, #12]
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e7f0      	b.n	8004016 <__cvt+0xa6>

08004034 <__exponent>:
 8004034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004036:	4603      	mov	r3, r0
 8004038:	2900      	cmp	r1, #0
 800403a:	bfb8      	it	lt
 800403c:	4249      	neglt	r1, r1
 800403e:	f803 2b02 	strb.w	r2, [r3], #2
 8004042:	bfb4      	ite	lt
 8004044:	222d      	movlt	r2, #45	; 0x2d
 8004046:	222b      	movge	r2, #43	; 0x2b
 8004048:	2909      	cmp	r1, #9
 800404a:	7042      	strb	r2, [r0, #1]
 800404c:	dd2a      	ble.n	80040a4 <__exponent+0x70>
 800404e:	f10d 0407 	add.w	r4, sp, #7
 8004052:	46a4      	mov	ip, r4
 8004054:	270a      	movs	r7, #10
 8004056:	46a6      	mov	lr, r4
 8004058:	460a      	mov	r2, r1
 800405a:	fb91 f6f7 	sdiv	r6, r1, r7
 800405e:	fb07 1516 	mls	r5, r7, r6, r1
 8004062:	3530      	adds	r5, #48	; 0x30
 8004064:	2a63      	cmp	r2, #99	; 0x63
 8004066:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800406a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800406e:	4631      	mov	r1, r6
 8004070:	dcf1      	bgt.n	8004056 <__exponent+0x22>
 8004072:	3130      	adds	r1, #48	; 0x30
 8004074:	f1ae 0502 	sub.w	r5, lr, #2
 8004078:	f804 1c01 	strb.w	r1, [r4, #-1]
 800407c:	1c44      	adds	r4, r0, #1
 800407e:	4629      	mov	r1, r5
 8004080:	4561      	cmp	r1, ip
 8004082:	d30a      	bcc.n	800409a <__exponent+0x66>
 8004084:	f10d 0209 	add.w	r2, sp, #9
 8004088:	eba2 020e 	sub.w	r2, r2, lr
 800408c:	4565      	cmp	r5, ip
 800408e:	bf88      	it	hi
 8004090:	2200      	movhi	r2, #0
 8004092:	4413      	add	r3, r2
 8004094:	1a18      	subs	r0, r3, r0
 8004096:	b003      	add	sp, #12
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800409e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040a2:	e7ed      	b.n	8004080 <__exponent+0x4c>
 80040a4:	2330      	movs	r3, #48	; 0x30
 80040a6:	3130      	adds	r1, #48	; 0x30
 80040a8:	7083      	strb	r3, [r0, #2]
 80040aa:	70c1      	strb	r1, [r0, #3]
 80040ac:	1d03      	adds	r3, r0, #4
 80040ae:	e7f1      	b.n	8004094 <__exponent+0x60>

080040b0 <_printf_float>:
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	ed2d 8b02 	vpush	{d8}
 80040b8:	b08d      	sub	sp, #52	; 0x34
 80040ba:	460c      	mov	r4, r1
 80040bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040c0:	4616      	mov	r6, r2
 80040c2:	461f      	mov	r7, r3
 80040c4:	4605      	mov	r5, r0
 80040c6:	f001 fd4b 	bl	8005b60 <_localeconv_r>
 80040ca:	f8d0 a000 	ldr.w	sl, [r0]
 80040ce:	4650      	mov	r0, sl
 80040d0:	f7fc f8a8 	bl	8000224 <strlen>
 80040d4:	2300      	movs	r3, #0
 80040d6:	930a      	str	r3, [sp, #40]	; 0x28
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	9305      	str	r3, [sp, #20]
 80040dc:	f8d8 3000 	ldr.w	r3, [r8]
 80040e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80040e4:	3307      	adds	r3, #7
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	f103 0208 	add.w	r2, r3, #8
 80040ee:	f8c8 2000 	str.w	r2, [r8]
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80040fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004102:	9307      	str	r3, [sp, #28]
 8004104:	f8cd 8018 	str.w	r8, [sp, #24]
 8004108:	ee08 0a10 	vmov	s16, r0
 800410c:	4b9f      	ldr	r3, [pc, #636]	; (800438c <_printf_float+0x2dc>)
 800410e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004116:	f7fc fd39 	bl	8000b8c <__aeabi_dcmpun>
 800411a:	bb88      	cbnz	r0, 8004180 <_printf_float+0xd0>
 800411c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004120:	4b9a      	ldr	r3, [pc, #616]	; (800438c <_printf_float+0x2dc>)
 8004122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004126:	f7fc fd13 	bl	8000b50 <__aeabi_dcmple>
 800412a:	bb48      	cbnz	r0, 8004180 <_printf_float+0xd0>
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc fd02 	bl	8000b3c <__aeabi_dcmplt>
 8004138:	b110      	cbz	r0, 8004140 <_printf_float+0x90>
 800413a:	232d      	movs	r3, #45	; 0x2d
 800413c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004140:	4b93      	ldr	r3, [pc, #588]	; (8004390 <_printf_float+0x2e0>)
 8004142:	4894      	ldr	r0, [pc, #592]	; (8004394 <_printf_float+0x2e4>)
 8004144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004148:	bf94      	ite	ls
 800414a:	4698      	movls	r8, r3
 800414c:	4680      	movhi	r8, r0
 800414e:	2303      	movs	r3, #3
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	9b05      	ldr	r3, [sp, #20]
 8004154:	f023 0204 	bic.w	r2, r3, #4
 8004158:	6022      	str	r2, [r4, #0]
 800415a:	f04f 0900 	mov.w	r9, #0
 800415e:	9700      	str	r7, [sp, #0]
 8004160:	4633      	mov	r3, r6
 8004162:	aa0b      	add	r2, sp, #44	; 0x2c
 8004164:	4621      	mov	r1, r4
 8004166:	4628      	mov	r0, r5
 8004168:	f000 f9d8 	bl	800451c <_printf_common>
 800416c:	3001      	adds	r0, #1
 800416e:	f040 8090 	bne.w	8004292 <_printf_float+0x1e2>
 8004172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004176:	b00d      	add	sp, #52	; 0x34
 8004178:	ecbd 8b02 	vpop	{d8}
 800417c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	4640      	mov	r0, r8
 8004186:	4649      	mov	r1, r9
 8004188:	f7fc fd00 	bl	8000b8c <__aeabi_dcmpun>
 800418c:	b140      	cbz	r0, 80041a0 <_printf_float+0xf0>
 800418e:	464b      	mov	r3, r9
 8004190:	2b00      	cmp	r3, #0
 8004192:	bfbc      	itt	lt
 8004194:	232d      	movlt	r3, #45	; 0x2d
 8004196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800419a:	487f      	ldr	r0, [pc, #508]	; (8004398 <_printf_float+0x2e8>)
 800419c:	4b7f      	ldr	r3, [pc, #508]	; (800439c <_printf_float+0x2ec>)
 800419e:	e7d1      	b.n	8004144 <_printf_float+0x94>
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041a6:	9206      	str	r2, [sp, #24]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	d13f      	bne.n	800422c <_printf_float+0x17c>
 80041ac:	2306      	movs	r3, #6
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	9b05      	ldr	r3, [sp, #20]
 80041b2:	6861      	ldr	r1, [r4, #4]
 80041b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041b8:	2300      	movs	r3, #0
 80041ba:	9303      	str	r3, [sp, #12]
 80041bc:	ab0a      	add	r3, sp, #40	; 0x28
 80041be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041c2:	ab09      	add	r3, sp, #36	; 0x24
 80041c4:	ec49 8b10 	vmov	d0, r8, r9
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	6022      	str	r2, [r4, #0]
 80041cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041d0:	4628      	mov	r0, r5
 80041d2:	f7ff fecd 	bl	8003f70 <__cvt>
 80041d6:	9b06      	ldr	r3, [sp, #24]
 80041d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041da:	2b47      	cmp	r3, #71	; 0x47
 80041dc:	4680      	mov	r8, r0
 80041de:	d108      	bne.n	80041f2 <_printf_float+0x142>
 80041e0:	1cc8      	adds	r0, r1, #3
 80041e2:	db02      	blt.n	80041ea <_printf_float+0x13a>
 80041e4:	6863      	ldr	r3, [r4, #4]
 80041e6:	4299      	cmp	r1, r3
 80041e8:	dd41      	ble.n	800426e <_printf_float+0x1be>
 80041ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80041ee:	fa5f fb8b 	uxtb.w	fp, fp
 80041f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041f6:	d820      	bhi.n	800423a <_printf_float+0x18a>
 80041f8:	3901      	subs	r1, #1
 80041fa:	465a      	mov	r2, fp
 80041fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004200:	9109      	str	r1, [sp, #36]	; 0x24
 8004202:	f7ff ff17 	bl	8004034 <__exponent>
 8004206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004208:	1813      	adds	r3, r2, r0
 800420a:	2a01      	cmp	r2, #1
 800420c:	4681      	mov	r9, r0
 800420e:	6123      	str	r3, [r4, #16]
 8004210:	dc02      	bgt.n	8004218 <_printf_float+0x168>
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	07d2      	lsls	r2, r2, #31
 8004216:	d501      	bpl.n	800421c <_printf_float+0x16c>
 8004218:	3301      	adds	r3, #1
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004220:	2b00      	cmp	r3, #0
 8004222:	d09c      	beq.n	800415e <_printf_float+0xae>
 8004224:	232d      	movs	r3, #45	; 0x2d
 8004226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422a:	e798      	b.n	800415e <_printf_float+0xae>
 800422c:	9a06      	ldr	r2, [sp, #24]
 800422e:	2a47      	cmp	r2, #71	; 0x47
 8004230:	d1be      	bne.n	80041b0 <_printf_float+0x100>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1bc      	bne.n	80041b0 <_printf_float+0x100>
 8004236:	2301      	movs	r3, #1
 8004238:	e7b9      	b.n	80041ae <_printf_float+0xfe>
 800423a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800423e:	d118      	bne.n	8004272 <_printf_float+0x1c2>
 8004240:	2900      	cmp	r1, #0
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	dd0b      	ble.n	800425e <_printf_float+0x1ae>
 8004246:	6121      	str	r1, [r4, #16]
 8004248:	b913      	cbnz	r3, 8004250 <_printf_float+0x1a0>
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	07d0      	lsls	r0, r2, #31
 800424e:	d502      	bpl.n	8004256 <_printf_float+0x1a6>
 8004250:	3301      	adds	r3, #1
 8004252:	440b      	add	r3, r1
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	65a1      	str	r1, [r4, #88]	; 0x58
 8004258:	f04f 0900 	mov.w	r9, #0
 800425c:	e7de      	b.n	800421c <_printf_float+0x16c>
 800425e:	b913      	cbnz	r3, 8004266 <_printf_float+0x1b6>
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	07d2      	lsls	r2, r2, #31
 8004264:	d501      	bpl.n	800426a <_printf_float+0x1ba>
 8004266:	3302      	adds	r3, #2
 8004268:	e7f4      	b.n	8004254 <_printf_float+0x1a4>
 800426a:	2301      	movs	r3, #1
 800426c:	e7f2      	b.n	8004254 <_printf_float+0x1a4>
 800426e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004274:	4299      	cmp	r1, r3
 8004276:	db05      	blt.n	8004284 <_printf_float+0x1d4>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	6121      	str	r1, [r4, #16]
 800427c:	07d8      	lsls	r0, r3, #31
 800427e:	d5ea      	bpl.n	8004256 <_printf_float+0x1a6>
 8004280:	1c4b      	adds	r3, r1, #1
 8004282:	e7e7      	b.n	8004254 <_printf_float+0x1a4>
 8004284:	2900      	cmp	r1, #0
 8004286:	bfd4      	ite	le
 8004288:	f1c1 0202 	rsble	r2, r1, #2
 800428c:	2201      	movgt	r2, #1
 800428e:	4413      	add	r3, r2
 8004290:	e7e0      	b.n	8004254 <_printf_float+0x1a4>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	055a      	lsls	r2, r3, #21
 8004296:	d407      	bmi.n	80042a8 <_printf_float+0x1f8>
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	4642      	mov	r2, r8
 800429c:	4631      	mov	r1, r6
 800429e:	4628      	mov	r0, r5
 80042a0:	47b8      	blx	r7
 80042a2:	3001      	adds	r0, #1
 80042a4:	d12c      	bne.n	8004300 <_printf_float+0x250>
 80042a6:	e764      	b.n	8004172 <_printf_float+0xc2>
 80042a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042ac:	f240 80e0 	bls.w	8004470 <_printf_float+0x3c0>
 80042b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042b4:	2200      	movs	r2, #0
 80042b6:	2300      	movs	r3, #0
 80042b8:	f7fc fc36 	bl	8000b28 <__aeabi_dcmpeq>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d034      	beq.n	800432a <_printf_float+0x27a>
 80042c0:	4a37      	ldr	r2, [pc, #220]	; (80043a0 <_printf_float+0x2f0>)
 80042c2:	2301      	movs	r3, #1
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	f43f af51 	beq.w	8004172 <_printf_float+0xc2>
 80042d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042d4:	429a      	cmp	r2, r3
 80042d6:	db02      	blt.n	80042de <_printf_float+0x22e>
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	07d8      	lsls	r0, r3, #31
 80042dc:	d510      	bpl.n	8004300 <_printf_float+0x250>
 80042de:	ee18 3a10 	vmov	r3, s16
 80042e2:	4652      	mov	r2, sl
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f af41 	beq.w	8004172 <_printf_float+0xc2>
 80042f0:	f04f 0800 	mov.w	r8, #0
 80042f4:	f104 091a 	add.w	r9, r4, #26
 80042f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4543      	cmp	r3, r8
 80042fe:	dc09      	bgt.n	8004314 <_printf_float+0x264>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	079b      	lsls	r3, r3, #30
 8004304:	f100 8105 	bmi.w	8004512 <_printf_float+0x462>
 8004308:	68e0      	ldr	r0, [r4, #12]
 800430a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800430c:	4298      	cmp	r0, r3
 800430e:	bfb8      	it	lt
 8004310:	4618      	movlt	r0, r3
 8004312:	e730      	b.n	8004176 <_printf_float+0xc6>
 8004314:	2301      	movs	r3, #1
 8004316:	464a      	mov	r2, r9
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f af27 	beq.w	8004172 <_printf_float+0xc2>
 8004324:	f108 0801 	add.w	r8, r8, #1
 8004328:	e7e6      	b.n	80042f8 <_printf_float+0x248>
 800432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	dc39      	bgt.n	80043a4 <_printf_float+0x2f4>
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <_printf_float+0x2f0>)
 8004332:	2301      	movs	r3, #1
 8004334:	4631      	mov	r1, r6
 8004336:	4628      	mov	r0, r5
 8004338:	47b8      	blx	r7
 800433a:	3001      	adds	r0, #1
 800433c:	f43f af19 	beq.w	8004172 <_printf_float+0xc2>
 8004340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004344:	4313      	orrs	r3, r2
 8004346:	d102      	bne.n	800434e <_printf_float+0x29e>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	07d9      	lsls	r1, r3, #31
 800434c:	d5d8      	bpl.n	8004300 <_printf_float+0x250>
 800434e:	ee18 3a10 	vmov	r3, s16
 8004352:	4652      	mov	r2, sl
 8004354:	4631      	mov	r1, r6
 8004356:	4628      	mov	r0, r5
 8004358:	47b8      	blx	r7
 800435a:	3001      	adds	r0, #1
 800435c:	f43f af09 	beq.w	8004172 <_printf_float+0xc2>
 8004360:	f04f 0900 	mov.w	r9, #0
 8004364:	f104 0a1a 	add.w	sl, r4, #26
 8004368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436a:	425b      	negs	r3, r3
 800436c:	454b      	cmp	r3, r9
 800436e:	dc01      	bgt.n	8004374 <_printf_float+0x2c4>
 8004370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004372:	e792      	b.n	800429a <_printf_float+0x1ea>
 8004374:	2301      	movs	r3, #1
 8004376:	4652      	mov	r2, sl
 8004378:	4631      	mov	r1, r6
 800437a:	4628      	mov	r0, r5
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	f43f aef7 	beq.w	8004172 <_printf_float+0xc2>
 8004384:	f109 0901 	add.w	r9, r9, #1
 8004388:	e7ee      	b.n	8004368 <_printf_float+0x2b8>
 800438a:	bf00      	nop
 800438c:	7fefffff 	.word	0x7fefffff
 8004390:	08008208 	.word	0x08008208
 8004394:	0800820c 	.word	0x0800820c
 8004398:	08008214 	.word	0x08008214
 800439c:	08008210 	.word	0x08008210
 80043a0:	08008218 	.word	0x08008218
 80043a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bfa8      	it	ge
 80043ac:	461a      	movge	r2, r3
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	4691      	mov	r9, r2
 80043b2:	dc37      	bgt.n	8004424 <_printf_float+0x374>
 80043b4:	f04f 0b00 	mov.w	fp, #0
 80043b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043bc:	f104 021a 	add.w	r2, r4, #26
 80043c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	eba3 0309 	sub.w	r3, r3, r9
 80043c8:	455b      	cmp	r3, fp
 80043ca:	dc33      	bgt.n	8004434 <_printf_float+0x384>
 80043cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d0:	429a      	cmp	r2, r3
 80043d2:	db3b      	blt.n	800444c <_printf_float+0x39c>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	07da      	lsls	r2, r3, #31
 80043d8:	d438      	bmi.n	800444c <_printf_float+0x39c>
 80043da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043dc:	9b05      	ldr	r3, [sp, #20]
 80043de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	eba2 0901 	sub.w	r9, r2, r1
 80043e6:	4599      	cmp	r9, r3
 80043e8:	bfa8      	it	ge
 80043ea:	4699      	movge	r9, r3
 80043ec:	f1b9 0f00 	cmp.w	r9, #0
 80043f0:	dc35      	bgt.n	800445e <_printf_float+0x3ae>
 80043f2:	f04f 0800 	mov.w	r8, #0
 80043f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043fa:	f104 0a1a 	add.w	sl, r4, #26
 80043fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	eba3 0309 	sub.w	r3, r3, r9
 8004408:	4543      	cmp	r3, r8
 800440a:	f77f af79 	ble.w	8004300 <_printf_float+0x250>
 800440e:	2301      	movs	r3, #1
 8004410:	4652      	mov	r2, sl
 8004412:	4631      	mov	r1, r6
 8004414:	4628      	mov	r0, r5
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	f43f aeaa 	beq.w	8004172 <_printf_float+0xc2>
 800441e:	f108 0801 	add.w	r8, r8, #1
 8004422:	e7ec      	b.n	80043fe <_printf_float+0x34e>
 8004424:	4613      	mov	r3, r2
 8004426:	4631      	mov	r1, r6
 8004428:	4642      	mov	r2, r8
 800442a:	4628      	mov	r0, r5
 800442c:	47b8      	blx	r7
 800442e:	3001      	adds	r0, #1
 8004430:	d1c0      	bne.n	80043b4 <_printf_float+0x304>
 8004432:	e69e      	b.n	8004172 <_printf_float+0xc2>
 8004434:	2301      	movs	r3, #1
 8004436:	4631      	mov	r1, r6
 8004438:	4628      	mov	r0, r5
 800443a:	9205      	str	r2, [sp, #20]
 800443c:	47b8      	blx	r7
 800443e:	3001      	adds	r0, #1
 8004440:	f43f ae97 	beq.w	8004172 <_printf_float+0xc2>
 8004444:	9a05      	ldr	r2, [sp, #20]
 8004446:	f10b 0b01 	add.w	fp, fp, #1
 800444a:	e7b9      	b.n	80043c0 <_printf_float+0x310>
 800444c:	ee18 3a10 	vmov	r3, s16
 8004450:	4652      	mov	r2, sl
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	d1be      	bne.n	80043da <_printf_float+0x32a>
 800445c:	e689      	b.n	8004172 <_printf_float+0xc2>
 800445e:	9a05      	ldr	r2, [sp, #20]
 8004460:	464b      	mov	r3, r9
 8004462:	4442      	add	r2, r8
 8004464:	4631      	mov	r1, r6
 8004466:	4628      	mov	r0, r5
 8004468:	47b8      	blx	r7
 800446a:	3001      	adds	r0, #1
 800446c:	d1c1      	bne.n	80043f2 <_printf_float+0x342>
 800446e:	e680      	b.n	8004172 <_printf_float+0xc2>
 8004470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004472:	2a01      	cmp	r2, #1
 8004474:	dc01      	bgt.n	800447a <_printf_float+0x3ca>
 8004476:	07db      	lsls	r3, r3, #31
 8004478:	d538      	bpl.n	80044ec <_printf_float+0x43c>
 800447a:	2301      	movs	r3, #1
 800447c:	4642      	mov	r2, r8
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	47b8      	blx	r7
 8004484:	3001      	adds	r0, #1
 8004486:	f43f ae74 	beq.w	8004172 <_printf_float+0xc2>
 800448a:	ee18 3a10 	vmov	r3, s16
 800448e:	4652      	mov	r2, sl
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	f43f ae6b 	beq.w	8004172 <_printf_float+0xc2>
 800449c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044a0:	2200      	movs	r2, #0
 80044a2:	2300      	movs	r3, #0
 80044a4:	f7fc fb40 	bl	8000b28 <__aeabi_dcmpeq>
 80044a8:	b9d8      	cbnz	r0, 80044e2 <_printf_float+0x432>
 80044aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ac:	f108 0201 	add.w	r2, r8, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b8      	blx	r7
 80044b8:	3001      	adds	r0, #1
 80044ba:	d10e      	bne.n	80044da <_printf_float+0x42a>
 80044bc:	e659      	b.n	8004172 <_printf_float+0xc2>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	4631      	mov	r1, r6
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	f43f ae52 	beq.w	8004172 <_printf_float+0xc2>
 80044ce:	f108 0801 	add.w	r8, r8, #1
 80044d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4543      	cmp	r3, r8
 80044d8:	dcf1      	bgt.n	80044be <_printf_float+0x40e>
 80044da:	464b      	mov	r3, r9
 80044dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044e0:	e6dc      	b.n	800429c <_printf_float+0x1ec>
 80044e2:	f04f 0800 	mov.w	r8, #0
 80044e6:	f104 0a1a 	add.w	sl, r4, #26
 80044ea:	e7f2      	b.n	80044d2 <_printf_float+0x422>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4642      	mov	r2, r8
 80044f0:	e7df      	b.n	80044b2 <_printf_float+0x402>
 80044f2:	2301      	movs	r3, #1
 80044f4:	464a      	mov	r2, r9
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae38 	beq.w	8004172 <_printf_float+0xc2>
 8004502:	f108 0801 	add.w	r8, r8, #1
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800450a:	1a5b      	subs	r3, r3, r1
 800450c:	4543      	cmp	r3, r8
 800450e:	dcf0      	bgt.n	80044f2 <_printf_float+0x442>
 8004510:	e6fa      	b.n	8004308 <_printf_float+0x258>
 8004512:	f04f 0800 	mov.w	r8, #0
 8004516:	f104 0919 	add.w	r9, r4, #25
 800451a:	e7f4      	b.n	8004506 <_printf_float+0x456>

0800451c <_printf_common>:
 800451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	4616      	mov	r6, r2
 8004522:	4699      	mov	r9, r3
 8004524:	688a      	ldr	r2, [r1, #8]
 8004526:	690b      	ldr	r3, [r1, #16]
 8004528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800452c:	4293      	cmp	r3, r2
 800452e:	bfb8      	it	lt
 8004530:	4613      	movlt	r3, r2
 8004532:	6033      	str	r3, [r6, #0]
 8004534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004538:	4607      	mov	r7, r0
 800453a:	460c      	mov	r4, r1
 800453c:	b10a      	cbz	r2, 8004542 <_printf_common+0x26>
 800453e:	3301      	adds	r3, #1
 8004540:	6033      	str	r3, [r6, #0]
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	0699      	lsls	r1, r3, #26
 8004546:	bf42      	ittt	mi
 8004548:	6833      	ldrmi	r3, [r6, #0]
 800454a:	3302      	addmi	r3, #2
 800454c:	6033      	strmi	r3, [r6, #0]
 800454e:	6825      	ldr	r5, [r4, #0]
 8004550:	f015 0506 	ands.w	r5, r5, #6
 8004554:	d106      	bne.n	8004564 <_printf_common+0x48>
 8004556:	f104 0a19 	add.w	sl, r4, #25
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	6832      	ldr	r2, [r6, #0]
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	42ab      	cmp	r3, r5
 8004562:	dc26      	bgt.n	80045b2 <_printf_common+0x96>
 8004564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004568:	1e13      	subs	r3, r2, #0
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	bf18      	it	ne
 800456e:	2301      	movne	r3, #1
 8004570:	0692      	lsls	r2, r2, #26
 8004572:	d42b      	bmi.n	80045cc <_printf_common+0xb0>
 8004574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004578:	4649      	mov	r1, r9
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d01e      	beq.n	80045c0 <_printf_common+0xa4>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	68e5      	ldr	r5, [r4, #12]
 8004586:	6832      	ldr	r2, [r6, #0]
 8004588:	f003 0306 	and.w	r3, r3, #6
 800458c:	2b04      	cmp	r3, #4
 800458e:	bf08      	it	eq
 8004590:	1aad      	subeq	r5, r5, r2
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	6922      	ldr	r2, [r4, #16]
 8004596:	bf0c      	ite	eq
 8004598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800459c:	2500      	movne	r5, #0
 800459e:	4293      	cmp	r3, r2
 80045a0:	bfc4      	itt	gt
 80045a2:	1a9b      	subgt	r3, r3, r2
 80045a4:	18ed      	addgt	r5, r5, r3
 80045a6:	2600      	movs	r6, #0
 80045a8:	341a      	adds	r4, #26
 80045aa:	42b5      	cmp	r5, r6
 80045ac:	d11a      	bne.n	80045e4 <_printf_common+0xc8>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e008      	b.n	80045c4 <_printf_common+0xa8>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4652      	mov	r2, sl
 80045b6:	4649      	mov	r1, r9
 80045b8:	4638      	mov	r0, r7
 80045ba:	47c0      	blx	r8
 80045bc:	3001      	adds	r0, #1
 80045be:	d103      	bne.n	80045c8 <_printf_common+0xac>
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7c6      	b.n	800455a <_printf_common+0x3e>
 80045cc:	18e1      	adds	r1, r4, r3
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	2030      	movs	r0, #48	; 0x30
 80045d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045d6:	4422      	add	r2, r4
 80045d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e0:	3302      	adds	r3, #2
 80045e2:	e7c7      	b.n	8004574 <_printf_common+0x58>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4622      	mov	r2, r4
 80045e8:	4649      	mov	r1, r9
 80045ea:	4638      	mov	r0, r7
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d0e6      	beq.n	80045c0 <_printf_common+0xa4>
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7d9      	b.n	80045aa <_printf_common+0x8e>
	...

080045f8 <_printf_i>:
 80045f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	460c      	mov	r4, r1
 80045fe:	4691      	mov	r9, r2
 8004600:	7e27      	ldrb	r7, [r4, #24]
 8004602:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004604:	2f78      	cmp	r7, #120	; 0x78
 8004606:	4680      	mov	r8, r0
 8004608:	469a      	mov	sl, r3
 800460a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800460e:	d807      	bhi.n	8004620 <_printf_i+0x28>
 8004610:	2f62      	cmp	r7, #98	; 0x62
 8004612:	d80a      	bhi.n	800462a <_printf_i+0x32>
 8004614:	2f00      	cmp	r7, #0
 8004616:	f000 80d8 	beq.w	80047ca <_printf_i+0x1d2>
 800461a:	2f58      	cmp	r7, #88	; 0x58
 800461c:	f000 80a3 	beq.w	8004766 <_printf_i+0x16e>
 8004620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004628:	e03a      	b.n	80046a0 <_printf_i+0xa8>
 800462a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800462e:	2b15      	cmp	r3, #21
 8004630:	d8f6      	bhi.n	8004620 <_printf_i+0x28>
 8004632:	a001      	add	r0, pc, #4	; (adr r0, 8004638 <_printf_i+0x40>)
 8004634:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004638:	08004691 	.word	0x08004691
 800463c:	080046a5 	.word	0x080046a5
 8004640:	08004621 	.word	0x08004621
 8004644:	08004621 	.word	0x08004621
 8004648:	08004621 	.word	0x08004621
 800464c:	08004621 	.word	0x08004621
 8004650:	080046a5 	.word	0x080046a5
 8004654:	08004621 	.word	0x08004621
 8004658:	08004621 	.word	0x08004621
 800465c:	08004621 	.word	0x08004621
 8004660:	08004621 	.word	0x08004621
 8004664:	080047b1 	.word	0x080047b1
 8004668:	080046d5 	.word	0x080046d5
 800466c:	08004793 	.word	0x08004793
 8004670:	08004621 	.word	0x08004621
 8004674:	08004621 	.word	0x08004621
 8004678:	080047d3 	.word	0x080047d3
 800467c:	08004621 	.word	0x08004621
 8004680:	080046d5 	.word	0x080046d5
 8004684:	08004621 	.word	0x08004621
 8004688:	08004621 	.word	0x08004621
 800468c:	0800479b 	.word	0x0800479b
 8004690:	680b      	ldr	r3, [r1, #0]
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	600a      	str	r2, [r1, #0]
 8004698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800469c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0a3      	b.n	80047ec <_printf_i+0x1f4>
 80046a4:	6825      	ldr	r5, [r4, #0]
 80046a6:	6808      	ldr	r0, [r1, #0]
 80046a8:	062e      	lsls	r6, r5, #24
 80046aa:	f100 0304 	add.w	r3, r0, #4
 80046ae:	d50a      	bpl.n	80046c6 <_printf_i+0xce>
 80046b0:	6805      	ldr	r5, [r0, #0]
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	2d00      	cmp	r5, #0
 80046b6:	da03      	bge.n	80046c0 <_printf_i+0xc8>
 80046b8:	232d      	movs	r3, #45	; 0x2d
 80046ba:	426d      	negs	r5, r5
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c0:	485e      	ldr	r0, [pc, #376]	; (800483c <_printf_i+0x244>)
 80046c2:	230a      	movs	r3, #10
 80046c4:	e019      	b.n	80046fa <_printf_i+0x102>
 80046c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046ca:	6805      	ldr	r5, [r0, #0]
 80046cc:	600b      	str	r3, [r1, #0]
 80046ce:	bf18      	it	ne
 80046d0:	b22d      	sxthne	r5, r5
 80046d2:	e7ef      	b.n	80046b4 <_printf_i+0xbc>
 80046d4:	680b      	ldr	r3, [r1, #0]
 80046d6:	6825      	ldr	r5, [r4, #0]
 80046d8:	1d18      	adds	r0, r3, #4
 80046da:	6008      	str	r0, [r1, #0]
 80046dc:	0628      	lsls	r0, r5, #24
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0xec>
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	e002      	b.n	80046ea <_printf_i+0xf2>
 80046e4:	0669      	lsls	r1, r5, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0xe8>
 80046e8:	881d      	ldrh	r5, [r3, #0]
 80046ea:	4854      	ldr	r0, [pc, #336]	; (800483c <_printf_i+0x244>)
 80046ec:	2f6f      	cmp	r7, #111	; 0x6f
 80046ee:	bf0c      	ite	eq
 80046f0:	2308      	moveq	r3, #8
 80046f2:	230a      	movne	r3, #10
 80046f4:	2100      	movs	r1, #0
 80046f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046fa:	6866      	ldr	r6, [r4, #4]
 80046fc:	60a6      	str	r6, [r4, #8]
 80046fe:	2e00      	cmp	r6, #0
 8004700:	bfa2      	ittt	ge
 8004702:	6821      	ldrge	r1, [r4, #0]
 8004704:	f021 0104 	bicge.w	r1, r1, #4
 8004708:	6021      	strge	r1, [r4, #0]
 800470a:	b90d      	cbnz	r5, 8004710 <_printf_i+0x118>
 800470c:	2e00      	cmp	r6, #0
 800470e:	d04d      	beq.n	80047ac <_printf_i+0x1b4>
 8004710:	4616      	mov	r6, r2
 8004712:	fbb5 f1f3 	udiv	r1, r5, r3
 8004716:	fb03 5711 	mls	r7, r3, r1, r5
 800471a:	5dc7      	ldrb	r7, [r0, r7]
 800471c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004720:	462f      	mov	r7, r5
 8004722:	42bb      	cmp	r3, r7
 8004724:	460d      	mov	r5, r1
 8004726:	d9f4      	bls.n	8004712 <_printf_i+0x11a>
 8004728:	2b08      	cmp	r3, #8
 800472a:	d10b      	bne.n	8004744 <_printf_i+0x14c>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	07df      	lsls	r7, r3, #31
 8004730:	d508      	bpl.n	8004744 <_printf_i+0x14c>
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	6861      	ldr	r1, [r4, #4]
 8004736:	4299      	cmp	r1, r3
 8004738:	bfde      	ittt	le
 800473a:	2330      	movle	r3, #48	; 0x30
 800473c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004740:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004744:	1b92      	subs	r2, r2, r6
 8004746:	6122      	str	r2, [r4, #16]
 8004748:	f8cd a000 	str.w	sl, [sp]
 800474c:	464b      	mov	r3, r9
 800474e:	aa03      	add	r2, sp, #12
 8004750:	4621      	mov	r1, r4
 8004752:	4640      	mov	r0, r8
 8004754:	f7ff fee2 	bl	800451c <_printf_common>
 8004758:	3001      	adds	r0, #1
 800475a:	d14c      	bne.n	80047f6 <_printf_i+0x1fe>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004760:	b004      	add	sp, #16
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004766:	4835      	ldr	r0, [pc, #212]	; (800483c <_printf_i+0x244>)
 8004768:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	680e      	ldr	r6, [r1, #0]
 8004770:	061f      	lsls	r7, r3, #24
 8004772:	f856 5b04 	ldr.w	r5, [r6], #4
 8004776:	600e      	str	r6, [r1, #0]
 8004778:	d514      	bpl.n	80047a4 <_printf_i+0x1ac>
 800477a:	07d9      	lsls	r1, r3, #31
 800477c:	bf44      	itt	mi
 800477e:	f043 0320 	orrmi.w	r3, r3, #32
 8004782:	6023      	strmi	r3, [r4, #0]
 8004784:	b91d      	cbnz	r5, 800478e <_printf_i+0x196>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f023 0320 	bic.w	r3, r3, #32
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	2310      	movs	r3, #16
 8004790:	e7b0      	b.n	80046f4 <_printf_i+0xfc>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f043 0320 	orr.w	r3, r3, #32
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	2378      	movs	r3, #120	; 0x78
 800479c:	4828      	ldr	r0, [pc, #160]	; (8004840 <_printf_i+0x248>)
 800479e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047a2:	e7e3      	b.n	800476c <_printf_i+0x174>
 80047a4:	065e      	lsls	r6, r3, #25
 80047a6:	bf48      	it	mi
 80047a8:	b2ad      	uxthmi	r5, r5
 80047aa:	e7e6      	b.n	800477a <_printf_i+0x182>
 80047ac:	4616      	mov	r6, r2
 80047ae:	e7bb      	b.n	8004728 <_printf_i+0x130>
 80047b0:	680b      	ldr	r3, [r1, #0]
 80047b2:	6826      	ldr	r6, [r4, #0]
 80047b4:	6960      	ldr	r0, [r4, #20]
 80047b6:	1d1d      	adds	r5, r3, #4
 80047b8:	600d      	str	r5, [r1, #0]
 80047ba:	0635      	lsls	r5, r6, #24
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	d501      	bpl.n	80047c4 <_printf_i+0x1cc>
 80047c0:	6018      	str	r0, [r3, #0]
 80047c2:	e002      	b.n	80047ca <_printf_i+0x1d2>
 80047c4:	0671      	lsls	r1, r6, #25
 80047c6:	d5fb      	bpl.n	80047c0 <_printf_i+0x1c8>
 80047c8:	8018      	strh	r0, [r3, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	6123      	str	r3, [r4, #16]
 80047ce:	4616      	mov	r6, r2
 80047d0:	e7ba      	b.n	8004748 <_printf_i+0x150>
 80047d2:	680b      	ldr	r3, [r1, #0]
 80047d4:	1d1a      	adds	r2, r3, #4
 80047d6:	600a      	str	r2, [r1, #0]
 80047d8:	681e      	ldr	r6, [r3, #0]
 80047da:	6862      	ldr	r2, [r4, #4]
 80047dc:	2100      	movs	r1, #0
 80047de:	4630      	mov	r0, r6
 80047e0:	f7fb fd2e 	bl	8000240 <memchr>
 80047e4:	b108      	cbz	r0, 80047ea <_printf_i+0x1f2>
 80047e6:	1b80      	subs	r0, r0, r6
 80047e8:	6060      	str	r0, [r4, #4]
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	2300      	movs	r3, #0
 80047f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f4:	e7a8      	b.n	8004748 <_printf_i+0x150>
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	4632      	mov	r2, r6
 80047fa:	4649      	mov	r1, r9
 80047fc:	4640      	mov	r0, r8
 80047fe:	47d0      	blx	sl
 8004800:	3001      	adds	r0, #1
 8004802:	d0ab      	beq.n	800475c <_printf_i+0x164>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	079b      	lsls	r3, r3, #30
 8004808:	d413      	bmi.n	8004832 <_printf_i+0x23a>
 800480a:	68e0      	ldr	r0, [r4, #12]
 800480c:	9b03      	ldr	r3, [sp, #12]
 800480e:	4298      	cmp	r0, r3
 8004810:	bfb8      	it	lt
 8004812:	4618      	movlt	r0, r3
 8004814:	e7a4      	b.n	8004760 <_printf_i+0x168>
 8004816:	2301      	movs	r3, #1
 8004818:	4632      	mov	r2, r6
 800481a:	4649      	mov	r1, r9
 800481c:	4640      	mov	r0, r8
 800481e:	47d0      	blx	sl
 8004820:	3001      	adds	r0, #1
 8004822:	d09b      	beq.n	800475c <_printf_i+0x164>
 8004824:	3501      	adds	r5, #1
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	9903      	ldr	r1, [sp, #12]
 800482a:	1a5b      	subs	r3, r3, r1
 800482c:	42ab      	cmp	r3, r5
 800482e:	dcf2      	bgt.n	8004816 <_printf_i+0x21e>
 8004830:	e7eb      	b.n	800480a <_printf_i+0x212>
 8004832:	2500      	movs	r5, #0
 8004834:	f104 0619 	add.w	r6, r4, #25
 8004838:	e7f5      	b.n	8004826 <_printf_i+0x22e>
 800483a:	bf00      	nop
 800483c:	0800821a 	.word	0x0800821a
 8004840:	0800822b 	.word	0x0800822b

08004844 <iprintf>:
 8004844:	b40f      	push	{r0, r1, r2, r3}
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <iprintf+0x2c>)
 8004848:	b513      	push	{r0, r1, r4, lr}
 800484a:	681c      	ldr	r4, [r3, #0]
 800484c:	b124      	cbz	r4, 8004858 <iprintf+0x14>
 800484e:	69a3      	ldr	r3, [r4, #24]
 8004850:	b913      	cbnz	r3, 8004858 <iprintf+0x14>
 8004852:	4620      	mov	r0, r4
 8004854:	f001 f8e6 	bl	8005a24 <__sinit>
 8004858:	ab05      	add	r3, sp, #20
 800485a:	9a04      	ldr	r2, [sp, #16]
 800485c:	68a1      	ldr	r1, [r4, #8]
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	4620      	mov	r0, r4
 8004862:	f001 fd9d 	bl	80063a0 <_vfiprintf_r>
 8004866:	b002      	add	sp, #8
 8004868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800486c:	b004      	add	sp, #16
 800486e:	4770      	bx	lr
 8004870:	2000000c 	.word	0x2000000c

08004874 <_puts_r>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	460e      	mov	r6, r1
 8004878:	4605      	mov	r5, r0
 800487a:	b118      	cbz	r0, 8004884 <_puts_r+0x10>
 800487c:	6983      	ldr	r3, [r0, #24]
 800487e:	b90b      	cbnz	r3, 8004884 <_puts_r+0x10>
 8004880:	f001 f8d0 	bl	8005a24 <__sinit>
 8004884:	69ab      	ldr	r3, [r5, #24]
 8004886:	68ac      	ldr	r4, [r5, #8]
 8004888:	b913      	cbnz	r3, 8004890 <_puts_r+0x1c>
 800488a:	4628      	mov	r0, r5
 800488c:	f001 f8ca 	bl	8005a24 <__sinit>
 8004890:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <_puts_r+0xd0>)
 8004892:	429c      	cmp	r4, r3
 8004894:	d120      	bne.n	80048d8 <_puts_r+0x64>
 8004896:	686c      	ldr	r4, [r5, #4]
 8004898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800489a:	07db      	lsls	r3, r3, #31
 800489c:	d405      	bmi.n	80048aa <_puts_r+0x36>
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	0598      	lsls	r0, r3, #22
 80048a2:	d402      	bmi.n	80048aa <_puts_r+0x36>
 80048a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048a6:	f001 f960 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	0719      	lsls	r1, r3, #28
 80048ae:	d51d      	bpl.n	80048ec <_puts_r+0x78>
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	b1db      	cbz	r3, 80048ec <_puts_r+0x78>
 80048b4:	3e01      	subs	r6, #1
 80048b6:	68a3      	ldr	r3, [r4, #8]
 80048b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048bc:	3b01      	subs	r3, #1
 80048be:	60a3      	str	r3, [r4, #8]
 80048c0:	bb39      	cbnz	r1, 8004912 <_puts_r+0x9e>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	da38      	bge.n	8004938 <_puts_r+0xc4>
 80048c6:	4622      	mov	r2, r4
 80048c8:	210a      	movs	r1, #10
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 f858 	bl	8004980 <__swbuf_r>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d011      	beq.n	80048f8 <_puts_r+0x84>
 80048d4:	250a      	movs	r5, #10
 80048d6:	e011      	b.n	80048fc <_puts_r+0x88>
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <_puts_r+0xd4>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d101      	bne.n	80048e2 <_puts_r+0x6e>
 80048de:	68ac      	ldr	r4, [r5, #8]
 80048e0:	e7da      	b.n	8004898 <_puts_r+0x24>
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <_puts_r+0xd8>)
 80048e4:	429c      	cmp	r4, r3
 80048e6:	bf08      	it	eq
 80048e8:	68ec      	ldreq	r4, [r5, #12]
 80048ea:	e7d5      	b.n	8004898 <_puts_r+0x24>
 80048ec:	4621      	mov	r1, r4
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 f898 	bl	8004a24 <__swsetup_r>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d0dd      	beq.n	80048b4 <_puts_r+0x40>
 80048f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048fe:	07da      	lsls	r2, r3, #31
 8004900:	d405      	bmi.n	800490e <_puts_r+0x9a>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	059b      	lsls	r3, r3, #22
 8004906:	d402      	bmi.n	800490e <_puts_r+0x9a>
 8004908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490a:	f001 f92f 	bl	8005b6c <__retarget_lock_release_recursive>
 800490e:	4628      	mov	r0, r5
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	2b00      	cmp	r3, #0
 8004914:	da04      	bge.n	8004920 <_puts_r+0xac>
 8004916:	69a2      	ldr	r2, [r4, #24]
 8004918:	429a      	cmp	r2, r3
 800491a:	dc06      	bgt.n	800492a <_puts_r+0xb6>
 800491c:	290a      	cmp	r1, #10
 800491e:	d004      	beq.n	800492a <_puts_r+0xb6>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	7019      	strb	r1, [r3, #0]
 8004928:	e7c5      	b.n	80048b6 <_puts_r+0x42>
 800492a:	4622      	mov	r2, r4
 800492c:	4628      	mov	r0, r5
 800492e:	f000 f827 	bl	8004980 <__swbuf_r>
 8004932:	3001      	adds	r0, #1
 8004934:	d1bf      	bne.n	80048b6 <_puts_r+0x42>
 8004936:	e7df      	b.n	80048f8 <_puts_r+0x84>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	250a      	movs	r5, #10
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	6022      	str	r2, [r4, #0]
 8004940:	701d      	strb	r5, [r3, #0]
 8004942:	e7db      	b.n	80048fc <_puts_r+0x88>
 8004944:	080082f0 	.word	0x080082f0
 8004948:	08008310 	.word	0x08008310
 800494c:	080082d0 	.word	0x080082d0

08004950 <puts>:
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <puts+0xc>)
 8004952:	4601      	mov	r1, r0
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f7ff bf8d 	b.w	8004874 <_puts_r>
 800495a:	bf00      	nop
 800495c:	2000000c 	.word	0x2000000c

08004960 <_sbrk_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4d06      	ldr	r5, [pc, #24]	; (800497c <_sbrk_r+0x1c>)
 8004964:	2300      	movs	r3, #0
 8004966:	4604      	mov	r4, r0
 8004968:	4608      	mov	r0, r1
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	f7fe f972 	bl	8002c54 <_sbrk>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_sbrk_r+0x1a>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_sbrk_r+0x1a>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20000238 	.word	0x20000238

08004980 <__swbuf_r>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	460e      	mov	r6, r1
 8004984:	4614      	mov	r4, r2
 8004986:	4605      	mov	r5, r0
 8004988:	b118      	cbz	r0, 8004992 <__swbuf_r+0x12>
 800498a:	6983      	ldr	r3, [r0, #24]
 800498c:	b90b      	cbnz	r3, 8004992 <__swbuf_r+0x12>
 800498e:	f001 f849 	bl	8005a24 <__sinit>
 8004992:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <__swbuf_r+0x98>)
 8004994:	429c      	cmp	r4, r3
 8004996:	d12b      	bne.n	80049f0 <__swbuf_r+0x70>
 8004998:	686c      	ldr	r4, [r5, #4]
 800499a:	69a3      	ldr	r3, [r4, #24]
 800499c:	60a3      	str	r3, [r4, #8]
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	071a      	lsls	r2, r3, #28
 80049a2:	d52f      	bpl.n	8004a04 <__swbuf_r+0x84>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	b36b      	cbz	r3, 8004a04 <__swbuf_r+0x84>
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	1ac0      	subs	r0, r0, r3
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	b2f6      	uxtb	r6, r6
 80049b2:	4283      	cmp	r3, r0
 80049b4:	4637      	mov	r7, r6
 80049b6:	dc04      	bgt.n	80049c2 <__swbuf_r+0x42>
 80049b8:	4621      	mov	r1, r4
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 ff9e 	bl	80058fc <_fflush_r>
 80049c0:	bb30      	cbnz	r0, 8004a10 <__swbuf_r+0x90>
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	6022      	str	r2, [r4, #0]
 80049ce:	701e      	strb	r6, [r3, #0]
 80049d0:	6963      	ldr	r3, [r4, #20]
 80049d2:	3001      	adds	r0, #1
 80049d4:	4283      	cmp	r3, r0
 80049d6:	d004      	beq.n	80049e2 <__swbuf_r+0x62>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	07db      	lsls	r3, r3, #31
 80049dc:	d506      	bpl.n	80049ec <__swbuf_r+0x6c>
 80049de:	2e0a      	cmp	r6, #10
 80049e0:	d104      	bne.n	80049ec <__swbuf_r+0x6c>
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 ff89 	bl	80058fc <_fflush_r>
 80049ea:	b988      	cbnz	r0, 8004a10 <__swbuf_r+0x90>
 80049ec:	4638      	mov	r0, r7
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <__swbuf_r+0x9c>)
 80049f2:	429c      	cmp	r4, r3
 80049f4:	d101      	bne.n	80049fa <__swbuf_r+0x7a>
 80049f6:	68ac      	ldr	r4, [r5, #8]
 80049f8:	e7cf      	b.n	800499a <__swbuf_r+0x1a>
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <__swbuf_r+0xa0>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	bf08      	it	eq
 8004a00:	68ec      	ldreq	r4, [r5, #12]
 8004a02:	e7ca      	b.n	800499a <__swbuf_r+0x1a>
 8004a04:	4621      	mov	r1, r4
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 f80c 	bl	8004a24 <__swsetup_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0cb      	beq.n	80049a8 <__swbuf_r+0x28>
 8004a10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a14:	e7ea      	b.n	80049ec <__swbuf_r+0x6c>
 8004a16:	bf00      	nop
 8004a18:	080082f0 	.word	0x080082f0
 8004a1c:	08008310 	.word	0x08008310
 8004a20:	080082d0 	.word	0x080082d0

08004a24 <__swsetup_r>:
 8004a24:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <__swsetup_r+0xcc>)
 8004a26:	b570      	push	{r4, r5, r6, lr}
 8004a28:	681d      	ldr	r5, [r3, #0]
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	b125      	cbz	r5, 8004a3a <__swsetup_r+0x16>
 8004a30:	69ab      	ldr	r3, [r5, #24]
 8004a32:	b913      	cbnz	r3, 8004a3a <__swsetup_r+0x16>
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 fff5 	bl	8005a24 <__sinit>
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <__swsetup_r+0xd0>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	d10f      	bne.n	8004a60 <__swsetup_r+0x3c>
 8004a40:	686c      	ldr	r4, [r5, #4]
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a48:	0719      	lsls	r1, r3, #28
 8004a4a:	d42c      	bmi.n	8004aa6 <__swsetup_r+0x82>
 8004a4c:	06dd      	lsls	r5, r3, #27
 8004a4e:	d411      	bmi.n	8004a74 <__swsetup_r+0x50>
 8004a50:	2309      	movs	r3, #9
 8004a52:	6033      	str	r3, [r6, #0]
 8004a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a5e:	e03e      	b.n	8004ade <__swsetup_r+0xba>
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <__swsetup_r+0xd4>)
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d101      	bne.n	8004a6a <__swsetup_r+0x46>
 8004a66:	68ac      	ldr	r4, [r5, #8]
 8004a68:	e7eb      	b.n	8004a42 <__swsetup_r+0x1e>
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <__swsetup_r+0xd8>)
 8004a6c:	429c      	cmp	r4, r3
 8004a6e:	bf08      	it	eq
 8004a70:	68ec      	ldreq	r4, [r5, #12]
 8004a72:	e7e6      	b.n	8004a42 <__swsetup_r+0x1e>
 8004a74:	0758      	lsls	r0, r3, #29
 8004a76:	d512      	bpl.n	8004a9e <__swsetup_r+0x7a>
 8004a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a7a:	b141      	cbz	r1, 8004a8e <__swsetup_r+0x6a>
 8004a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d002      	beq.n	8004a8a <__swsetup_r+0x66>
 8004a84:	4630      	mov	r0, r6
 8004a86:	f7ff f9c9 	bl	8003e1c <_free_r>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	2300      	movs	r3, #0
 8004a98:	6063      	str	r3, [r4, #4]
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f043 0308 	orr.w	r3, r3, #8
 8004aa4:	81a3      	strh	r3, [r4, #12]
 8004aa6:	6923      	ldr	r3, [r4, #16]
 8004aa8:	b94b      	cbnz	r3, 8004abe <__swsetup_r+0x9a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d003      	beq.n	8004abe <__swsetup_r+0x9a>
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f001 f87d 	bl	8005bb8 <__smakebuf_r>
 8004abe:	89a0      	ldrh	r0, [r4, #12]
 8004ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ac4:	f010 0301 	ands.w	r3, r0, #1
 8004ac8:	d00a      	beq.n	8004ae0 <__swsetup_r+0xbc>
 8004aca:	2300      	movs	r3, #0
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	6963      	ldr	r3, [r4, #20]
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	61a3      	str	r3, [r4, #24]
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	b943      	cbnz	r3, 8004aea <__swsetup_r+0xc6>
 8004ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004adc:	d1ba      	bne.n	8004a54 <__swsetup_r+0x30>
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	0781      	lsls	r1, r0, #30
 8004ae2:	bf58      	it	pl
 8004ae4:	6963      	ldrpl	r3, [r4, #20]
 8004ae6:	60a3      	str	r3, [r4, #8]
 8004ae8:	e7f4      	b.n	8004ad4 <__swsetup_r+0xb0>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e7f7      	b.n	8004ade <__swsetup_r+0xba>
 8004aee:	bf00      	nop
 8004af0:	2000000c 	.word	0x2000000c
 8004af4:	080082f0 	.word	0x080082f0
 8004af8:	08008310 	.word	0x08008310
 8004afc:	080082d0 	.word	0x080082d0

08004b00 <quorem>:
 8004b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	6903      	ldr	r3, [r0, #16]
 8004b06:	690c      	ldr	r4, [r1, #16]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	f2c0 8081 	blt.w	8004c12 <quorem+0x112>
 8004b10:	3c01      	subs	r4, #1
 8004b12:	f101 0814 	add.w	r8, r1, #20
 8004b16:	f100 0514 	add.w	r5, r0, #20
 8004b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b38:	d331      	bcc.n	8004b9e <quorem+0x9e>
 8004b3a:	f04f 0e00 	mov.w	lr, #0
 8004b3e:	4640      	mov	r0, r8
 8004b40:	46ac      	mov	ip, r5
 8004b42:	46f2      	mov	sl, lr
 8004b44:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b48:	b293      	uxth	r3, r2
 8004b4a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	ebaa 0303 	sub.w	r3, sl, r3
 8004b58:	0c12      	lsrs	r2, r2, #16
 8004b5a:	f8dc a000 	ldr.w	sl, [ip]
 8004b5e:	fb06 e202 	mla	r2, r6, r2, lr
 8004b62:	fa13 f38a 	uxtah	r3, r3, sl
 8004b66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b6a:	fa1f fa82 	uxth.w	sl, r2
 8004b6e:	f8dc 2000 	ldr.w	r2, [ip]
 8004b72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004b76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b80:	4581      	cmp	r9, r0
 8004b82:	f84c 3b04 	str.w	r3, [ip], #4
 8004b86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b8a:	d2db      	bcs.n	8004b44 <quorem+0x44>
 8004b8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b90:	b92b      	cbnz	r3, 8004b9e <quorem+0x9e>
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	3b04      	subs	r3, #4
 8004b96:	429d      	cmp	r5, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	d32e      	bcc.n	8004bfa <quorem+0xfa>
 8004b9c:	613c      	str	r4, [r7, #16]
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f001 fad4 	bl	800614c <__mcmp>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	db24      	blt.n	8004bf2 <quorem+0xf2>
 8004ba8:	3601      	adds	r6, #1
 8004baa:	4628      	mov	r0, r5
 8004bac:	f04f 0c00 	mov.w	ip, #0
 8004bb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bb4:	f8d0 e000 	ldr.w	lr, [r0]
 8004bb8:	b293      	uxth	r3, r2
 8004bba:	ebac 0303 	sub.w	r3, ip, r3
 8004bbe:	0c12      	lsrs	r2, r2, #16
 8004bc0:	fa13 f38e 	uxtah	r3, r3, lr
 8004bc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd2:	45c1      	cmp	r9, r8
 8004bd4:	f840 3b04 	str.w	r3, [r0], #4
 8004bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bdc:	d2e8      	bcs.n	8004bb0 <quorem+0xb0>
 8004bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004be6:	b922      	cbnz	r2, 8004bf2 <quorem+0xf2>
 8004be8:	3b04      	subs	r3, #4
 8004bea:	429d      	cmp	r5, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	d30a      	bcc.n	8004c06 <quorem+0x106>
 8004bf0:	613c      	str	r4, [r7, #16]
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	b003      	add	sp, #12
 8004bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	3b04      	subs	r3, #4
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d1cc      	bne.n	8004b9c <quorem+0x9c>
 8004c02:	3c01      	subs	r4, #1
 8004c04:	e7c7      	b.n	8004b96 <quorem+0x96>
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <quorem+0xf0>
 8004c0e:	3c01      	subs	r4, #1
 8004c10:	e7eb      	b.n	8004bea <quorem+0xea>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e7ee      	b.n	8004bf4 <quorem+0xf4>
	...

08004c18 <_dtoa_r>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	ed2d 8b02 	vpush	{d8}
 8004c20:	ec57 6b10 	vmov	r6, r7, d0
 8004c24:	b095      	sub	sp, #84	; 0x54
 8004c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c2c:	9105      	str	r1, [sp, #20]
 8004c2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c32:	4604      	mov	r4, r0
 8004c34:	9209      	str	r2, [sp, #36]	; 0x24
 8004c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c38:	b975      	cbnz	r5, 8004c58 <_dtoa_r+0x40>
 8004c3a:	2010      	movs	r0, #16
 8004c3c:	f7ff f8b8 	bl	8003db0 <malloc>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6260      	str	r0, [r4, #36]	; 0x24
 8004c44:	b920      	cbnz	r0, 8004c50 <_dtoa_r+0x38>
 8004c46:	4bb2      	ldr	r3, [pc, #712]	; (8004f10 <_dtoa_r+0x2f8>)
 8004c48:	21ea      	movs	r1, #234	; 0xea
 8004c4a:	48b2      	ldr	r0, [pc, #712]	; (8004f14 <_dtoa_r+0x2fc>)
 8004c4c:	f001 fd2e 	bl	80066ac <__assert_func>
 8004c50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c54:	6005      	str	r5, [r0, #0]
 8004c56:	60c5      	str	r5, [r0, #12]
 8004c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	b151      	cbz	r1, 8004c74 <_dtoa_r+0x5c>
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	604a      	str	r2, [r1, #4]
 8004c62:	2301      	movs	r3, #1
 8004c64:	4093      	lsls	r3, r2
 8004c66:	608b      	str	r3, [r1, #8]
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f001 f831 	bl	8005cd0 <_Bfree>
 8004c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	1e3b      	subs	r3, r7, #0
 8004c76:	bfb9      	ittee	lt
 8004c78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c7c:	9303      	strlt	r3, [sp, #12]
 8004c7e:	2300      	movge	r3, #0
 8004c80:	f8c8 3000 	strge.w	r3, [r8]
 8004c84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004c88:	4ba3      	ldr	r3, [pc, #652]	; (8004f18 <_dtoa_r+0x300>)
 8004c8a:	bfbc      	itt	lt
 8004c8c:	2201      	movlt	r2, #1
 8004c8e:	f8c8 2000 	strlt.w	r2, [r8]
 8004c92:	ea33 0309 	bics.w	r3, r3, r9
 8004c96:	d11b      	bne.n	8004cd0 <_dtoa_r+0xb8>
 8004c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ca4:	4333      	orrs	r3, r6
 8004ca6:	f000 857a 	beq.w	800579e <_dtoa_r+0xb86>
 8004caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cac:	b963      	cbnz	r3, 8004cc8 <_dtoa_r+0xb0>
 8004cae:	4b9b      	ldr	r3, [pc, #620]	; (8004f1c <_dtoa_r+0x304>)
 8004cb0:	e024      	b.n	8004cfc <_dtoa_r+0xe4>
 8004cb2:	4b9b      	ldr	r3, [pc, #620]	; (8004f20 <_dtoa_r+0x308>)
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	9800      	ldr	r0, [sp, #0]
 8004cbe:	b015      	add	sp, #84	; 0x54
 8004cc0:	ecbd 8b02 	vpop	{d8}
 8004cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc8:	4b94      	ldr	r3, [pc, #592]	; (8004f1c <_dtoa_r+0x304>)
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	3303      	adds	r3, #3
 8004cce:	e7f3      	b.n	8004cb8 <_dtoa_r+0xa0>
 8004cd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	ec51 0b17 	vmov	r0, r1, d7
 8004cda:	2300      	movs	r3, #0
 8004cdc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004ce0:	f7fb ff22 	bl	8000b28 <__aeabi_dcmpeq>
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	b158      	cbz	r0, 8004d00 <_dtoa_r+0xe8>
 8004ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cea:	2301      	movs	r3, #1
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8551 	beq.w	8005798 <_dtoa_r+0xb80>
 8004cf6:	488b      	ldr	r0, [pc, #556]	; (8004f24 <_dtoa_r+0x30c>)
 8004cf8:	6018      	str	r0, [r3, #0]
 8004cfa:	1e43      	subs	r3, r0, #1
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	e7dd      	b.n	8004cbc <_dtoa_r+0xa4>
 8004d00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004d04:	aa12      	add	r2, sp, #72	; 0x48
 8004d06:	a913      	add	r1, sp, #76	; 0x4c
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f001 fac3 	bl	8006294 <__d2b>
 8004d0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d12:	4683      	mov	fp, r0
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	d07c      	beq.n	8004e12 <_dtoa_r+0x1fa>
 8004d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <_dtoa_r+0x310>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	4630      	mov	r0, r6
 8004d38:	4639      	mov	r1, r7
 8004d3a:	f7fb fad5 	bl	80002e8 <__aeabi_dsub>
 8004d3e:	a36e      	add	r3, pc, #440	; (adr r3, 8004ef8 <_dtoa_r+0x2e0>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fc88 	bl	8000658 <__aeabi_dmul>
 8004d48:	a36d      	add	r3, pc, #436	; (adr r3, 8004f00 <_dtoa_r+0x2e8>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb facd 	bl	80002ec <__adddf3>
 8004d52:	4606      	mov	r6, r0
 8004d54:	4628      	mov	r0, r5
 8004d56:	460f      	mov	r7, r1
 8004d58:	f7fb fc14 	bl	8000584 <__aeabi_i2d>
 8004d5c:	a36a      	add	r3, pc, #424	; (adr r3, 8004f08 <_dtoa_r+0x2f0>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb fc79 	bl	8000658 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	f7fb fabd 	bl	80002ec <__adddf3>
 8004d72:	4606      	mov	r6, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	f7fb ff1f 	bl	8000bb8 <__aeabi_d2iz>
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4682      	mov	sl, r0
 8004d7e:	2300      	movs	r3, #0
 8004d80:	4630      	mov	r0, r6
 8004d82:	4639      	mov	r1, r7
 8004d84:	f7fb feda 	bl	8000b3c <__aeabi_dcmplt>
 8004d88:	b148      	cbz	r0, 8004d9e <_dtoa_r+0x186>
 8004d8a:	4650      	mov	r0, sl
 8004d8c:	f7fb fbfa 	bl	8000584 <__aeabi_i2d>
 8004d90:	4632      	mov	r2, r6
 8004d92:	463b      	mov	r3, r7
 8004d94:	f7fb fec8 	bl	8000b28 <__aeabi_dcmpeq>
 8004d98:	b908      	cbnz	r0, 8004d9e <_dtoa_r+0x186>
 8004d9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d9e:	f1ba 0f16 	cmp.w	sl, #22
 8004da2:	d854      	bhi.n	8004e4e <_dtoa_r+0x236>
 8004da4:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <_dtoa_r+0x314>)
 8004da6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004db2:	f7fb fec3 	bl	8000b3c <__aeabi_dcmplt>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d04b      	beq.n	8004e52 <_dtoa_r+0x23a>
 8004dba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8004dc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dc4:	1b5d      	subs	r5, r3, r5
 8004dc6:	1e6b      	subs	r3, r5, #1
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	bf43      	ittte	mi
 8004dcc:	2300      	movmi	r3, #0
 8004dce:	f1c5 0801 	rsbmi	r8, r5, #1
 8004dd2:	9304      	strmi	r3, [sp, #16]
 8004dd4:	f04f 0800 	movpl.w	r8, #0
 8004dd8:	f1ba 0f00 	cmp.w	sl, #0
 8004ddc:	db3b      	blt.n	8004e56 <_dtoa_r+0x23e>
 8004dde:	9b04      	ldr	r3, [sp, #16]
 8004de0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004de4:	4453      	add	r3, sl
 8004de6:	9304      	str	r3, [sp, #16]
 8004de8:	2300      	movs	r3, #0
 8004dea:	9306      	str	r3, [sp, #24]
 8004dec:	9b05      	ldr	r3, [sp, #20]
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d869      	bhi.n	8004ec6 <_dtoa_r+0x2ae>
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	bfc4      	itt	gt
 8004df6:	3b04      	subgt	r3, #4
 8004df8:	9305      	strgt	r3, [sp, #20]
 8004dfa:	9b05      	ldr	r3, [sp, #20]
 8004dfc:	f1a3 0302 	sub.w	r3, r3, #2
 8004e00:	bfcc      	ite	gt
 8004e02:	2500      	movgt	r5, #0
 8004e04:	2501      	movle	r5, #1
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d869      	bhi.n	8004ede <_dtoa_r+0x2c6>
 8004e0a:	e8df f003 	tbb	[pc, r3]
 8004e0e:	4e2c      	.short	0x4e2c
 8004e10:	5a4c      	.short	0x5a4c
 8004e12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e16:	441d      	add	r5, r3
 8004e18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	bfc1      	itttt	gt
 8004e20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e28:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e30:	bfda      	itte	le
 8004e32:	f1c3 0320 	rsble	r3, r3, #32
 8004e36:	fa06 f003 	lslle.w	r0, r6, r3
 8004e3a:	4318      	orrgt	r0, r3
 8004e3c:	f7fb fb92 	bl	8000564 <__aeabi_ui2d>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4606      	mov	r6, r0
 8004e44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e48:	3d01      	subs	r5, #1
 8004e4a:	9310      	str	r3, [sp, #64]	; 0x40
 8004e4c:	e771      	b.n	8004d32 <_dtoa_r+0x11a>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e7b6      	b.n	8004dc0 <_dtoa_r+0x1a8>
 8004e52:	900e      	str	r0, [sp, #56]	; 0x38
 8004e54:	e7b5      	b.n	8004dc2 <_dtoa_r+0x1aa>
 8004e56:	f1ca 0300 	rsb	r3, sl, #0
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	eba8 080a 	sub.w	r8, r8, sl
 8004e62:	930d      	str	r3, [sp, #52]	; 0x34
 8004e64:	e7c2      	b.n	8004dec <_dtoa_r+0x1d4>
 8004e66:	2300      	movs	r3, #0
 8004e68:	9308      	str	r3, [sp, #32]
 8004e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	dc39      	bgt.n	8004ee4 <_dtoa_r+0x2cc>
 8004e70:	f04f 0901 	mov.w	r9, #1
 8004e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e78:	464b      	mov	r3, r9
 8004e7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e80:	2200      	movs	r2, #0
 8004e82:	6042      	str	r2, [r0, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	f102 0614 	add.w	r6, r2, #20
 8004e8a:	429e      	cmp	r6, r3
 8004e8c:	6841      	ldr	r1, [r0, #4]
 8004e8e:	d92f      	bls.n	8004ef0 <_dtoa_r+0x2d8>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fedd 	bl	8005c50 <_Balloc>
 8004e96:	9000      	str	r0, [sp, #0]
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d14b      	bne.n	8004f34 <_dtoa_r+0x31c>
 8004e9c:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <_dtoa_r+0x318>)
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ea4:	e6d1      	b.n	8004c4a <_dtoa_r+0x32>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e7de      	b.n	8004e68 <_dtoa_r+0x250>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9308      	str	r3, [sp, #32]
 8004eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb0:	eb0a 0903 	add.w	r9, sl, r3
 8004eb4:	f109 0301 	add.w	r3, r9, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	bfb8      	it	lt
 8004ebe:	2301      	movlt	r3, #1
 8004ec0:	e7dd      	b.n	8004e7e <_dtoa_r+0x266>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e7f2      	b.n	8004eac <_dtoa_r+0x294>
 8004ec6:	2501      	movs	r5, #1
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9305      	str	r3, [sp, #20]
 8004ecc:	9508      	str	r5, [sp, #32]
 8004ece:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ed8:	2312      	movs	r3, #18
 8004eda:	9209      	str	r2, [sp, #36]	; 0x24
 8004edc:	e7cf      	b.n	8004e7e <_dtoa_r+0x266>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	9308      	str	r3, [sp, #32]
 8004ee2:	e7f4      	b.n	8004ece <_dtoa_r+0x2b6>
 8004ee4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004ee8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004eec:	464b      	mov	r3, r9
 8004eee:	e7c6      	b.n	8004e7e <_dtoa_r+0x266>
 8004ef0:	3101      	adds	r1, #1
 8004ef2:	6041      	str	r1, [r0, #4]
 8004ef4:	0052      	lsls	r2, r2, #1
 8004ef6:	e7c6      	b.n	8004e86 <_dtoa_r+0x26e>
 8004ef8:	636f4361 	.word	0x636f4361
 8004efc:	3fd287a7 	.word	0x3fd287a7
 8004f00:	8b60c8b3 	.word	0x8b60c8b3
 8004f04:	3fc68a28 	.word	0x3fc68a28
 8004f08:	509f79fb 	.word	0x509f79fb
 8004f0c:	3fd34413 	.word	0x3fd34413
 8004f10:	08008249 	.word	0x08008249
 8004f14:	08008260 	.word	0x08008260
 8004f18:	7ff00000 	.word	0x7ff00000
 8004f1c:	08008245 	.word	0x08008245
 8004f20:	0800823c 	.word	0x0800823c
 8004f24:	08008219 	.word	0x08008219
 8004f28:	3ff80000 	.word	0x3ff80000
 8004f2c:	080083b8 	.word	0x080083b8
 8004f30:	080082bf 	.word	0x080082bf
 8004f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f36:	9a00      	ldr	r2, [sp, #0]
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	2b0e      	cmp	r3, #14
 8004f3e:	f200 80ad 	bhi.w	800509c <_dtoa_r+0x484>
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	f000 80aa 	beq.w	800509c <_dtoa_r+0x484>
 8004f48:	f1ba 0f00 	cmp.w	sl, #0
 8004f4c:	dd36      	ble.n	8004fbc <_dtoa_r+0x3a4>
 8004f4e:	4ac3      	ldr	r2, [pc, #780]	; (800525c <_dtoa_r+0x644>)
 8004f50:	f00a 030f 	and.w	r3, sl, #15
 8004f54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f58:	ed93 7b00 	vldr	d7, [r3]
 8004f5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004f64:	eeb0 8a47 	vmov.f32	s16, s14
 8004f68:	eef0 8a67 	vmov.f32	s17, s15
 8004f6c:	d016      	beq.n	8004f9c <_dtoa_r+0x384>
 8004f6e:	4bbc      	ldr	r3, [pc, #752]	; (8005260 <_dtoa_r+0x648>)
 8004f70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f78:	f7fb fc98 	bl	80008ac <__aeabi_ddiv>
 8004f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f80:	f007 070f 	and.w	r7, r7, #15
 8004f84:	2503      	movs	r5, #3
 8004f86:	4eb6      	ldr	r6, [pc, #728]	; (8005260 <_dtoa_r+0x648>)
 8004f88:	b957      	cbnz	r7, 8004fa0 <_dtoa_r+0x388>
 8004f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f8e:	ec53 2b18 	vmov	r2, r3, d8
 8004f92:	f7fb fc8b 	bl	80008ac <__aeabi_ddiv>
 8004f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9a:	e029      	b.n	8004ff0 <_dtoa_r+0x3d8>
 8004f9c:	2502      	movs	r5, #2
 8004f9e:	e7f2      	b.n	8004f86 <_dtoa_r+0x36e>
 8004fa0:	07f9      	lsls	r1, r7, #31
 8004fa2:	d508      	bpl.n	8004fb6 <_dtoa_r+0x39e>
 8004fa4:	ec51 0b18 	vmov	r0, r1, d8
 8004fa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fac:	f7fb fb54 	bl	8000658 <__aeabi_dmul>
 8004fb0:	ec41 0b18 	vmov	d8, r0, r1
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	107f      	asrs	r7, r7, #1
 8004fb8:	3608      	adds	r6, #8
 8004fba:	e7e5      	b.n	8004f88 <_dtoa_r+0x370>
 8004fbc:	f000 80a6 	beq.w	800510c <_dtoa_r+0x4f4>
 8004fc0:	f1ca 0600 	rsb	r6, sl, #0
 8004fc4:	4ba5      	ldr	r3, [pc, #660]	; (800525c <_dtoa_r+0x644>)
 8004fc6:	4fa6      	ldr	r7, [pc, #664]	; (8005260 <_dtoa_r+0x648>)
 8004fc8:	f006 020f 	and.w	r2, r6, #15
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fd8:	f7fb fb3e 	bl	8000658 <__aeabi_dmul>
 8004fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe0:	1136      	asrs	r6, r6, #4
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2502      	movs	r5, #2
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	f040 8085 	bne.w	80050f6 <_dtoa_r+0x4de>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1d2      	bne.n	8004f96 <_dtoa_r+0x37e>
 8004ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 808c 	beq.w	8005110 <_dtoa_r+0x4f8>
 8004ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ffc:	4b99      	ldr	r3, [pc, #612]	; (8005264 <_dtoa_r+0x64c>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	4630      	mov	r0, r6
 8005002:	4639      	mov	r1, r7
 8005004:	f7fb fd9a 	bl	8000b3c <__aeabi_dcmplt>
 8005008:	2800      	cmp	r0, #0
 800500a:	f000 8081 	beq.w	8005110 <_dtoa_r+0x4f8>
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d07d      	beq.n	8005110 <_dtoa_r+0x4f8>
 8005014:	f1b9 0f00 	cmp.w	r9, #0
 8005018:	dd3c      	ble.n	8005094 <_dtoa_r+0x47c>
 800501a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800501e:	9307      	str	r3, [sp, #28]
 8005020:	2200      	movs	r2, #0
 8005022:	4b91      	ldr	r3, [pc, #580]	; (8005268 <_dtoa_r+0x650>)
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	f7fb fb16 	bl	8000658 <__aeabi_dmul>
 800502c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005030:	3501      	adds	r5, #1
 8005032:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005036:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800503a:	4628      	mov	r0, r5
 800503c:	f7fb faa2 	bl	8000584 <__aeabi_i2d>
 8005040:	4632      	mov	r2, r6
 8005042:	463b      	mov	r3, r7
 8005044:	f7fb fb08 	bl	8000658 <__aeabi_dmul>
 8005048:	4b88      	ldr	r3, [pc, #544]	; (800526c <_dtoa_r+0x654>)
 800504a:	2200      	movs	r2, #0
 800504c:	f7fb f94e 	bl	80002ec <__adddf3>
 8005050:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005058:	9303      	str	r3, [sp, #12]
 800505a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800505c:	2b00      	cmp	r3, #0
 800505e:	d15c      	bne.n	800511a <_dtoa_r+0x502>
 8005060:	4b83      	ldr	r3, [pc, #524]	; (8005270 <_dtoa_r+0x658>)
 8005062:	2200      	movs	r2, #0
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb f93e 	bl	80002e8 <__aeabi_dsub>
 800506c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005070:	4606      	mov	r6, r0
 8005072:	460f      	mov	r7, r1
 8005074:	f7fb fd80 	bl	8000b78 <__aeabi_dcmpgt>
 8005078:	2800      	cmp	r0, #0
 800507a:	f040 8296 	bne.w	80055aa <_dtoa_r+0x992>
 800507e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005082:	4630      	mov	r0, r6
 8005084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005088:	4639      	mov	r1, r7
 800508a:	f7fb fd57 	bl	8000b3c <__aeabi_dcmplt>
 800508e:	2800      	cmp	r0, #0
 8005090:	f040 8288 	bne.w	80055a4 <_dtoa_r+0x98c>
 8005094:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005098:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800509c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f2c0 8158 	blt.w	8005354 <_dtoa_r+0x73c>
 80050a4:	f1ba 0f0e 	cmp.w	sl, #14
 80050a8:	f300 8154 	bgt.w	8005354 <_dtoa_r+0x73c>
 80050ac:	4b6b      	ldr	r3, [pc, #428]	; (800525c <_dtoa_r+0x644>)
 80050ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f280 80e3 	bge.w	8005284 <_dtoa_r+0x66c>
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f300 80df 	bgt.w	8005284 <_dtoa_r+0x66c>
 80050c6:	f040 826d 	bne.w	80055a4 <_dtoa_r+0x98c>
 80050ca:	4b69      	ldr	r3, [pc, #420]	; (8005270 <_dtoa_r+0x658>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	4640      	mov	r0, r8
 80050d0:	4649      	mov	r1, r9
 80050d2:	f7fb fac1 	bl	8000658 <__aeabi_dmul>
 80050d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050da:	f7fb fd43 	bl	8000b64 <__aeabi_dcmpge>
 80050de:	9e01      	ldr	r6, [sp, #4]
 80050e0:	4637      	mov	r7, r6
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f040 8243 	bne.w	800556e <_dtoa_r+0x956>
 80050e8:	9d00      	ldr	r5, [sp, #0]
 80050ea:	2331      	movs	r3, #49	; 0x31
 80050ec:	f805 3b01 	strb.w	r3, [r5], #1
 80050f0:	f10a 0a01 	add.w	sl, sl, #1
 80050f4:	e23f      	b.n	8005576 <_dtoa_r+0x95e>
 80050f6:	07f2      	lsls	r2, r6, #31
 80050f8:	d505      	bpl.n	8005106 <_dtoa_r+0x4ee>
 80050fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fe:	f7fb faab 	bl	8000658 <__aeabi_dmul>
 8005102:	3501      	adds	r5, #1
 8005104:	2301      	movs	r3, #1
 8005106:	1076      	asrs	r6, r6, #1
 8005108:	3708      	adds	r7, #8
 800510a:	e76c      	b.n	8004fe6 <_dtoa_r+0x3ce>
 800510c:	2502      	movs	r5, #2
 800510e:	e76f      	b.n	8004ff0 <_dtoa_r+0x3d8>
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	f8cd a01c 	str.w	sl, [sp, #28]
 8005116:	930c      	str	r3, [sp, #48]	; 0x30
 8005118:	e78d      	b.n	8005036 <_dtoa_r+0x41e>
 800511a:	9900      	ldr	r1, [sp, #0]
 800511c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800511e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005120:	4b4e      	ldr	r3, [pc, #312]	; (800525c <_dtoa_r+0x644>)
 8005122:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005126:	4401      	add	r1, r0
 8005128:	9102      	str	r1, [sp, #8]
 800512a:	9908      	ldr	r1, [sp, #32]
 800512c:	eeb0 8a47 	vmov.f32	s16, s14
 8005130:	eef0 8a67 	vmov.f32	s17, s15
 8005134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005138:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800513c:	2900      	cmp	r1, #0
 800513e:	d045      	beq.n	80051cc <_dtoa_r+0x5b4>
 8005140:	494c      	ldr	r1, [pc, #304]	; (8005274 <_dtoa_r+0x65c>)
 8005142:	2000      	movs	r0, #0
 8005144:	f7fb fbb2 	bl	80008ac <__aeabi_ddiv>
 8005148:	ec53 2b18 	vmov	r2, r3, d8
 800514c:	f7fb f8cc 	bl	80002e8 <__aeabi_dsub>
 8005150:	9d00      	ldr	r5, [sp, #0]
 8005152:	ec41 0b18 	vmov	d8, r0, r1
 8005156:	4639      	mov	r1, r7
 8005158:	4630      	mov	r0, r6
 800515a:	f7fb fd2d 	bl	8000bb8 <__aeabi_d2iz>
 800515e:	900c      	str	r0, [sp, #48]	; 0x30
 8005160:	f7fb fa10 	bl	8000584 <__aeabi_i2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4630      	mov	r0, r6
 800516a:	4639      	mov	r1, r7
 800516c:	f7fb f8bc 	bl	80002e8 <__aeabi_dsub>
 8005170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005172:	3330      	adds	r3, #48	; 0x30
 8005174:	f805 3b01 	strb.w	r3, [r5], #1
 8005178:	ec53 2b18 	vmov	r2, r3, d8
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	f7fb fcdc 	bl	8000b3c <__aeabi_dcmplt>
 8005184:	2800      	cmp	r0, #0
 8005186:	d165      	bne.n	8005254 <_dtoa_r+0x63c>
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	4935      	ldr	r1, [pc, #212]	; (8005264 <_dtoa_r+0x64c>)
 800518e:	2000      	movs	r0, #0
 8005190:	f7fb f8aa 	bl	80002e8 <__aeabi_dsub>
 8005194:	ec53 2b18 	vmov	r2, r3, d8
 8005198:	f7fb fcd0 	bl	8000b3c <__aeabi_dcmplt>
 800519c:	2800      	cmp	r0, #0
 800519e:	f040 80b9 	bne.w	8005314 <_dtoa_r+0x6fc>
 80051a2:	9b02      	ldr	r3, [sp, #8]
 80051a4:	429d      	cmp	r5, r3
 80051a6:	f43f af75 	beq.w	8005094 <_dtoa_r+0x47c>
 80051aa:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <_dtoa_r+0x650>)
 80051ac:	ec51 0b18 	vmov	r0, r1, d8
 80051b0:	2200      	movs	r2, #0
 80051b2:	f7fb fa51 	bl	8000658 <__aeabi_dmul>
 80051b6:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <_dtoa_r+0x650>)
 80051b8:	ec41 0b18 	vmov	d8, r0, r1
 80051bc:	2200      	movs	r2, #0
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	f7fb fa49 	bl	8000658 <__aeabi_dmul>
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	e7c4      	b.n	8005156 <_dtoa_r+0x53e>
 80051cc:	ec51 0b17 	vmov	r0, r1, d7
 80051d0:	f7fb fa42 	bl	8000658 <__aeabi_dmul>
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	9d00      	ldr	r5, [sp, #0]
 80051d8:	930c      	str	r3, [sp, #48]	; 0x30
 80051da:	ec41 0b18 	vmov	d8, r0, r1
 80051de:	4639      	mov	r1, r7
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7fb fce9 	bl	8000bb8 <__aeabi_d2iz>
 80051e6:	9011      	str	r0, [sp, #68]	; 0x44
 80051e8:	f7fb f9cc 	bl	8000584 <__aeabi_i2d>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4630      	mov	r0, r6
 80051f2:	4639      	mov	r1, r7
 80051f4:	f7fb f878 	bl	80002e8 <__aeabi_dsub>
 80051f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051fa:	3330      	adds	r3, #48	; 0x30
 80051fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005200:	9b02      	ldr	r3, [sp, #8]
 8005202:	429d      	cmp	r5, r3
 8005204:	4606      	mov	r6, r0
 8005206:	460f      	mov	r7, r1
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	d134      	bne.n	8005278 <_dtoa_r+0x660>
 800520e:	4b19      	ldr	r3, [pc, #100]	; (8005274 <_dtoa_r+0x65c>)
 8005210:	ec51 0b18 	vmov	r0, r1, d8
 8005214:	f7fb f86a 	bl	80002ec <__adddf3>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4630      	mov	r0, r6
 800521e:	4639      	mov	r1, r7
 8005220:	f7fb fcaa 	bl	8000b78 <__aeabi_dcmpgt>
 8005224:	2800      	cmp	r0, #0
 8005226:	d175      	bne.n	8005314 <_dtoa_r+0x6fc>
 8005228:	ec53 2b18 	vmov	r2, r3, d8
 800522c:	4911      	ldr	r1, [pc, #68]	; (8005274 <_dtoa_r+0x65c>)
 800522e:	2000      	movs	r0, #0
 8005230:	f7fb f85a 	bl	80002e8 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb fc7e 	bl	8000b3c <__aeabi_dcmplt>
 8005240:	2800      	cmp	r0, #0
 8005242:	f43f af27 	beq.w	8005094 <_dtoa_r+0x47c>
 8005246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005248:	1e6b      	subs	r3, r5, #1
 800524a:	930c      	str	r3, [sp, #48]	; 0x30
 800524c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005250:	2b30      	cmp	r3, #48	; 0x30
 8005252:	d0f8      	beq.n	8005246 <_dtoa_r+0x62e>
 8005254:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005258:	e04a      	b.n	80052f0 <_dtoa_r+0x6d8>
 800525a:	bf00      	nop
 800525c:	080083b8 	.word	0x080083b8
 8005260:	08008390 	.word	0x08008390
 8005264:	3ff00000 	.word	0x3ff00000
 8005268:	40240000 	.word	0x40240000
 800526c:	401c0000 	.word	0x401c0000
 8005270:	40140000 	.word	0x40140000
 8005274:	3fe00000 	.word	0x3fe00000
 8005278:	4baf      	ldr	r3, [pc, #700]	; (8005538 <_dtoa_r+0x920>)
 800527a:	f7fb f9ed 	bl	8000658 <__aeabi_dmul>
 800527e:	4606      	mov	r6, r0
 8005280:	460f      	mov	r7, r1
 8005282:	e7ac      	b.n	80051de <_dtoa_r+0x5c6>
 8005284:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005288:	9d00      	ldr	r5, [sp, #0]
 800528a:	4642      	mov	r2, r8
 800528c:	464b      	mov	r3, r9
 800528e:	4630      	mov	r0, r6
 8005290:	4639      	mov	r1, r7
 8005292:	f7fb fb0b 	bl	80008ac <__aeabi_ddiv>
 8005296:	f7fb fc8f 	bl	8000bb8 <__aeabi_d2iz>
 800529a:	9002      	str	r0, [sp, #8]
 800529c:	f7fb f972 	bl	8000584 <__aeabi_i2d>
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	f7fb f9d8 	bl	8000658 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fb f81a 	bl	80002e8 <__aeabi_dsub>
 80052b4:	9e02      	ldr	r6, [sp, #8]
 80052b6:	9f01      	ldr	r7, [sp, #4]
 80052b8:	3630      	adds	r6, #48	; 0x30
 80052ba:	f805 6b01 	strb.w	r6, [r5], #1
 80052be:	9e00      	ldr	r6, [sp, #0]
 80052c0:	1bae      	subs	r6, r5, r6
 80052c2:	42b7      	cmp	r7, r6
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	d137      	bne.n	800533a <_dtoa_r+0x722>
 80052ca:	f7fb f80f 	bl	80002ec <__adddf3>
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	4606      	mov	r6, r0
 80052d4:	460f      	mov	r7, r1
 80052d6:	f7fb fc4f 	bl	8000b78 <__aeabi_dcmpgt>
 80052da:	b9c8      	cbnz	r0, 8005310 <_dtoa_r+0x6f8>
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	4630      	mov	r0, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	f7fb fc20 	bl	8000b28 <__aeabi_dcmpeq>
 80052e8:	b110      	cbz	r0, 80052f0 <_dtoa_r+0x6d8>
 80052ea:	9b02      	ldr	r3, [sp, #8]
 80052ec:	07d9      	lsls	r1, r3, #31
 80052ee:	d40f      	bmi.n	8005310 <_dtoa_r+0x6f8>
 80052f0:	4620      	mov	r0, r4
 80052f2:	4659      	mov	r1, fp
 80052f4:	f000 fcec 	bl	8005cd0 <_Bfree>
 80052f8:	2300      	movs	r3, #0
 80052fa:	702b      	strb	r3, [r5, #0]
 80052fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052fe:	f10a 0001 	add.w	r0, sl, #1
 8005302:	6018      	str	r0, [r3, #0]
 8005304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005306:	2b00      	cmp	r3, #0
 8005308:	f43f acd8 	beq.w	8004cbc <_dtoa_r+0xa4>
 800530c:	601d      	str	r5, [r3, #0]
 800530e:	e4d5      	b.n	8004cbc <_dtoa_r+0xa4>
 8005310:	f8cd a01c 	str.w	sl, [sp, #28]
 8005314:	462b      	mov	r3, r5
 8005316:	461d      	mov	r5, r3
 8005318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800531c:	2a39      	cmp	r2, #57	; 0x39
 800531e:	d108      	bne.n	8005332 <_dtoa_r+0x71a>
 8005320:	9a00      	ldr	r2, [sp, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d1f7      	bne.n	8005316 <_dtoa_r+0x6fe>
 8005326:	9a07      	ldr	r2, [sp, #28]
 8005328:	9900      	ldr	r1, [sp, #0]
 800532a:	3201      	adds	r2, #1
 800532c:	9207      	str	r2, [sp, #28]
 800532e:	2230      	movs	r2, #48	; 0x30
 8005330:	700a      	strb	r2, [r1, #0]
 8005332:	781a      	ldrb	r2, [r3, #0]
 8005334:	3201      	adds	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e78c      	b.n	8005254 <_dtoa_r+0x63c>
 800533a:	4b7f      	ldr	r3, [pc, #508]	; (8005538 <_dtoa_r+0x920>)
 800533c:	2200      	movs	r2, #0
 800533e:	f7fb f98b 	bl	8000658 <__aeabi_dmul>
 8005342:	2200      	movs	r2, #0
 8005344:	2300      	movs	r3, #0
 8005346:	4606      	mov	r6, r0
 8005348:	460f      	mov	r7, r1
 800534a:	f7fb fbed 	bl	8000b28 <__aeabi_dcmpeq>
 800534e:	2800      	cmp	r0, #0
 8005350:	d09b      	beq.n	800528a <_dtoa_r+0x672>
 8005352:	e7cd      	b.n	80052f0 <_dtoa_r+0x6d8>
 8005354:	9a08      	ldr	r2, [sp, #32]
 8005356:	2a00      	cmp	r2, #0
 8005358:	f000 80c4 	beq.w	80054e4 <_dtoa_r+0x8cc>
 800535c:	9a05      	ldr	r2, [sp, #20]
 800535e:	2a01      	cmp	r2, #1
 8005360:	f300 80a8 	bgt.w	80054b4 <_dtoa_r+0x89c>
 8005364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005366:	2a00      	cmp	r2, #0
 8005368:	f000 80a0 	beq.w	80054ac <_dtoa_r+0x894>
 800536c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005370:	9e06      	ldr	r6, [sp, #24]
 8005372:	4645      	mov	r5, r8
 8005374:	9a04      	ldr	r2, [sp, #16]
 8005376:	2101      	movs	r1, #1
 8005378:	441a      	add	r2, r3
 800537a:	4620      	mov	r0, r4
 800537c:	4498      	add	r8, r3
 800537e:	9204      	str	r2, [sp, #16]
 8005380:	f000 fd62 	bl	8005e48 <__i2b>
 8005384:	4607      	mov	r7, r0
 8005386:	2d00      	cmp	r5, #0
 8005388:	dd0b      	ble.n	80053a2 <_dtoa_r+0x78a>
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	dd08      	ble.n	80053a2 <_dtoa_r+0x78a>
 8005390:	42ab      	cmp	r3, r5
 8005392:	9a04      	ldr	r2, [sp, #16]
 8005394:	bfa8      	it	ge
 8005396:	462b      	movge	r3, r5
 8005398:	eba8 0803 	sub.w	r8, r8, r3
 800539c:	1aed      	subs	r5, r5, r3
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	b1fb      	cbz	r3, 80053e6 <_dtoa_r+0x7ce>
 80053a6:	9b08      	ldr	r3, [sp, #32]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 809f 	beq.w	80054ec <_dtoa_r+0x8d4>
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	dd11      	ble.n	80053d6 <_dtoa_r+0x7be>
 80053b2:	4639      	mov	r1, r7
 80053b4:	4632      	mov	r2, r6
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fe02 	bl	8005fc0 <__pow5mult>
 80053bc:	465a      	mov	r2, fp
 80053be:	4601      	mov	r1, r0
 80053c0:	4607      	mov	r7, r0
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 fd56 	bl	8005e74 <__multiply>
 80053c8:	4659      	mov	r1, fp
 80053ca:	9007      	str	r0, [sp, #28]
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 fc7f 	bl	8005cd0 <_Bfree>
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	469b      	mov	fp, r3
 80053d6:	9b06      	ldr	r3, [sp, #24]
 80053d8:	1b9a      	subs	r2, r3, r6
 80053da:	d004      	beq.n	80053e6 <_dtoa_r+0x7ce>
 80053dc:	4659      	mov	r1, fp
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 fdee 	bl	8005fc0 <__pow5mult>
 80053e4:	4683      	mov	fp, r0
 80053e6:	2101      	movs	r1, #1
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fd2d 	bl	8005e48 <__i2b>
 80053ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	4606      	mov	r6, r0
 80053f4:	dd7c      	ble.n	80054f0 <_dtoa_r+0x8d8>
 80053f6:	461a      	mov	r2, r3
 80053f8:	4601      	mov	r1, r0
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fde0 	bl	8005fc0 <__pow5mult>
 8005400:	9b05      	ldr	r3, [sp, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	4606      	mov	r6, r0
 8005406:	dd76      	ble.n	80054f6 <_dtoa_r+0x8de>
 8005408:	2300      	movs	r3, #0
 800540a:	9306      	str	r3, [sp, #24]
 800540c:	6933      	ldr	r3, [r6, #16]
 800540e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005412:	6918      	ldr	r0, [r3, #16]
 8005414:	f000 fcc8 	bl	8005da8 <__hi0bits>
 8005418:	f1c0 0020 	rsb	r0, r0, #32
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	4418      	add	r0, r3
 8005420:	f010 001f 	ands.w	r0, r0, #31
 8005424:	f000 8086 	beq.w	8005534 <_dtoa_r+0x91c>
 8005428:	f1c0 0320 	rsb	r3, r0, #32
 800542c:	2b04      	cmp	r3, #4
 800542e:	dd7f      	ble.n	8005530 <_dtoa_r+0x918>
 8005430:	f1c0 001c 	rsb	r0, r0, #28
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	4403      	add	r3, r0
 8005438:	4480      	add	r8, r0
 800543a:	4405      	add	r5, r0
 800543c:	9304      	str	r3, [sp, #16]
 800543e:	f1b8 0f00 	cmp.w	r8, #0
 8005442:	dd05      	ble.n	8005450 <_dtoa_r+0x838>
 8005444:	4659      	mov	r1, fp
 8005446:	4642      	mov	r2, r8
 8005448:	4620      	mov	r0, r4
 800544a:	f000 fe13 	bl	8006074 <__lshift>
 800544e:	4683      	mov	fp, r0
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	dd05      	ble.n	8005462 <_dtoa_r+0x84a>
 8005456:	4631      	mov	r1, r6
 8005458:	461a      	mov	r2, r3
 800545a:	4620      	mov	r0, r4
 800545c:	f000 fe0a 	bl	8006074 <__lshift>
 8005460:	4606      	mov	r6, r0
 8005462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d069      	beq.n	800553c <_dtoa_r+0x924>
 8005468:	4631      	mov	r1, r6
 800546a:	4658      	mov	r0, fp
 800546c:	f000 fe6e 	bl	800614c <__mcmp>
 8005470:	2800      	cmp	r0, #0
 8005472:	da63      	bge.n	800553c <_dtoa_r+0x924>
 8005474:	2300      	movs	r3, #0
 8005476:	4659      	mov	r1, fp
 8005478:	220a      	movs	r2, #10
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fc4a 	bl	8005d14 <__multadd>
 8005480:	9b08      	ldr	r3, [sp, #32]
 8005482:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005486:	4683      	mov	fp, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 818f 	beq.w	80057ac <_dtoa_r+0xb94>
 800548e:	4639      	mov	r1, r7
 8005490:	2300      	movs	r3, #0
 8005492:	220a      	movs	r2, #10
 8005494:	4620      	mov	r0, r4
 8005496:	f000 fc3d 	bl	8005d14 <__multadd>
 800549a:	f1b9 0f00 	cmp.w	r9, #0
 800549e:	4607      	mov	r7, r0
 80054a0:	f300 808e 	bgt.w	80055c0 <_dtoa_r+0x9a8>
 80054a4:	9b05      	ldr	r3, [sp, #20]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	dc50      	bgt.n	800554c <_dtoa_r+0x934>
 80054aa:	e089      	b.n	80055c0 <_dtoa_r+0x9a8>
 80054ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054b2:	e75d      	b.n	8005370 <_dtoa_r+0x758>
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	1e5e      	subs	r6, r3, #1
 80054b8:	9b06      	ldr	r3, [sp, #24]
 80054ba:	42b3      	cmp	r3, r6
 80054bc:	bfbf      	itttt	lt
 80054be:	9b06      	ldrlt	r3, [sp, #24]
 80054c0:	9606      	strlt	r6, [sp, #24]
 80054c2:	1af2      	sublt	r2, r6, r3
 80054c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80054c6:	bfb6      	itet	lt
 80054c8:	189b      	addlt	r3, r3, r2
 80054ca:	1b9e      	subge	r6, r3, r6
 80054cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80054ce:	9b01      	ldr	r3, [sp, #4]
 80054d0:	bfb8      	it	lt
 80054d2:	2600      	movlt	r6, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfb5      	itete	lt
 80054d8:	eba8 0503 	sublt.w	r5, r8, r3
 80054dc:	9b01      	ldrge	r3, [sp, #4]
 80054de:	2300      	movlt	r3, #0
 80054e0:	4645      	movge	r5, r8
 80054e2:	e747      	b.n	8005374 <_dtoa_r+0x75c>
 80054e4:	9e06      	ldr	r6, [sp, #24]
 80054e6:	9f08      	ldr	r7, [sp, #32]
 80054e8:	4645      	mov	r5, r8
 80054ea:	e74c      	b.n	8005386 <_dtoa_r+0x76e>
 80054ec:	9a06      	ldr	r2, [sp, #24]
 80054ee:	e775      	b.n	80053dc <_dtoa_r+0x7c4>
 80054f0:	9b05      	ldr	r3, [sp, #20]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	dc18      	bgt.n	8005528 <_dtoa_r+0x910>
 80054f6:	9b02      	ldr	r3, [sp, #8]
 80054f8:	b9b3      	cbnz	r3, 8005528 <_dtoa_r+0x910>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005500:	b9a3      	cbnz	r3, 800552c <_dtoa_r+0x914>
 8005502:	9b03      	ldr	r3, [sp, #12]
 8005504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005508:	0d1b      	lsrs	r3, r3, #20
 800550a:	051b      	lsls	r3, r3, #20
 800550c:	b12b      	cbz	r3, 800551a <_dtoa_r+0x902>
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	9304      	str	r3, [sp, #16]
 8005514:	f108 0801 	add.w	r8, r8, #1
 8005518:	2301      	movs	r3, #1
 800551a:	9306      	str	r3, [sp, #24]
 800551c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800551e:	2b00      	cmp	r3, #0
 8005520:	f47f af74 	bne.w	800540c <_dtoa_r+0x7f4>
 8005524:	2001      	movs	r0, #1
 8005526:	e779      	b.n	800541c <_dtoa_r+0x804>
 8005528:	2300      	movs	r3, #0
 800552a:	e7f6      	b.n	800551a <_dtoa_r+0x902>
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	e7f4      	b.n	800551a <_dtoa_r+0x902>
 8005530:	d085      	beq.n	800543e <_dtoa_r+0x826>
 8005532:	4618      	mov	r0, r3
 8005534:	301c      	adds	r0, #28
 8005536:	e77d      	b.n	8005434 <_dtoa_r+0x81c>
 8005538:	40240000 	.word	0x40240000
 800553c:	9b01      	ldr	r3, [sp, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	dc38      	bgt.n	80055b4 <_dtoa_r+0x99c>
 8005542:	9b05      	ldr	r3, [sp, #20]
 8005544:	2b02      	cmp	r3, #2
 8005546:	dd35      	ble.n	80055b4 <_dtoa_r+0x99c>
 8005548:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800554c:	f1b9 0f00 	cmp.w	r9, #0
 8005550:	d10d      	bne.n	800556e <_dtoa_r+0x956>
 8005552:	4631      	mov	r1, r6
 8005554:	464b      	mov	r3, r9
 8005556:	2205      	movs	r2, #5
 8005558:	4620      	mov	r0, r4
 800555a:	f000 fbdb 	bl	8005d14 <__multadd>
 800555e:	4601      	mov	r1, r0
 8005560:	4606      	mov	r6, r0
 8005562:	4658      	mov	r0, fp
 8005564:	f000 fdf2 	bl	800614c <__mcmp>
 8005568:	2800      	cmp	r0, #0
 800556a:	f73f adbd 	bgt.w	80050e8 <_dtoa_r+0x4d0>
 800556e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005570:	9d00      	ldr	r5, [sp, #0]
 8005572:	ea6f 0a03 	mvn.w	sl, r3
 8005576:	f04f 0800 	mov.w	r8, #0
 800557a:	4631      	mov	r1, r6
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fba7 	bl	8005cd0 <_Bfree>
 8005582:	2f00      	cmp	r7, #0
 8005584:	f43f aeb4 	beq.w	80052f0 <_dtoa_r+0x6d8>
 8005588:	f1b8 0f00 	cmp.w	r8, #0
 800558c:	d005      	beq.n	800559a <_dtoa_r+0x982>
 800558e:	45b8      	cmp	r8, r7
 8005590:	d003      	beq.n	800559a <_dtoa_r+0x982>
 8005592:	4641      	mov	r1, r8
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fb9b 	bl	8005cd0 <_Bfree>
 800559a:	4639      	mov	r1, r7
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fb97 	bl	8005cd0 <_Bfree>
 80055a2:	e6a5      	b.n	80052f0 <_dtoa_r+0x6d8>
 80055a4:	2600      	movs	r6, #0
 80055a6:	4637      	mov	r7, r6
 80055a8:	e7e1      	b.n	800556e <_dtoa_r+0x956>
 80055aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80055ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80055b0:	4637      	mov	r7, r6
 80055b2:	e599      	b.n	80050e8 <_dtoa_r+0x4d0>
 80055b4:	9b08      	ldr	r3, [sp, #32]
 80055b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80fd 	beq.w	80057ba <_dtoa_r+0xba2>
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	dd05      	ble.n	80055d0 <_dtoa_r+0x9b8>
 80055c4:	4639      	mov	r1, r7
 80055c6:	462a      	mov	r2, r5
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fd53 	bl	8006074 <__lshift>
 80055ce:	4607      	mov	r7, r0
 80055d0:	9b06      	ldr	r3, [sp, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d05c      	beq.n	8005690 <_dtoa_r+0xa78>
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fb39 	bl	8005c50 <_Balloc>
 80055de:	4605      	mov	r5, r0
 80055e0:	b928      	cbnz	r0, 80055ee <_dtoa_r+0x9d6>
 80055e2:	4b80      	ldr	r3, [pc, #512]	; (80057e4 <_dtoa_r+0xbcc>)
 80055e4:	4602      	mov	r2, r0
 80055e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055ea:	f7ff bb2e 	b.w	8004c4a <_dtoa_r+0x32>
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	3202      	adds	r2, #2
 80055f2:	0092      	lsls	r2, r2, #2
 80055f4:	f107 010c 	add.w	r1, r7, #12
 80055f8:	300c      	adds	r0, #12
 80055fa:	f7fe fbe9 	bl	8003dd0 <memcpy>
 80055fe:	2201      	movs	r2, #1
 8005600:	4629      	mov	r1, r5
 8005602:	4620      	mov	r0, r4
 8005604:	f000 fd36 	bl	8006074 <__lshift>
 8005608:	9b00      	ldr	r3, [sp, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	9b00      	ldr	r3, [sp, #0]
 8005610:	444b      	add	r3, r9
 8005612:	9307      	str	r3, [sp, #28]
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	46b8      	mov	r8, r7
 800561c:	9306      	str	r3, [sp, #24]
 800561e:	4607      	mov	r7, r0
 8005620:	9b01      	ldr	r3, [sp, #4]
 8005622:	4631      	mov	r1, r6
 8005624:	3b01      	subs	r3, #1
 8005626:	4658      	mov	r0, fp
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	f7ff fa69 	bl	8004b00 <quorem>
 800562e:	4603      	mov	r3, r0
 8005630:	3330      	adds	r3, #48	; 0x30
 8005632:	9004      	str	r0, [sp, #16]
 8005634:	4641      	mov	r1, r8
 8005636:	4658      	mov	r0, fp
 8005638:	9308      	str	r3, [sp, #32]
 800563a:	f000 fd87 	bl	800614c <__mcmp>
 800563e:	463a      	mov	r2, r7
 8005640:	4681      	mov	r9, r0
 8005642:	4631      	mov	r1, r6
 8005644:	4620      	mov	r0, r4
 8005646:	f000 fd9d 	bl	8006184 <__mdiff>
 800564a:	68c2      	ldr	r2, [r0, #12]
 800564c:	9b08      	ldr	r3, [sp, #32]
 800564e:	4605      	mov	r5, r0
 8005650:	bb02      	cbnz	r2, 8005694 <_dtoa_r+0xa7c>
 8005652:	4601      	mov	r1, r0
 8005654:	4658      	mov	r0, fp
 8005656:	f000 fd79 	bl	800614c <__mcmp>
 800565a:	9b08      	ldr	r3, [sp, #32]
 800565c:	4602      	mov	r2, r0
 800565e:	4629      	mov	r1, r5
 8005660:	4620      	mov	r0, r4
 8005662:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005666:	f000 fb33 	bl	8005cd0 <_Bfree>
 800566a:	9b05      	ldr	r3, [sp, #20]
 800566c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566e:	9d01      	ldr	r5, [sp, #4]
 8005670:	ea43 0102 	orr.w	r1, r3, r2
 8005674:	9b06      	ldr	r3, [sp, #24]
 8005676:	430b      	orrs	r3, r1
 8005678:	9b08      	ldr	r3, [sp, #32]
 800567a:	d10d      	bne.n	8005698 <_dtoa_r+0xa80>
 800567c:	2b39      	cmp	r3, #57	; 0x39
 800567e:	d029      	beq.n	80056d4 <_dtoa_r+0xabc>
 8005680:	f1b9 0f00 	cmp.w	r9, #0
 8005684:	dd01      	ble.n	800568a <_dtoa_r+0xa72>
 8005686:	9b04      	ldr	r3, [sp, #16]
 8005688:	3331      	adds	r3, #49	; 0x31
 800568a:	9a02      	ldr	r2, [sp, #8]
 800568c:	7013      	strb	r3, [r2, #0]
 800568e:	e774      	b.n	800557a <_dtoa_r+0x962>
 8005690:	4638      	mov	r0, r7
 8005692:	e7b9      	b.n	8005608 <_dtoa_r+0x9f0>
 8005694:	2201      	movs	r2, #1
 8005696:	e7e2      	b.n	800565e <_dtoa_r+0xa46>
 8005698:	f1b9 0f00 	cmp.w	r9, #0
 800569c:	db06      	blt.n	80056ac <_dtoa_r+0xa94>
 800569e:	9905      	ldr	r1, [sp, #20]
 80056a0:	ea41 0909 	orr.w	r9, r1, r9
 80056a4:	9906      	ldr	r1, [sp, #24]
 80056a6:	ea59 0101 	orrs.w	r1, r9, r1
 80056aa:	d120      	bne.n	80056ee <_dtoa_r+0xad6>
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	ddec      	ble.n	800568a <_dtoa_r+0xa72>
 80056b0:	4659      	mov	r1, fp
 80056b2:	2201      	movs	r2, #1
 80056b4:	4620      	mov	r0, r4
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	f000 fcdc 	bl	8006074 <__lshift>
 80056bc:	4631      	mov	r1, r6
 80056be:	4683      	mov	fp, r0
 80056c0:	f000 fd44 	bl	800614c <__mcmp>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	dc02      	bgt.n	80056d0 <_dtoa_r+0xab8>
 80056ca:	d1de      	bne.n	800568a <_dtoa_r+0xa72>
 80056cc:	07da      	lsls	r2, r3, #31
 80056ce:	d5dc      	bpl.n	800568a <_dtoa_r+0xa72>
 80056d0:	2b39      	cmp	r3, #57	; 0x39
 80056d2:	d1d8      	bne.n	8005686 <_dtoa_r+0xa6e>
 80056d4:	9a02      	ldr	r2, [sp, #8]
 80056d6:	2339      	movs	r3, #57	; 0x39
 80056d8:	7013      	strb	r3, [r2, #0]
 80056da:	462b      	mov	r3, r5
 80056dc:	461d      	mov	r5, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056e4:	2a39      	cmp	r2, #57	; 0x39
 80056e6:	d050      	beq.n	800578a <_dtoa_r+0xb72>
 80056e8:	3201      	adds	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e745      	b.n	800557a <_dtoa_r+0x962>
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	dd03      	ble.n	80056fa <_dtoa_r+0xae2>
 80056f2:	2b39      	cmp	r3, #57	; 0x39
 80056f4:	d0ee      	beq.n	80056d4 <_dtoa_r+0xabc>
 80056f6:	3301      	adds	r3, #1
 80056f8:	e7c7      	b.n	800568a <_dtoa_r+0xa72>
 80056fa:	9a01      	ldr	r2, [sp, #4]
 80056fc:	9907      	ldr	r1, [sp, #28]
 80056fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005702:	428a      	cmp	r2, r1
 8005704:	d02a      	beq.n	800575c <_dtoa_r+0xb44>
 8005706:	4659      	mov	r1, fp
 8005708:	2300      	movs	r3, #0
 800570a:	220a      	movs	r2, #10
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fb01 	bl	8005d14 <__multadd>
 8005712:	45b8      	cmp	r8, r7
 8005714:	4683      	mov	fp, r0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	f04f 020a 	mov.w	r2, #10
 800571e:	4641      	mov	r1, r8
 8005720:	4620      	mov	r0, r4
 8005722:	d107      	bne.n	8005734 <_dtoa_r+0xb1c>
 8005724:	f000 faf6 	bl	8005d14 <__multadd>
 8005728:	4680      	mov	r8, r0
 800572a:	4607      	mov	r7, r0
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	3301      	adds	r3, #1
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	e775      	b.n	8005620 <_dtoa_r+0xa08>
 8005734:	f000 faee 	bl	8005d14 <__multadd>
 8005738:	4639      	mov	r1, r7
 800573a:	4680      	mov	r8, r0
 800573c:	2300      	movs	r3, #0
 800573e:	220a      	movs	r2, #10
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fae7 	bl	8005d14 <__multadd>
 8005746:	4607      	mov	r7, r0
 8005748:	e7f0      	b.n	800572c <_dtoa_r+0xb14>
 800574a:	f1b9 0f00 	cmp.w	r9, #0
 800574e:	9a00      	ldr	r2, [sp, #0]
 8005750:	bfcc      	ite	gt
 8005752:	464d      	movgt	r5, r9
 8005754:	2501      	movle	r5, #1
 8005756:	4415      	add	r5, r2
 8005758:	f04f 0800 	mov.w	r8, #0
 800575c:	4659      	mov	r1, fp
 800575e:	2201      	movs	r2, #1
 8005760:	4620      	mov	r0, r4
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	f000 fc86 	bl	8006074 <__lshift>
 8005768:	4631      	mov	r1, r6
 800576a:	4683      	mov	fp, r0
 800576c:	f000 fcee 	bl	800614c <__mcmp>
 8005770:	2800      	cmp	r0, #0
 8005772:	dcb2      	bgt.n	80056da <_dtoa_r+0xac2>
 8005774:	d102      	bne.n	800577c <_dtoa_r+0xb64>
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	07db      	lsls	r3, r3, #31
 800577a:	d4ae      	bmi.n	80056da <_dtoa_r+0xac2>
 800577c:	462b      	mov	r3, r5
 800577e:	461d      	mov	r5, r3
 8005780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005784:	2a30      	cmp	r2, #48	; 0x30
 8005786:	d0fa      	beq.n	800577e <_dtoa_r+0xb66>
 8005788:	e6f7      	b.n	800557a <_dtoa_r+0x962>
 800578a:	9a00      	ldr	r2, [sp, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d1a5      	bne.n	80056dc <_dtoa_r+0xac4>
 8005790:	f10a 0a01 	add.w	sl, sl, #1
 8005794:	2331      	movs	r3, #49	; 0x31
 8005796:	e779      	b.n	800568c <_dtoa_r+0xa74>
 8005798:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <_dtoa_r+0xbd0>)
 800579a:	f7ff baaf 	b.w	8004cfc <_dtoa_r+0xe4>
 800579e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f47f aa86 	bne.w	8004cb2 <_dtoa_r+0x9a>
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <_dtoa_r+0xbd4>)
 80057a8:	f7ff baa8 	b.w	8004cfc <_dtoa_r+0xe4>
 80057ac:	f1b9 0f00 	cmp.w	r9, #0
 80057b0:	dc03      	bgt.n	80057ba <_dtoa_r+0xba2>
 80057b2:	9b05      	ldr	r3, [sp, #20]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	f73f aec9 	bgt.w	800554c <_dtoa_r+0x934>
 80057ba:	9d00      	ldr	r5, [sp, #0]
 80057bc:	4631      	mov	r1, r6
 80057be:	4658      	mov	r0, fp
 80057c0:	f7ff f99e 	bl	8004b00 <quorem>
 80057c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057c8:	f805 3b01 	strb.w	r3, [r5], #1
 80057cc:	9a00      	ldr	r2, [sp, #0]
 80057ce:	1aaa      	subs	r2, r5, r2
 80057d0:	4591      	cmp	r9, r2
 80057d2:	ddba      	ble.n	800574a <_dtoa_r+0xb32>
 80057d4:	4659      	mov	r1, fp
 80057d6:	2300      	movs	r3, #0
 80057d8:	220a      	movs	r2, #10
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fa9a 	bl	8005d14 <__multadd>
 80057e0:	4683      	mov	fp, r0
 80057e2:	e7eb      	b.n	80057bc <_dtoa_r+0xba4>
 80057e4:	080082bf 	.word	0x080082bf
 80057e8:	08008218 	.word	0x08008218
 80057ec:	0800823c 	.word	0x0800823c

080057f0 <__sflush_r>:
 80057f0:	898a      	ldrh	r2, [r1, #12]
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	0710      	lsls	r0, r2, #28
 80057fa:	460c      	mov	r4, r1
 80057fc:	d458      	bmi.n	80058b0 <__sflush_r+0xc0>
 80057fe:	684b      	ldr	r3, [r1, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	dc05      	bgt.n	8005810 <__sflush_r+0x20>
 8005804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	dc02      	bgt.n	8005810 <__sflush_r+0x20>
 800580a:	2000      	movs	r0, #0
 800580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005812:	2e00      	cmp	r6, #0
 8005814:	d0f9      	beq.n	800580a <__sflush_r+0x1a>
 8005816:	2300      	movs	r3, #0
 8005818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800581c:	682f      	ldr	r7, [r5, #0]
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	d032      	beq.n	8005888 <__sflush_r+0x98>
 8005822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	075a      	lsls	r2, r3, #29
 8005828:	d505      	bpl.n	8005836 <__sflush_r+0x46>
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	1ac0      	subs	r0, r0, r3
 800582e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005830:	b10b      	cbz	r3, 8005836 <__sflush_r+0x46>
 8005832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005834:	1ac0      	subs	r0, r0, r3
 8005836:	2300      	movs	r3, #0
 8005838:	4602      	mov	r2, r0
 800583a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583c:	6a21      	ldr	r1, [r4, #32]
 800583e:	4628      	mov	r0, r5
 8005840:	47b0      	blx	r6
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	d106      	bne.n	8005856 <__sflush_r+0x66>
 8005848:	6829      	ldr	r1, [r5, #0]
 800584a:	291d      	cmp	r1, #29
 800584c:	d82c      	bhi.n	80058a8 <__sflush_r+0xb8>
 800584e:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <__sflush_r+0x108>)
 8005850:	40ca      	lsrs	r2, r1
 8005852:	07d6      	lsls	r6, r2, #31
 8005854:	d528      	bpl.n	80058a8 <__sflush_r+0xb8>
 8005856:	2200      	movs	r2, #0
 8005858:	6062      	str	r2, [r4, #4]
 800585a:	04d9      	lsls	r1, r3, #19
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	d504      	bpl.n	800586c <__sflush_r+0x7c>
 8005862:	1c42      	adds	r2, r0, #1
 8005864:	d101      	bne.n	800586a <__sflush_r+0x7a>
 8005866:	682b      	ldr	r3, [r5, #0]
 8005868:	b903      	cbnz	r3, 800586c <__sflush_r+0x7c>
 800586a:	6560      	str	r0, [r4, #84]	; 0x54
 800586c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800586e:	602f      	str	r7, [r5, #0]
 8005870:	2900      	cmp	r1, #0
 8005872:	d0ca      	beq.n	800580a <__sflush_r+0x1a>
 8005874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005878:	4299      	cmp	r1, r3
 800587a:	d002      	beq.n	8005882 <__sflush_r+0x92>
 800587c:	4628      	mov	r0, r5
 800587e:	f7fe facd 	bl	8003e1c <_free_r>
 8005882:	2000      	movs	r0, #0
 8005884:	6360      	str	r0, [r4, #52]	; 0x34
 8005886:	e7c1      	b.n	800580c <__sflush_r+0x1c>
 8005888:	6a21      	ldr	r1, [r4, #32]
 800588a:	2301      	movs	r3, #1
 800588c:	4628      	mov	r0, r5
 800588e:	47b0      	blx	r6
 8005890:	1c41      	adds	r1, r0, #1
 8005892:	d1c7      	bne.n	8005824 <__sflush_r+0x34>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0c4      	beq.n	8005824 <__sflush_r+0x34>
 800589a:	2b1d      	cmp	r3, #29
 800589c:	d001      	beq.n	80058a2 <__sflush_r+0xb2>
 800589e:	2b16      	cmp	r3, #22
 80058a0:	d101      	bne.n	80058a6 <__sflush_r+0xb6>
 80058a2:	602f      	str	r7, [r5, #0]
 80058a4:	e7b1      	b.n	800580a <__sflush_r+0x1a>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	e7ad      	b.n	800580c <__sflush_r+0x1c>
 80058b0:	690f      	ldr	r7, [r1, #16]
 80058b2:	2f00      	cmp	r7, #0
 80058b4:	d0a9      	beq.n	800580a <__sflush_r+0x1a>
 80058b6:	0793      	lsls	r3, r2, #30
 80058b8:	680e      	ldr	r6, [r1, #0]
 80058ba:	bf08      	it	eq
 80058bc:	694b      	ldreq	r3, [r1, #20]
 80058be:	600f      	str	r7, [r1, #0]
 80058c0:	bf18      	it	ne
 80058c2:	2300      	movne	r3, #0
 80058c4:	eba6 0807 	sub.w	r8, r6, r7
 80058c8:	608b      	str	r3, [r1, #8]
 80058ca:	f1b8 0f00 	cmp.w	r8, #0
 80058ce:	dd9c      	ble.n	800580a <__sflush_r+0x1a>
 80058d0:	6a21      	ldr	r1, [r4, #32]
 80058d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d4:	4643      	mov	r3, r8
 80058d6:	463a      	mov	r2, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	2800      	cmp	r0, #0
 80058de:	dc06      	bgt.n	80058ee <__sflush_r+0xfe>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ec:	e78e      	b.n	800580c <__sflush_r+0x1c>
 80058ee:	4407      	add	r7, r0
 80058f0:	eba8 0800 	sub.w	r8, r8, r0
 80058f4:	e7e9      	b.n	80058ca <__sflush_r+0xda>
 80058f6:	bf00      	nop
 80058f8:	20400001 	.word	0x20400001

080058fc <_fflush_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b913      	cbnz	r3, 800590c <_fflush_r+0x10>
 8005906:	2500      	movs	r5, #0
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	b118      	cbz	r0, 8005916 <_fflush_r+0x1a>
 800590e:	6983      	ldr	r3, [r0, #24]
 8005910:	b90b      	cbnz	r3, 8005916 <_fflush_r+0x1a>
 8005912:	f000 f887 	bl	8005a24 <__sinit>
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <_fflush_r+0x6c>)
 8005918:	429c      	cmp	r4, r3
 800591a:	d11b      	bne.n	8005954 <_fflush_r+0x58>
 800591c:	686c      	ldr	r4, [r5, #4]
 800591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ef      	beq.n	8005906 <_fflush_r+0xa>
 8005926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d404      	bmi.n	8005936 <_fflush_r+0x3a>
 800592c:	0599      	lsls	r1, r3, #22
 800592e:	d402      	bmi.n	8005936 <_fflush_r+0x3a>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 f91a 	bl	8005b6a <__retarget_lock_acquire_recursive>
 8005936:	4628      	mov	r0, r5
 8005938:	4621      	mov	r1, r4
 800593a:	f7ff ff59 	bl	80057f0 <__sflush_r>
 800593e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005940:	07da      	lsls	r2, r3, #31
 8005942:	4605      	mov	r5, r0
 8005944:	d4e0      	bmi.n	8005908 <_fflush_r+0xc>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	059b      	lsls	r3, r3, #22
 800594a:	d4dd      	bmi.n	8005908 <_fflush_r+0xc>
 800594c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594e:	f000 f90d 	bl	8005b6c <__retarget_lock_release_recursive>
 8005952:	e7d9      	b.n	8005908 <_fflush_r+0xc>
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <_fflush_r+0x70>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d101      	bne.n	800595e <_fflush_r+0x62>
 800595a:	68ac      	ldr	r4, [r5, #8]
 800595c:	e7df      	b.n	800591e <_fflush_r+0x22>
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <_fflush_r+0x74>)
 8005960:	429c      	cmp	r4, r3
 8005962:	bf08      	it	eq
 8005964:	68ec      	ldreq	r4, [r5, #12]
 8005966:	e7da      	b.n	800591e <_fflush_r+0x22>
 8005968:	080082f0 	.word	0x080082f0
 800596c:	08008310 	.word	0x08008310
 8005970:	080082d0 	.word	0x080082d0

08005974 <std>:
 8005974:	2300      	movs	r3, #0
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	e9c0 3300 	strd	r3, r3, [r0]
 800597e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005982:	6083      	str	r3, [r0, #8]
 8005984:	8181      	strh	r1, [r0, #12]
 8005986:	6643      	str	r3, [r0, #100]	; 0x64
 8005988:	81c2      	strh	r2, [r0, #14]
 800598a:	6183      	str	r3, [r0, #24]
 800598c:	4619      	mov	r1, r3
 800598e:	2208      	movs	r2, #8
 8005990:	305c      	adds	r0, #92	; 0x5c
 8005992:	f7fe fa2b 	bl	8003dec <memset>
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <std+0x38>)
 8005998:	6263      	str	r3, [r4, #36]	; 0x24
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <std+0x3c>)
 800599c:	62a3      	str	r3, [r4, #40]	; 0x28
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <std+0x40>)
 80059a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <std+0x44>)
 80059a4:	6224      	str	r4, [r4, #32]
 80059a6:	6323      	str	r3, [r4, #48]	; 0x30
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	bf00      	nop
 80059ac:	08006601 	.word	0x08006601
 80059b0:	08006623 	.word	0x08006623
 80059b4:	0800665b 	.word	0x0800665b
 80059b8:	0800667f 	.word	0x0800667f

080059bc <_cleanup_r>:
 80059bc:	4901      	ldr	r1, [pc, #4]	; (80059c4 <_cleanup_r+0x8>)
 80059be:	f000 b8af 	b.w	8005b20 <_fwalk_reent>
 80059c2:	bf00      	nop
 80059c4:	080058fd 	.word	0x080058fd

080059c8 <__sfmoreglue>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	1e4a      	subs	r2, r1, #1
 80059cc:	2568      	movs	r5, #104	; 0x68
 80059ce:	4355      	muls	r5, r2
 80059d0:	460e      	mov	r6, r1
 80059d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059d6:	f7fe fa71 	bl	8003ebc <_malloc_r>
 80059da:	4604      	mov	r4, r0
 80059dc:	b140      	cbz	r0, 80059f0 <__sfmoreglue+0x28>
 80059de:	2100      	movs	r1, #0
 80059e0:	e9c0 1600 	strd	r1, r6, [r0]
 80059e4:	300c      	adds	r0, #12
 80059e6:	60a0      	str	r0, [r4, #8]
 80059e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059ec:	f7fe f9fe 	bl	8003dec <memset>
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}

080059f4 <__sfp_lock_acquire>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sfp_lock_acquire+0x8>)
 80059f6:	f000 b8b8 	b.w	8005b6a <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	20000234 	.word	0x20000234

08005a00 <__sfp_lock_release>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__sfp_lock_release+0x8>)
 8005a02:	f000 b8b3 	b.w	8005b6c <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000234 	.word	0x20000234

08005a0c <__sinit_lock_acquire>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__sinit_lock_acquire+0x8>)
 8005a0e:	f000 b8ac 	b.w	8005b6a <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	2000022f 	.word	0x2000022f

08005a18 <__sinit_lock_release>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__sinit_lock_release+0x8>)
 8005a1a:	f000 b8a7 	b.w	8005b6c <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	2000022f 	.word	0x2000022f

08005a24 <__sinit>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff0 	bl	8005a0c <__sinit_lock_acquire>
 8005a2c:	69a3      	ldr	r3, [r4, #24]
 8005a2e:	b11b      	cbz	r3, 8005a38 <__sinit+0x14>
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	f7ff bff0 	b.w	8005a18 <__sinit_lock_release>
 8005a38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <__sinit+0x68>)
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <__sinit+0x6c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	bf04      	itt	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	61a3      	streq	r3, [r4, #24]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f820 	bl	8005a94 <__sfp>
 8005a54:	6060      	str	r0, [r4, #4]
 8005a56:	4620      	mov	r0, r4
 8005a58:	f000 f81c 	bl	8005a94 <__sfp>
 8005a5c:	60a0      	str	r0, [r4, #8]
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 f818 	bl	8005a94 <__sfp>
 8005a64:	2200      	movs	r2, #0
 8005a66:	60e0      	str	r0, [r4, #12]
 8005a68:	2104      	movs	r1, #4
 8005a6a:	6860      	ldr	r0, [r4, #4]
 8005a6c:	f7ff ff82 	bl	8005974 <std>
 8005a70:	68a0      	ldr	r0, [r4, #8]
 8005a72:	2201      	movs	r2, #1
 8005a74:	2109      	movs	r1, #9
 8005a76:	f7ff ff7d 	bl	8005974 <std>
 8005a7a:	68e0      	ldr	r0, [r4, #12]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	2112      	movs	r1, #18
 8005a80:	f7ff ff78 	bl	8005974 <std>
 8005a84:	2301      	movs	r3, #1
 8005a86:	61a3      	str	r3, [r4, #24]
 8005a88:	e7d2      	b.n	8005a30 <__sinit+0xc>
 8005a8a:	bf00      	nop
 8005a8c:	08008204 	.word	0x08008204
 8005a90:	080059bd 	.word	0x080059bd

08005a94 <__sfp>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	4607      	mov	r7, r0
 8005a98:	f7ff ffac 	bl	80059f4 <__sfp_lock_acquire>
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <__sfp+0x84>)
 8005a9e:	681e      	ldr	r6, [r3, #0]
 8005aa0:	69b3      	ldr	r3, [r6, #24]
 8005aa2:	b913      	cbnz	r3, 8005aaa <__sfp+0x16>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7ff ffbd 	bl	8005a24 <__sinit>
 8005aaa:	3648      	adds	r6, #72	; 0x48
 8005aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	d503      	bpl.n	8005abc <__sfp+0x28>
 8005ab4:	6833      	ldr	r3, [r6, #0]
 8005ab6:	b30b      	cbz	r3, 8005afc <__sfp+0x68>
 8005ab8:	6836      	ldr	r6, [r6, #0]
 8005aba:	e7f7      	b.n	8005aac <__sfp+0x18>
 8005abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ac0:	b9d5      	cbnz	r5, 8005af8 <__sfp+0x64>
 8005ac2:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <__sfp+0x88>)
 8005ac4:	60e3      	str	r3, [r4, #12]
 8005ac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aca:	6665      	str	r5, [r4, #100]	; 0x64
 8005acc:	f000 f84c 	bl	8005b68 <__retarget_lock_init_recursive>
 8005ad0:	f7ff ff96 	bl	8005a00 <__sfp_lock_release>
 8005ad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005adc:	6025      	str	r5, [r4, #0]
 8005ade:	61a5      	str	r5, [r4, #24]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ae8:	f7fe f980 	bl	8003dec <memset>
 8005aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af4:	4620      	mov	r0, r4
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	3468      	adds	r4, #104	; 0x68
 8005afa:	e7d9      	b.n	8005ab0 <__sfp+0x1c>
 8005afc:	2104      	movs	r1, #4
 8005afe:	4638      	mov	r0, r7
 8005b00:	f7ff ff62 	bl	80059c8 <__sfmoreglue>
 8005b04:	4604      	mov	r4, r0
 8005b06:	6030      	str	r0, [r6, #0]
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d1d5      	bne.n	8005ab8 <__sfp+0x24>
 8005b0c:	f7ff ff78 	bl	8005a00 <__sfp_lock_release>
 8005b10:	230c      	movs	r3, #12
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	e7ee      	b.n	8005af4 <__sfp+0x60>
 8005b16:	bf00      	nop
 8005b18:	08008204 	.word	0x08008204
 8005b1c:	ffff0001 	.word	0xffff0001

08005b20 <_fwalk_reent>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	4606      	mov	r6, r0
 8005b26:	4688      	mov	r8, r1
 8005b28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b2c:	2700      	movs	r7, #0
 8005b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b32:	f1b9 0901 	subs.w	r9, r9, #1
 8005b36:	d505      	bpl.n	8005b44 <_fwalk_reent+0x24>
 8005b38:	6824      	ldr	r4, [r4, #0]
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d1f7      	bne.n	8005b2e <_fwalk_reent+0xe>
 8005b3e:	4638      	mov	r0, r7
 8005b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d907      	bls.n	8005b5a <_fwalk_reent+0x3a>
 8005b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d003      	beq.n	8005b5a <_fwalk_reent+0x3a>
 8005b52:	4629      	mov	r1, r5
 8005b54:	4630      	mov	r0, r6
 8005b56:	47c0      	blx	r8
 8005b58:	4307      	orrs	r7, r0
 8005b5a:	3568      	adds	r5, #104	; 0x68
 8005b5c:	e7e9      	b.n	8005b32 <_fwalk_reent+0x12>
	...

08005b60 <_localeconv_r>:
 8005b60:	4800      	ldr	r0, [pc, #0]	; (8005b64 <_localeconv_r+0x4>)
 8005b62:	4770      	bx	lr
 8005b64:	20000160 	.word	0x20000160

08005b68 <__retarget_lock_init_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <__retarget_lock_acquire_recursive>:
 8005b6a:	4770      	bx	lr

08005b6c <__retarget_lock_release_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__swhatbuf_r>:
 8005b6e:	b570      	push	{r4, r5, r6, lr}
 8005b70:	460e      	mov	r6, r1
 8005b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b76:	2900      	cmp	r1, #0
 8005b78:	b096      	sub	sp, #88	; 0x58
 8005b7a:	4614      	mov	r4, r2
 8005b7c:	461d      	mov	r5, r3
 8005b7e:	da07      	bge.n	8005b90 <__swhatbuf_r+0x22>
 8005b80:	2300      	movs	r3, #0
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	89b3      	ldrh	r3, [r6, #12]
 8005b86:	061a      	lsls	r2, r3, #24
 8005b88:	d410      	bmi.n	8005bac <__swhatbuf_r+0x3e>
 8005b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b8e:	e00e      	b.n	8005bae <__swhatbuf_r+0x40>
 8005b90:	466a      	mov	r2, sp
 8005b92:	f000 fdcb 	bl	800672c <_fstat_r>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	dbf2      	blt.n	8005b80 <__swhatbuf_r+0x12>
 8005b9a:	9a01      	ldr	r2, [sp, #4]
 8005b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ba4:	425a      	negs	r2, r3
 8005ba6:	415a      	adcs	r2, r3
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	e7ee      	b.n	8005b8a <__swhatbuf_r+0x1c>
 8005bac:	2340      	movs	r3, #64	; 0x40
 8005bae:	2000      	movs	r0, #0
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	b016      	add	sp, #88	; 0x58
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bb8 <__smakebuf_r>:
 8005bb8:	898b      	ldrh	r3, [r1, #12]
 8005bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bbc:	079d      	lsls	r5, r3, #30
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	d507      	bpl.n	8005bd4 <__smakebuf_r+0x1c>
 8005bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	6163      	str	r3, [r4, #20]
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	ab01      	add	r3, sp, #4
 8005bd6:	466a      	mov	r2, sp
 8005bd8:	f7ff ffc9 	bl	8005b6e <__swhatbuf_r>
 8005bdc:	9900      	ldr	r1, [sp, #0]
 8005bde:	4605      	mov	r5, r0
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7fe f96b 	bl	8003ebc <_malloc_r>
 8005be6:	b948      	cbnz	r0, 8005bfc <__smakebuf_r+0x44>
 8005be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bec:	059a      	lsls	r2, r3, #22
 8005bee:	d4ef      	bmi.n	8005bd0 <__smakebuf_r+0x18>
 8005bf0:	f023 0303 	bic.w	r3, r3, #3
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	e7e3      	b.n	8005bc4 <__smakebuf_r+0xc>
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <__smakebuf_r+0x7c>)
 8005bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	6020      	str	r0, [r4, #0]
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	9b00      	ldr	r3, [sp, #0]
 8005c0c:	6163      	str	r3, [r4, #20]
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	6120      	str	r0, [r4, #16]
 8005c12:	b15b      	cbz	r3, 8005c2c <__smakebuf_r+0x74>
 8005c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 fd99 	bl	8006750 <_isatty_r>
 8005c1e:	b128      	cbz	r0, 8005c2c <__smakebuf_r+0x74>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	89a0      	ldrh	r0, [r4, #12]
 8005c2e:	4305      	orrs	r5, r0
 8005c30:	81a5      	strh	r5, [r4, #12]
 8005c32:	e7cd      	b.n	8005bd0 <__smakebuf_r+0x18>
 8005c34:	080059bd 	.word	0x080059bd

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f7ff bf96 	b.w	8005b6a <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000230 	.word	0x20000230

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f7ff bf91 	b.w	8005b6c <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000230 	.word	0x20000230

08005c50 <_Balloc>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	b976      	cbnz	r6, 8005c78 <_Balloc+0x28>
 8005c5a:	2010      	movs	r0, #16
 8005c5c:	f7fe f8a8 	bl	8003db0 <malloc>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6260      	str	r0, [r4, #36]	; 0x24
 8005c64:	b920      	cbnz	r0, 8005c70 <_Balloc+0x20>
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <_Balloc+0x78>)
 8005c68:	4818      	ldr	r0, [pc, #96]	; (8005ccc <_Balloc+0x7c>)
 8005c6a:	2166      	movs	r1, #102	; 0x66
 8005c6c:	f000 fd1e 	bl	80066ac <__assert_func>
 8005c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c74:	6006      	str	r6, [r0, #0]
 8005c76:	60c6      	str	r6, [r0, #12]
 8005c78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c7a:	68f3      	ldr	r3, [r6, #12]
 8005c7c:	b183      	cbz	r3, 8005ca0 <_Balloc+0x50>
 8005c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c86:	b9b8      	cbnz	r0, 8005cb8 <_Balloc+0x68>
 8005c88:	2101      	movs	r1, #1
 8005c8a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c8e:	1d72      	adds	r2, r6, #5
 8005c90:	0092      	lsls	r2, r2, #2
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7fe f8b2 	bl	8003dfc <_calloc_r>
 8005c98:	b160      	cbz	r0, 8005cb4 <_Balloc+0x64>
 8005c9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c9e:	e00e      	b.n	8005cbe <_Balloc+0x6e>
 8005ca0:	2221      	movs	r2, #33	; 0x21
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7fe f8a9 	bl	8003dfc <_calloc_r>
 8005caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cac:	60f0      	str	r0, [r6, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e4      	bne.n	8005c7e <_Balloc+0x2e>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	6802      	ldr	r2, [r0, #0]
 8005cba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cc4:	e7f7      	b.n	8005cb6 <_Balloc+0x66>
 8005cc6:	bf00      	nop
 8005cc8:	08008249 	.word	0x08008249
 8005ccc:	08008330 	.word	0x08008330

08005cd0 <_Bfree>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b976      	cbnz	r6, 8005cf8 <_Bfree+0x28>
 8005cda:	2010      	movs	r0, #16
 8005cdc:	f7fe f868 	bl	8003db0 <malloc>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6268      	str	r0, [r5, #36]	; 0x24
 8005ce4:	b920      	cbnz	r0, 8005cf0 <_Bfree+0x20>
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <_Bfree+0x3c>)
 8005ce8:	4809      	ldr	r0, [pc, #36]	; (8005d10 <_Bfree+0x40>)
 8005cea:	218a      	movs	r1, #138	; 0x8a
 8005cec:	f000 fcde 	bl	80066ac <__assert_func>
 8005cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cf4:	6006      	str	r6, [r0, #0]
 8005cf6:	60c6      	str	r6, [r0, #12]
 8005cf8:	b13c      	cbz	r4, 8005d0a <_Bfree+0x3a>
 8005cfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cfc:	6862      	ldr	r2, [r4, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d04:	6021      	str	r1, [r4, #0]
 8005d06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	08008249 	.word	0x08008249
 8005d10:	08008330 	.word	0x08008330

08005d14 <__multadd>:
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d18:	690e      	ldr	r6, [r1, #16]
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	4698      	mov	r8, r3
 8005d1e:	460c      	mov	r4, r1
 8005d20:	f101 0014 	add.w	r0, r1, #20
 8005d24:	2300      	movs	r3, #0
 8005d26:	6805      	ldr	r5, [r0, #0]
 8005d28:	b2a9      	uxth	r1, r5
 8005d2a:	fb02 8101 	mla	r1, r2, r1, r8
 8005d2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005d32:	0c2d      	lsrs	r5, r5, #16
 8005d34:	fb02 c505 	mla	r5, r2, r5, ip
 8005d38:	b289      	uxth	r1, r1
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005d40:	429e      	cmp	r6, r3
 8005d42:	f840 1b04 	str.w	r1, [r0], #4
 8005d46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005d4a:	dcec      	bgt.n	8005d26 <__multadd+0x12>
 8005d4c:	f1b8 0f00 	cmp.w	r8, #0
 8005d50:	d022      	beq.n	8005d98 <__multadd+0x84>
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	42b3      	cmp	r3, r6
 8005d56:	dc19      	bgt.n	8005d8c <__multadd+0x78>
 8005d58:	6861      	ldr	r1, [r4, #4]
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	f7ff ff77 	bl	8005c50 <_Balloc>
 8005d62:	4605      	mov	r5, r0
 8005d64:	b928      	cbnz	r0, 8005d72 <__multadd+0x5e>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <__multadd+0x8c>)
 8005d6a:	480e      	ldr	r0, [pc, #56]	; (8005da4 <__multadd+0x90>)
 8005d6c:	21b5      	movs	r1, #181	; 0xb5
 8005d6e:	f000 fc9d 	bl	80066ac <__assert_func>
 8005d72:	6922      	ldr	r2, [r4, #16]
 8005d74:	3202      	adds	r2, #2
 8005d76:	f104 010c 	add.w	r1, r4, #12
 8005d7a:	0092      	lsls	r2, r2, #2
 8005d7c:	300c      	adds	r0, #12
 8005d7e:	f7fe f827 	bl	8003dd0 <memcpy>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff ffa3 	bl	8005cd0 <_Bfree>
 8005d8a:	462c      	mov	r4, r5
 8005d8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d90:	3601      	adds	r6, #1
 8005d92:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d96:	6126      	str	r6, [r4, #16]
 8005d98:	4620      	mov	r0, r4
 8005d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9e:	bf00      	nop
 8005da0:	080082bf 	.word	0x080082bf
 8005da4:	08008330 	.word	0x08008330

08005da8 <__hi0bits>:
 8005da8:	0c03      	lsrs	r3, r0, #16
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	b9d3      	cbnz	r3, 8005de4 <__hi0bits+0x3c>
 8005dae:	0400      	lsls	r0, r0, #16
 8005db0:	2310      	movs	r3, #16
 8005db2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005db6:	bf04      	itt	eq
 8005db8:	0200      	lsleq	r0, r0, #8
 8005dba:	3308      	addeq	r3, #8
 8005dbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005dc0:	bf04      	itt	eq
 8005dc2:	0100      	lsleq	r0, r0, #4
 8005dc4:	3304      	addeq	r3, #4
 8005dc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005dca:	bf04      	itt	eq
 8005dcc:	0080      	lsleq	r0, r0, #2
 8005dce:	3302      	addeq	r3, #2
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	db05      	blt.n	8005de0 <__hi0bits+0x38>
 8005dd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005dd8:	f103 0301 	add.w	r3, r3, #1
 8005ddc:	bf08      	it	eq
 8005dde:	2320      	moveq	r3, #32
 8005de0:	4618      	mov	r0, r3
 8005de2:	4770      	bx	lr
 8005de4:	2300      	movs	r3, #0
 8005de6:	e7e4      	b.n	8005db2 <__hi0bits+0xa>

08005de8 <__lo0bits>:
 8005de8:	6803      	ldr	r3, [r0, #0]
 8005dea:	f013 0207 	ands.w	r2, r3, #7
 8005dee:	4601      	mov	r1, r0
 8005df0:	d00b      	beq.n	8005e0a <__lo0bits+0x22>
 8005df2:	07da      	lsls	r2, r3, #31
 8005df4:	d424      	bmi.n	8005e40 <__lo0bits+0x58>
 8005df6:	0798      	lsls	r0, r3, #30
 8005df8:	bf49      	itett	mi
 8005dfa:	085b      	lsrmi	r3, r3, #1
 8005dfc:	089b      	lsrpl	r3, r3, #2
 8005dfe:	2001      	movmi	r0, #1
 8005e00:	600b      	strmi	r3, [r1, #0]
 8005e02:	bf5c      	itt	pl
 8005e04:	600b      	strpl	r3, [r1, #0]
 8005e06:	2002      	movpl	r0, #2
 8005e08:	4770      	bx	lr
 8005e0a:	b298      	uxth	r0, r3
 8005e0c:	b9b0      	cbnz	r0, 8005e3c <__lo0bits+0x54>
 8005e0e:	0c1b      	lsrs	r3, r3, #16
 8005e10:	2010      	movs	r0, #16
 8005e12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e16:	bf04      	itt	eq
 8005e18:	0a1b      	lsreq	r3, r3, #8
 8005e1a:	3008      	addeq	r0, #8
 8005e1c:	071a      	lsls	r2, r3, #28
 8005e1e:	bf04      	itt	eq
 8005e20:	091b      	lsreq	r3, r3, #4
 8005e22:	3004      	addeq	r0, #4
 8005e24:	079a      	lsls	r2, r3, #30
 8005e26:	bf04      	itt	eq
 8005e28:	089b      	lsreq	r3, r3, #2
 8005e2a:	3002      	addeq	r0, #2
 8005e2c:	07da      	lsls	r2, r3, #31
 8005e2e:	d403      	bmi.n	8005e38 <__lo0bits+0x50>
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	f100 0001 	add.w	r0, r0, #1
 8005e36:	d005      	beq.n	8005e44 <__lo0bits+0x5c>
 8005e38:	600b      	str	r3, [r1, #0]
 8005e3a:	4770      	bx	lr
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	e7e8      	b.n	8005e12 <__lo0bits+0x2a>
 8005e40:	2000      	movs	r0, #0
 8005e42:	4770      	bx	lr
 8005e44:	2020      	movs	r0, #32
 8005e46:	4770      	bx	lr

08005e48 <__i2b>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	f7ff feff 	bl	8005c50 <_Balloc>
 8005e52:	4602      	mov	r2, r0
 8005e54:	b928      	cbnz	r0, 8005e62 <__i2b+0x1a>
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <__i2b+0x24>)
 8005e58:	4805      	ldr	r0, [pc, #20]	; (8005e70 <__i2b+0x28>)
 8005e5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e5e:	f000 fc25 	bl	80066ac <__assert_func>
 8005e62:	2301      	movs	r3, #1
 8005e64:	6144      	str	r4, [r0, #20]
 8005e66:	6103      	str	r3, [r0, #16]
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	bf00      	nop
 8005e6c:	080082bf 	.word	0x080082bf
 8005e70:	08008330 	.word	0x08008330

08005e74 <__multiply>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	4614      	mov	r4, r2
 8005e7a:	690a      	ldr	r2, [r1, #16]
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bfb8      	it	lt
 8005e82:	460b      	movlt	r3, r1
 8005e84:	460d      	mov	r5, r1
 8005e86:	bfbc      	itt	lt
 8005e88:	4625      	movlt	r5, r4
 8005e8a:	461c      	movlt	r4, r3
 8005e8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e94:	68ab      	ldr	r3, [r5, #8]
 8005e96:	6869      	ldr	r1, [r5, #4]
 8005e98:	eb0a 0709 	add.w	r7, sl, r9
 8005e9c:	42bb      	cmp	r3, r7
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	bfb8      	it	lt
 8005ea2:	3101      	addlt	r1, #1
 8005ea4:	f7ff fed4 	bl	8005c50 <_Balloc>
 8005ea8:	b930      	cbnz	r0, 8005eb8 <__multiply+0x44>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	4b42      	ldr	r3, [pc, #264]	; (8005fb8 <__multiply+0x144>)
 8005eae:	4843      	ldr	r0, [pc, #268]	; (8005fbc <__multiply+0x148>)
 8005eb0:	f240 115d 	movw	r1, #349	; 0x15d
 8005eb4:	f000 fbfa 	bl	80066ac <__assert_func>
 8005eb8:	f100 0614 	add.w	r6, r0, #20
 8005ebc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4543      	cmp	r3, r8
 8005ec6:	d31e      	bcc.n	8005f06 <__multiply+0x92>
 8005ec8:	f105 0c14 	add.w	ip, r5, #20
 8005ecc:	f104 0314 	add.w	r3, r4, #20
 8005ed0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005ed4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005ed8:	9202      	str	r2, [sp, #8]
 8005eda:	ebac 0205 	sub.w	r2, ip, r5
 8005ede:	3a15      	subs	r2, #21
 8005ee0:	f022 0203 	bic.w	r2, r2, #3
 8005ee4:	3204      	adds	r2, #4
 8005ee6:	f105 0115 	add.w	r1, r5, #21
 8005eea:	458c      	cmp	ip, r1
 8005eec:	bf38      	it	cc
 8005eee:	2204      	movcc	r2, #4
 8005ef0:	9201      	str	r2, [sp, #4]
 8005ef2:	9a02      	ldr	r2, [sp, #8]
 8005ef4:	9303      	str	r3, [sp, #12]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d808      	bhi.n	8005f0c <__multiply+0x98>
 8005efa:	2f00      	cmp	r7, #0
 8005efc:	dc55      	bgt.n	8005faa <__multiply+0x136>
 8005efe:	6107      	str	r7, [r0, #16]
 8005f00:	b005      	add	sp, #20
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	f843 2b04 	str.w	r2, [r3], #4
 8005f0a:	e7db      	b.n	8005ec4 <__multiply+0x50>
 8005f0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f10:	f1ba 0f00 	cmp.w	sl, #0
 8005f14:	d020      	beq.n	8005f58 <__multiply+0xe4>
 8005f16:	f105 0e14 	add.w	lr, r5, #20
 8005f1a:	46b1      	mov	r9, r6
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005f22:	f8d9 b000 	ldr.w	fp, [r9]
 8005f26:	b2a1      	uxth	r1, r4
 8005f28:	fa1f fb8b 	uxth.w	fp, fp
 8005f2c:	fb0a b101 	mla	r1, sl, r1, fp
 8005f30:	4411      	add	r1, r2
 8005f32:	f8d9 2000 	ldr.w	r2, [r9]
 8005f36:	0c24      	lsrs	r4, r4, #16
 8005f38:	0c12      	lsrs	r2, r2, #16
 8005f3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8005f3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005f42:	b289      	uxth	r1, r1
 8005f44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f48:	45f4      	cmp	ip, lr
 8005f4a:	f849 1b04 	str.w	r1, [r9], #4
 8005f4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005f52:	d8e4      	bhi.n	8005f1e <__multiply+0xaa>
 8005f54:	9901      	ldr	r1, [sp, #4]
 8005f56:	5072      	str	r2, [r6, r1]
 8005f58:	9a03      	ldr	r2, [sp, #12]
 8005f5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	f1b9 0f00 	cmp.w	r9, #0
 8005f64:	d01f      	beq.n	8005fa6 <__multiply+0x132>
 8005f66:	6834      	ldr	r4, [r6, #0]
 8005f68:	f105 0114 	add.w	r1, r5, #20
 8005f6c:	46b6      	mov	lr, r6
 8005f6e:	f04f 0a00 	mov.w	sl, #0
 8005f72:	880a      	ldrh	r2, [r1, #0]
 8005f74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f78:	fb09 b202 	mla	r2, r9, r2, fp
 8005f7c:	4492      	add	sl, r2
 8005f7e:	b2a4      	uxth	r4, r4
 8005f80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f84:	f84e 4b04 	str.w	r4, [lr], #4
 8005f88:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f8c:	f8be 2000 	ldrh.w	r2, [lr]
 8005f90:	0c24      	lsrs	r4, r4, #16
 8005f92:	fb09 2404 	mla	r4, r9, r4, r2
 8005f96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f9a:	458c      	cmp	ip, r1
 8005f9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005fa0:	d8e7      	bhi.n	8005f72 <__multiply+0xfe>
 8005fa2:	9a01      	ldr	r2, [sp, #4]
 8005fa4:	50b4      	str	r4, [r6, r2]
 8005fa6:	3604      	adds	r6, #4
 8005fa8:	e7a3      	b.n	8005ef2 <__multiply+0x7e>
 8005faa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1a5      	bne.n	8005efe <__multiply+0x8a>
 8005fb2:	3f01      	subs	r7, #1
 8005fb4:	e7a1      	b.n	8005efa <__multiply+0x86>
 8005fb6:	bf00      	nop
 8005fb8:	080082bf 	.word	0x080082bf
 8005fbc:	08008330 	.word	0x08008330

08005fc0 <__pow5mult>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	4615      	mov	r5, r2
 8005fc6:	f012 0203 	ands.w	r2, r2, #3
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460f      	mov	r7, r1
 8005fce:	d007      	beq.n	8005fe0 <__pow5mult+0x20>
 8005fd0:	4c25      	ldr	r4, [pc, #148]	; (8006068 <__pow5mult+0xa8>)
 8005fd2:	3a01      	subs	r2, #1
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fda:	f7ff fe9b 	bl	8005d14 <__multadd>
 8005fde:	4607      	mov	r7, r0
 8005fe0:	10ad      	asrs	r5, r5, #2
 8005fe2:	d03d      	beq.n	8006060 <__pow5mult+0xa0>
 8005fe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fe6:	b97c      	cbnz	r4, 8006008 <__pow5mult+0x48>
 8005fe8:	2010      	movs	r0, #16
 8005fea:	f7fd fee1 	bl	8003db0 <malloc>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ff2:	b928      	cbnz	r0, 8006000 <__pow5mult+0x40>
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	; (800606c <__pow5mult+0xac>)
 8005ff6:	481e      	ldr	r0, [pc, #120]	; (8006070 <__pow5mult+0xb0>)
 8005ff8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ffc:	f000 fb56 	bl	80066ac <__assert_func>
 8006000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006004:	6004      	str	r4, [r0, #0]
 8006006:	60c4      	str	r4, [r0, #12]
 8006008:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800600c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006010:	b94c      	cbnz	r4, 8006026 <__pow5mult+0x66>
 8006012:	f240 2171 	movw	r1, #625	; 0x271
 8006016:	4630      	mov	r0, r6
 8006018:	f7ff ff16 	bl	8005e48 <__i2b>
 800601c:	2300      	movs	r3, #0
 800601e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006022:	4604      	mov	r4, r0
 8006024:	6003      	str	r3, [r0, #0]
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	07eb      	lsls	r3, r5, #31
 800602c:	d50a      	bpl.n	8006044 <__pow5mult+0x84>
 800602e:	4639      	mov	r1, r7
 8006030:	4622      	mov	r2, r4
 8006032:	4630      	mov	r0, r6
 8006034:	f7ff ff1e 	bl	8005e74 <__multiply>
 8006038:	4639      	mov	r1, r7
 800603a:	4680      	mov	r8, r0
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff fe47 	bl	8005cd0 <_Bfree>
 8006042:	4647      	mov	r7, r8
 8006044:	106d      	asrs	r5, r5, #1
 8006046:	d00b      	beq.n	8006060 <__pow5mult+0xa0>
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	b938      	cbnz	r0, 800605c <__pow5mult+0x9c>
 800604c:	4622      	mov	r2, r4
 800604e:	4621      	mov	r1, r4
 8006050:	4630      	mov	r0, r6
 8006052:	f7ff ff0f 	bl	8005e74 <__multiply>
 8006056:	6020      	str	r0, [r4, #0]
 8006058:	f8c0 9000 	str.w	r9, [r0]
 800605c:	4604      	mov	r4, r0
 800605e:	e7e4      	b.n	800602a <__pow5mult+0x6a>
 8006060:	4638      	mov	r0, r7
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	bf00      	nop
 8006068:	08008480 	.word	0x08008480
 800606c:	08008249 	.word	0x08008249
 8006070:	08008330 	.word	0x08008330

08006074 <__lshift>:
 8006074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	460c      	mov	r4, r1
 800607a:	6849      	ldr	r1, [r1, #4]
 800607c:	6923      	ldr	r3, [r4, #16]
 800607e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006082:	68a3      	ldr	r3, [r4, #8]
 8006084:	4607      	mov	r7, r0
 8006086:	4691      	mov	r9, r2
 8006088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800608c:	f108 0601 	add.w	r6, r8, #1
 8006090:	42b3      	cmp	r3, r6
 8006092:	db0b      	blt.n	80060ac <__lshift+0x38>
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff fddb 	bl	8005c50 <_Balloc>
 800609a:	4605      	mov	r5, r0
 800609c:	b948      	cbnz	r0, 80060b2 <__lshift+0x3e>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <__lshift+0xd0>)
 80060a2:	4829      	ldr	r0, [pc, #164]	; (8006148 <__lshift+0xd4>)
 80060a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060a8:	f000 fb00 	bl	80066ac <__assert_func>
 80060ac:	3101      	adds	r1, #1
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	e7ee      	b.n	8006090 <__lshift+0x1c>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f100 0114 	add.w	r1, r0, #20
 80060b8:	f100 0210 	add.w	r2, r0, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	4553      	cmp	r3, sl
 80060c0:	db33      	blt.n	800612a <__lshift+0xb6>
 80060c2:	6920      	ldr	r0, [r4, #16]
 80060c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060c8:	f104 0314 	add.w	r3, r4, #20
 80060cc:	f019 091f 	ands.w	r9, r9, #31
 80060d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060d8:	d02b      	beq.n	8006132 <__lshift+0xbe>
 80060da:	f1c9 0e20 	rsb	lr, r9, #32
 80060de:	468a      	mov	sl, r1
 80060e0:	2200      	movs	r2, #0
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	fa00 f009 	lsl.w	r0, r0, r9
 80060e8:	4302      	orrs	r2, r0
 80060ea:	f84a 2b04 	str.w	r2, [sl], #4
 80060ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f2:	459c      	cmp	ip, r3
 80060f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80060f8:	d8f3      	bhi.n	80060e2 <__lshift+0x6e>
 80060fa:	ebac 0304 	sub.w	r3, ip, r4
 80060fe:	3b15      	subs	r3, #21
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	3304      	adds	r3, #4
 8006106:	f104 0015 	add.w	r0, r4, #21
 800610a:	4584      	cmp	ip, r0
 800610c:	bf38      	it	cc
 800610e:	2304      	movcc	r3, #4
 8006110:	50ca      	str	r2, [r1, r3]
 8006112:	b10a      	cbz	r2, 8006118 <__lshift+0xa4>
 8006114:	f108 0602 	add.w	r6, r8, #2
 8006118:	3e01      	subs	r6, #1
 800611a:	4638      	mov	r0, r7
 800611c:	612e      	str	r6, [r5, #16]
 800611e:	4621      	mov	r1, r4
 8006120:	f7ff fdd6 	bl	8005cd0 <_Bfree>
 8006124:	4628      	mov	r0, r5
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612a:	f842 0f04 	str.w	r0, [r2, #4]!
 800612e:	3301      	adds	r3, #1
 8006130:	e7c5      	b.n	80060be <__lshift+0x4a>
 8006132:	3904      	subs	r1, #4
 8006134:	f853 2b04 	ldr.w	r2, [r3], #4
 8006138:	f841 2f04 	str.w	r2, [r1, #4]!
 800613c:	459c      	cmp	ip, r3
 800613e:	d8f9      	bhi.n	8006134 <__lshift+0xc0>
 8006140:	e7ea      	b.n	8006118 <__lshift+0xa4>
 8006142:	bf00      	nop
 8006144:	080082bf 	.word	0x080082bf
 8006148:	08008330 	.word	0x08008330

0800614c <__mcmp>:
 800614c:	b530      	push	{r4, r5, lr}
 800614e:	6902      	ldr	r2, [r0, #16]
 8006150:	690c      	ldr	r4, [r1, #16]
 8006152:	1b12      	subs	r2, r2, r4
 8006154:	d10e      	bne.n	8006174 <__mcmp+0x28>
 8006156:	f100 0314 	add.w	r3, r0, #20
 800615a:	3114      	adds	r1, #20
 800615c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006160:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006164:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006168:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800616c:	42a5      	cmp	r5, r4
 800616e:	d003      	beq.n	8006178 <__mcmp+0x2c>
 8006170:	d305      	bcc.n	800617e <__mcmp+0x32>
 8006172:	2201      	movs	r2, #1
 8006174:	4610      	mov	r0, r2
 8006176:	bd30      	pop	{r4, r5, pc}
 8006178:	4283      	cmp	r3, r0
 800617a:	d3f3      	bcc.n	8006164 <__mcmp+0x18>
 800617c:	e7fa      	b.n	8006174 <__mcmp+0x28>
 800617e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006182:	e7f7      	b.n	8006174 <__mcmp+0x28>

08006184 <__mdiff>:
 8006184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	460c      	mov	r4, r1
 800618a:	4606      	mov	r6, r0
 800618c:	4611      	mov	r1, r2
 800618e:	4620      	mov	r0, r4
 8006190:	4617      	mov	r7, r2
 8006192:	f7ff ffdb 	bl	800614c <__mcmp>
 8006196:	1e05      	subs	r5, r0, #0
 8006198:	d110      	bne.n	80061bc <__mdiff+0x38>
 800619a:	4629      	mov	r1, r5
 800619c:	4630      	mov	r0, r6
 800619e:	f7ff fd57 	bl	8005c50 <_Balloc>
 80061a2:	b930      	cbnz	r0, 80061b2 <__mdiff+0x2e>
 80061a4:	4b39      	ldr	r3, [pc, #228]	; (800628c <__mdiff+0x108>)
 80061a6:	4602      	mov	r2, r0
 80061a8:	f240 2132 	movw	r1, #562	; 0x232
 80061ac:	4838      	ldr	r0, [pc, #224]	; (8006290 <__mdiff+0x10c>)
 80061ae:	f000 fa7d 	bl	80066ac <__assert_func>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061bc:	bfa4      	itt	ge
 80061be:	463b      	movge	r3, r7
 80061c0:	4627      	movge	r7, r4
 80061c2:	4630      	mov	r0, r6
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	bfa6      	itte	ge
 80061c8:	461c      	movge	r4, r3
 80061ca:	2500      	movge	r5, #0
 80061cc:	2501      	movlt	r5, #1
 80061ce:	f7ff fd3f 	bl	8005c50 <_Balloc>
 80061d2:	b920      	cbnz	r0, 80061de <__mdiff+0x5a>
 80061d4:	4b2d      	ldr	r3, [pc, #180]	; (800628c <__mdiff+0x108>)
 80061d6:	4602      	mov	r2, r0
 80061d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061dc:	e7e6      	b.n	80061ac <__mdiff+0x28>
 80061de:	693e      	ldr	r6, [r7, #16]
 80061e0:	60c5      	str	r5, [r0, #12]
 80061e2:	6925      	ldr	r5, [r4, #16]
 80061e4:	f107 0114 	add.w	r1, r7, #20
 80061e8:	f104 0914 	add.w	r9, r4, #20
 80061ec:	f100 0e14 	add.w	lr, r0, #20
 80061f0:	f107 0210 	add.w	r2, r7, #16
 80061f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80061f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80061fc:	46f2      	mov	sl, lr
 80061fe:	2700      	movs	r7, #0
 8006200:	f859 3b04 	ldr.w	r3, [r9], #4
 8006204:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006208:	fa1f f883 	uxth.w	r8, r3
 800620c:	fa17 f78b 	uxtah	r7, r7, fp
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	eba7 0808 	sub.w	r8, r7, r8
 8006216:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800621a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800621e:	fa1f f888 	uxth.w	r8, r8
 8006222:	141f      	asrs	r7, r3, #16
 8006224:	454d      	cmp	r5, r9
 8006226:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800622a:	f84a 3b04 	str.w	r3, [sl], #4
 800622e:	d8e7      	bhi.n	8006200 <__mdiff+0x7c>
 8006230:	1b2b      	subs	r3, r5, r4
 8006232:	3b15      	subs	r3, #21
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	3304      	adds	r3, #4
 800623a:	3415      	adds	r4, #21
 800623c:	42a5      	cmp	r5, r4
 800623e:	bf38      	it	cc
 8006240:	2304      	movcc	r3, #4
 8006242:	4419      	add	r1, r3
 8006244:	4473      	add	r3, lr
 8006246:	469e      	mov	lr, r3
 8006248:	460d      	mov	r5, r1
 800624a:	4565      	cmp	r5, ip
 800624c:	d30e      	bcc.n	800626c <__mdiff+0xe8>
 800624e:	f10c 0203 	add.w	r2, ip, #3
 8006252:	1a52      	subs	r2, r2, r1
 8006254:	f022 0203 	bic.w	r2, r2, #3
 8006258:	3903      	subs	r1, #3
 800625a:	458c      	cmp	ip, r1
 800625c:	bf38      	it	cc
 800625e:	2200      	movcc	r2, #0
 8006260:	441a      	add	r2, r3
 8006262:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006266:	b17b      	cbz	r3, 8006288 <__mdiff+0x104>
 8006268:	6106      	str	r6, [r0, #16]
 800626a:	e7a5      	b.n	80061b8 <__mdiff+0x34>
 800626c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006270:	fa17 f488 	uxtah	r4, r7, r8
 8006274:	1422      	asrs	r2, r4, #16
 8006276:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800627a:	b2a4      	uxth	r4, r4
 800627c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006280:	f84e 4b04 	str.w	r4, [lr], #4
 8006284:	1417      	asrs	r7, r2, #16
 8006286:	e7e0      	b.n	800624a <__mdiff+0xc6>
 8006288:	3e01      	subs	r6, #1
 800628a:	e7ea      	b.n	8006262 <__mdiff+0xde>
 800628c:	080082bf 	.word	0x080082bf
 8006290:	08008330 	.word	0x08008330

08006294 <__d2b>:
 8006294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006298:	4689      	mov	r9, r1
 800629a:	2101      	movs	r1, #1
 800629c:	ec57 6b10 	vmov	r6, r7, d0
 80062a0:	4690      	mov	r8, r2
 80062a2:	f7ff fcd5 	bl	8005c50 <_Balloc>
 80062a6:	4604      	mov	r4, r0
 80062a8:	b930      	cbnz	r0, 80062b8 <__d2b+0x24>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b25      	ldr	r3, [pc, #148]	; (8006344 <__d2b+0xb0>)
 80062ae:	4826      	ldr	r0, [pc, #152]	; (8006348 <__d2b+0xb4>)
 80062b0:	f240 310a 	movw	r1, #778	; 0x30a
 80062b4:	f000 f9fa 	bl	80066ac <__assert_func>
 80062b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80062bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062c0:	bb35      	cbnz	r5, 8006310 <__d2b+0x7c>
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	d028      	beq.n	800631a <__d2b+0x86>
 80062c8:	4668      	mov	r0, sp
 80062ca:	9600      	str	r6, [sp, #0]
 80062cc:	f7ff fd8c 	bl	8005de8 <__lo0bits>
 80062d0:	9900      	ldr	r1, [sp, #0]
 80062d2:	b300      	cbz	r0, 8006316 <__d2b+0x82>
 80062d4:	9a01      	ldr	r2, [sp, #4]
 80062d6:	f1c0 0320 	rsb	r3, r0, #32
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	430b      	orrs	r3, r1
 80062e0:	40c2      	lsrs	r2, r0
 80062e2:	6163      	str	r3, [r4, #20]
 80062e4:	9201      	str	r2, [sp, #4]
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	61a3      	str	r3, [r4, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2202      	movne	r2, #2
 80062f0:	2201      	moveq	r2, #1
 80062f2:	6122      	str	r2, [r4, #16]
 80062f4:	b1d5      	cbz	r5, 800632c <__d2b+0x98>
 80062f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062fa:	4405      	add	r5, r0
 80062fc:	f8c9 5000 	str.w	r5, [r9]
 8006300:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006304:	f8c8 0000 	str.w	r0, [r8]
 8006308:	4620      	mov	r0, r4
 800630a:	b003      	add	sp, #12
 800630c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006314:	e7d5      	b.n	80062c2 <__d2b+0x2e>
 8006316:	6161      	str	r1, [r4, #20]
 8006318:	e7e5      	b.n	80062e6 <__d2b+0x52>
 800631a:	a801      	add	r0, sp, #4
 800631c:	f7ff fd64 	bl	8005de8 <__lo0bits>
 8006320:	9b01      	ldr	r3, [sp, #4]
 8006322:	6163      	str	r3, [r4, #20]
 8006324:	2201      	movs	r2, #1
 8006326:	6122      	str	r2, [r4, #16]
 8006328:	3020      	adds	r0, #32
 800632a:	e7e3      	b.n	80062f4 <__d2b+0x60>
 800632c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006330:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006334:	f8c9 0000 	str.w	r0, [r9]
 8006338:	6918      	ldr	r0, [r3, #16]
 800633a:	f7ff fd35 	bl	8005da8 <__hi0bits>
 800633e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006342:	e7df      	b.n	8006304 <__d2b+0x70>
 8006344:	080082bf 	.word	0x080082bf
 8006348:	08008330 	.word	0x08008330

0800634c <__sfputc_r>:
 800634c:	6893      	ldr	r3, [r2, #8]
 800634e:	3b01      	subs	r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	b410      	push	{r4}
 8006354:	6093      	str	r3, [r2, #8]
 8006356:	da08      	bge.n	800636a <__sfputc_r+0x1e>
 8006358:	6994      	ldr	r4, [r2, #24]
 800635a:	42a3      	cmp	r3, r4
 800635c:	db01      	blt.n	8006362 <__sfputc_r+0x16>
 800635e:	290a      	cmp	r1, #10
 8006360:	d103      	bne.n	800636a <__sfputc_r+0x1e>
 8006362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006366:	f7fe bb0b 	b.w	8004980 <__swbuf_r>
 800636a:	6813      	ldr	r3, [r2, #0]
 800636c:	1c58      	adds	r0, r3, #1
 800636e:	6010      	str	r0, [r2, #0]
 8006370:	7019      	strb	r1, [r3, #0]
 8006372:	4608      	mov	r0, r1
 8006374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006378:	4770      	bx	lr

0800637a <__sfputs_r>:
 800637a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637c:	4606      	mov	r6, r0
 800637e:	460f      	mov	r7, r1
 8006380:	4614      	mov	r4, r2
 8006382:	18d5      	adds	r5, r2, r3
 8006384:	42ac      	cmp	r4, r5
 8006386:	d101      	bne.n	800638c <__sfputs_r+0x12>
 8006388:	2000      	movs	r0, #0
 800638a:	e007      	b.n	800639c <__sfputs_r+0x22>
 800638c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006390:	463a      	mov	r2, r7
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ffda 	bl	800634c <__sfputc_r>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d1f3      	bne.n	8006384 <__sfputs_r+0xa>
 800639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063a0 <_vfiprintf_r>:
 80063a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	460d      	mov	r5, r1
 80063a6:	b09d      	sub	sp, #116	; 0x74
 80063a8:	4614      	mov	r4, r2
 80063aa:	4698      	mov	r8, r3
 80063ac:	4606      	mov	r6, r0
 80063ae:	b118      	cbz	r0, 80063b8 <_vfiprintf_r+0x18>
 80063b0:	6983      	ldr	r3, [r0, #24]
 80063b2:	b90b      	cbnz	r3, 80063b8 <_vfiprintf_r+0x18>
 80063b4:	f7ff fb36 	bl	8005a24 <__sinit>
 80063b8:	4b89      	ldr	r3, [pc, #548]	; (80065e0 <_vfiprintf_r+0x240>)
 80063ba:	429d      	cmp	r5, r3
 80063bc:	d11b      	bne.n	80063f6 <_vfiprintf_r+0x56>
 80063be:	6875      	ldr	r5, [r6, #4]
 80063c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063c2:	07d9      	lsls	r1, r3, #31
 80063c4:	d405      	bmi.n	80063d2 <_vfiprintf_r+0x32>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	059a      	lsls	r2, r3, #22
 80063ca:	d402      	bmi.n	80063d2 <_vfiprintf_r+0x32>
 80063cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ce:	f7ff fbcc 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	071b      	lsls	r3, r3, #28
 80063d6:	d501      	bpl.n	80063dc <_vfiprintf_r+0x3c>
 80063d8:	692b      	ldr	r3, [r5, #16]
 80063da:	b9eb      	cbnz	r3, 8006418 <_vfiprintf_r+0x78>
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f7fe fb20 	bl	8004a24 <__swsetup_r>
 80063e4:	b1c0      	cbz	r0, 8006418 <_vfiprintf_r+0x78>
 80063e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e8:	07dc      	lsls	r4, r3, #31
 80063ea:	d50e      	bpl.n	800640a <_vfiprintf_r+0x6a>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f0:	b01d      	add	sp, #116	; 0x74
 80063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f6:	4b7b      	ldr	r3, [pc, #492]	; (80065e4 <_vfiprintf_r+0x244>)
 80063f8:	429d      	cmp	r5, r3
 80063fa:	d101      	bne.n	8006400 <_vfiprintf_r+0x60>
 80063fc:	68b5      	ldr	r5, [r6, #8]
 80063fe:	e7df      	b.n	80063c0 <_vfiprintf_r+0x20>
 8006400:	4b79      	ldr	r3, [pc, #484]	; (80065e8 <_vfiprintf_r+0x248>)
 8006402:	429d      	cmp	r5, r3
 8006404:	bf08      	it	eq
 8006406:	68f5      	ldreq	r5, [r6, #12]
 8006408:	e7da      	b.n	80063c0 <_vfiprintf_r+0x20>
 800640a:	89ab      	ldrh	r3, [r5, #12]
 800640c:	0598      	lsls	r0, r3, #22
 800640e:	d4ed      	bmi.n	80063ec <_vfiprintf_r+0x4c>
 8006410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006412:	f7ff fbab 	bl	8005b6c <__retarget_lock_release_recursive>
 8006416:	e7e9      	b.n	80063ec <_vfiprintf_r+0x4c>
 8006418:	2300      	movs	r3, #0
 800641a:	9309      	str	r3, [sp, #36]	; 0x24
 800641c:	2320      	movs	r3, #32
 800641e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006422:	f8cd 800c 	str.w	r8, [sp, #12]
 8006426:	2330      	movs	r3, #48	; 0x30
 8006428:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065ec <_vfiprintf_r+0x24c>
 800642c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006430:	f04f 0901 	mov.w	r9, #1
 8006434:	4623      	mov	r3, r4
 8006436:	469a      	mov	sl, r3
 8006438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800643c:	b10a      	cbz	r2, 8006442 <_vfiprintf_r+0xa2>
 800643e:	2a25      	cmp	r2, #37	; 0x25
 8006440:	d1f9      	bne.n	8006436 <_vfiprintf_r+0x96>
 8006442:	ebba 0b04 	subs.w	fp, sl, r4
 8006446:	d00b      	beq.n	8006460 <_vfiprintf_r+0xc0>
 8006448:	465b      	mov	r3, fp
 800644a:	4622      	mov	r2, r4
 800644c:	4629      	mov	r1, r5
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ff93 	bl	800637a <__sfputs_r>
 8006454:	3001      	adds	r0, #1
 8006456:	f000 80aa 	beq.w	80065ae <_vfiprintf_r+0x20e>
 800645a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800645c:	445a      	add	r2, fp
 800645e:	9209      	str	r2, [sp, #36]	; 0x24
 8006460:	f89a 3000 	ldrb.w	r3, [sl]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80a2 	beq.w	80065ae <_vfiprintf_r+0x20e>
 800646a:	2300      	movs	r3, #0
 800646c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006474:	f10a 0a01 	add.w	sl, sl, #1
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	9307      	str	r3, [sp, #28]
 800647c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006480:	931a      	str	r3, [sp, #104]	; 0x68
 8006482:	4654      	mov	r4, sl
 8006484:	2205      	movs	r2, #5
 8006486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648a:	4858      	ldr	r0, [pc, #352]	; (80065ec <_vfiprintf_r+0x24c>)
 800648c:	f7f9 fed8 	bl	8000240 <memchr>
 8006490:	9a04      	ldr	r2, [sp, #16]
 8006492:	b9d8      	cbnz	r0, 80064cc <_vfiprintf_r+0x12c>
 8006494:	06d1      	lsls	r1, r2, #27
 8006496:	bf44      	itt	mi
 8006498:	2320      	movmi	r3, #32
 800649a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800649e:	0713      	lsls	r3, r2, #28
 80064a0:	bf44      	itt	mi
 80064a2:	232b      	movmi	r3, #43	; 0x2b
 80064a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064a8:	f89a 3000 	ldrb.w	r3, [sl]
 80064ac:	2b2a      	cmp	r3, #42	; 0x2a
 80064ae:	d015      	beq.n	80064dc <_vfiprintf_r+0x13c>
 80064b0:	9a07      	ldr	r2, [sp, #28]
 80064b2:	4654      	mov	r4, sl
 80064b4:	2000      	movs	r0, #0
 80064b6:	f04f 0c0a 	mov.w	ip, #10
 80064ba:	4621      	mov	r1, r4
 80064bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c0:	3b30      	subs	r3, #48	; 0x30
 80064c2:	2b09      	cmp	r3, #9
 80064c4:	d94e      	bls.n	8006564 <_vfiprintf_r+0x1c4>
 80064c6:	b1b0      	cbz	r0, 80064f6 <_vfiprintf_r+0x156>
 80064c8:	9207      	str	r2, [sp, #28]
 80064ca:	e014      	b.n	80064f6 <_vfiprintf_r+0x156>
 80064cc:	eba0 0308 	sub.w	r3, r0, r8
 80064d0:	fa09 f303 	lsl.w	r3, r9, r3
 80064d4:	4313      	orrs	r3, r2
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	46a2      	mov	sl, r4
 80064da:	e7d2      	b.n	8006482 <_vfiprintf_r+0xe2>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	1d19      	adds	r1, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	9103      	str	r1, [sp, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbb      	ittet	lt
 80064e8:	425b      	neglt	r3, r3
 80064ea:	f042 0202 	orrlt.w	r2, r2, #2
 80064ee:	9307      	strge	r3, [sp, #28]
 80064f0:	9307      	strlt	r3, [sp, #28]
 80064f2:	bfb8      	it	lt
 80064f4:	9204      	strlt	r2, [sp, #16]
 80064f6:	7823      	ldrb	r3, [r4, #0]
 80064f8:	2b2e      	cmp	r3, #46	; 0x2e
 80064fa:	d10c      	bne.n	8006516 <_vfiprintf_r+0x176>
 80064fc:	7863      	ldrb	r3, [r4, #1]
 80064fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006500:	d135      	bne.n	800656e <_vfiprintf_r+0x1ce>
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	1d1a      	adds	r2, r3, #4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	9203      	str	r2, [sp, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfb8      	it	lt
 800650e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006512:	3402      	adds	r4, #2
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065fc <_vfiprintf_r+0x25c>
 800651a:	7821      	ldrb	r1, [r4, #0]
 800651c:	2203      	movs	r2, #3
 800651e:	4650      	mov	r0, sl
 8006520:	f7f9 fe8e 	bl	8000240 <memchr>
 8006524:	b140      	cbz	r0, 8006538 <_vfiprintf_r+0x198>
 8006526:	2340      	movs	r3, #64	; 0x40
 8006528:	eba0 000a 	sub.w	r0, r0, sl
 800652c:	fa03 f000 	lsl.w	r0, r3, r0
 8006530:	9b04      	ldr	r3, [sp, #16]
 8006532:	4303      	orrs	r3, r0
 8006534:	3401      	adds	r4, #1
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653c:	482c      	ldr	r0, [pc, #176]	; (80065f0 <_vfiprintf_r+0x250>)
 800653e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006542:	2206      	movs	r2, #6
 8006544:	f7f9 fe7c 	bl	8000240 <memchr>
 8006548:	2800      	cmp	r0, #0
 800654a:	d03f      	beq.n	80065cc <_vfiprintf_r+0x22c>
 800654c:	4b29      	ldr	r3, [pc, #164]	; (80065f4 <_vfiprintf_r+0x254>)
 800654e:	bb1b      	cbnz	r3, 8006598 <_vfiprintf_r+0x1f8>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	3307      	adds	r3, #7
 8006554:	f023 0307 	bic.w	r3, r3, #7
 8006558:	3308      	adds	r3, #8
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655e:	443b      	add	r3, r7
 8006560:	9309      	str	r3, [sp, #36]	; 0x24
 8006562:	e767      	b.n	8006434 <_vfiprintf_r+0x94>
 8006564:	fb0c 3202 	mla	r2, ip, r2, r3
 8006568:	460c      	mov	r4, r1
 800656a:	2001      	movs	r0, #1
 800656c:	e7a5      	b.n	80064ba <_vfiprintf_r+0x11a>
 800656e:	2300      	movs	r3, #0
 8006570:	3401      	adds	r4, #1
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	4619      	mov	r1, r3
 8006576:	f04f 0c0a 	mov.w	ip, #10
 800657a:	4620      	mov	r0, r4
 800657c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006580:	3a30      	subs	r2, #48	; 0x30
 8006582:	2a09      	cmp	r2, #9
 8006584:	d903      	bls.n	800658e <_vfiprintf_r+0x1ee>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0c5      	beq.n	8006516 <_vfiprintf_r+0x176>
 800658a:	9105      	str	r1, [sp, #20]
 800658c:	e7c3      	b.n	8006516 <_vfiprintf_r+0x176>
 800658e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006592:	4604      	mov	r4, r0
 8006594:	2301      	movs	r3, #1
 8006596:	e7f0      	b.n	800657a <_vfiprintf_r+0x1da>
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	462a      	mov	r2, r5
 800659e:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <_vfiprintf_r+0x258>)
 80065a0:	a904      	add	r1, sp, #16
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7fd fd84 	bl	80040b0 <_printf_float>
 80065a8:	4607      	mov	r7, r0
 80065aa:	1c78      	adds	r0, r7, #1
 80065ac:	d1d6      	bne.n	800655c <_vfiprintf_r+0x1bc>
 80065ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b0:	07d9      	lsls	r1, r3, #31
 80065b2:	d405      	bmi.n	80065c0 <_vfiprintf_r+0x220>
 80065b4:	89ab      	ldrh	r3, [r5, #12]
 80065b6:	059a      	lsls	r2, r3, #22
 80065b8:	d402      	bmi.n	80065c0 <_vfiprintf_r+0x220>
 80065ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065bc:	f7ff fad6 	bl	8005b6c <__retarget_lock_release_recursive>
 80065c0:	89ab      	ldrh	r3, [r5, #12]
 80065c2:	065b      	lsls	r3, r3, #25
 80065c4:	f53f af12 	bmi.w	80063ec <_vfiprintf_r+0x4c>
 80065c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ca:	e711      	b.n	80063f0 <_vfiprintf_r+0x50>
 80065cc:	ab03      	add	r3, sp, #12
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	462a      	mov	r2, r5
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <_vfiprintf_r+0x258>)
 80065d4:	a904      	add	r1, sp, #16
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7fe f80e 	bl	80045f8 <_printf_i>
 80065dc:	e7e4      	b.n	80065a8 <_vfiprintf_r+0x208>
 80065de:	bf00      	nop
 80065e0:	080082f0 	.word	0x080082f0
 80065e4:	08008310 	.word	0x08008310
 80065e8:	080082d0 	.word	0x080082d0
 80065ec:	0800848c 	.word	0x0800848c
 80065f0:	08008496 	.word	0x08008496
 80065f4:	080040b1 	.word	0x080040b1
 80065f8:	0800637b 	.word	0x0800637b
 80065fc:	08008492 	.word	0x08008492

08006600 <__sread>:
 8006600:	b510      	push	{r4, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006608:	f000 f8d6 	bl	80067b8 <_read_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	bfab      	itete	ge
 8006610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006612:	89a3      	ldrhlt	r3, [r4, #12]
 8006614:	181b      	addge	r3, r3, r0
 8006616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800661a:	bfac      	ite	ge
 800661c:	6563      	strge	r3, [r4, #84]	; 0x54
 800661e:	81a3      	strhlt	r3, [r4, #12]
 8006620:	bd10      	pop	{r4, pc}

08006622 <__swrite>:
 8006622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006626:	461f      	mov	r7, r3
 8006628:	898b      	ldrh	r3, [r1, #12]
 800662a:	05db      	lsls	r3, r3, #23
 800662c:	4605      	mov	r5, r0
 800662e:	460c      	mov	r4, r1
 8006630:	4616      	mov	r6, r2
 8006632:	d505      	bpl.n	8006640 <__swrite+0x1e>
 8006634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006638:	2302      	movs	r3, #2
 800663a:	2200      	movs	r2, #0
 800663c:	f000 f898 	bl	8006770 <_lseek_r>
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800664a:	81a3      	strh	r3, [r4, #12]
 800664c:	4632      	mov	r2, r6
 800664e:	463b      	mov	r3, r7
 8006650:	4628      	mov	r0, r5
 8006652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006656:	f000 b817 	b.w	8006688 <_write_r>

0800665a <__sseek>:
 800665a:	b510      	push	{r4, lr}
 800665c:	460c      	mov	r4, r1
 800665e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006662:	f000 f885 	bl	8006770 <_lseek_r>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	bf15      	itete	ne
 800666c:	6560      	strne	r0, [r4, #84]	; 0x54
 800666e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006676:	81a3      	strheq	r3, [r4, #12]
 8006678:	bf18      	it	ne
 800667a:	81a3      	strhne	r3, [r4, #12]
 800667c:	bd10      	pop	{r4, pc}

0800667e <__sclose>:
 800667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006682:	f000 b831 	b.w	80066e8 <_close_r>
	...

08006688 <_write_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d07      	ldr	r5, [pc, #28]	; (80066a8 <_write_r+0x20>)
 800668c:	4604      	mov	r4, r0
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	2200      	movs	r2, #0
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fc f850 	bl	800273c <_write>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_write_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_write_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	20000238 	.word	0x20000238

080066ac <__assert_func>:
 80066ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066ae:	4614      	mov	r4, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <__assert_func+0x2c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4605      	mov	r5, r0
 80066b8:	68d8      	ldr	r0, [r3, #12]
 80066ba:	b14c      	cbz	r4, 80066d0 <__assert_func+0x24>
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <__assert_func+0x30>)
 80066be:	9100      	str	r1, [sp, #0]
 80066c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <__assert_func+0x34>)
 80066c6:	462b      	mov	r3, r5
 80066c8:	f000 f81e 	bl	8006708 <fiprintf>
 80066cc:	f000 f893 	bl	80067f6 <abort>
 80066d0:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <__assert_func+0x38>)
 80066d2:	461c      	mov	r4, r3
 80066d4:	e7f3      	b.n	80066be <__assert_func+0x12>
 80066d6:	bf00      	nop
 80066d8:	2000000c 	.word	0x2000000c
 80066dc:	0800849d 	.word	0x0800849d
 80066e0:	080084aa 	.word	0x080084aa
 80066e4:	080084d8 	.word	0x080084d8

080066e8 <_close_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d06      	ldr	r5, [pc, #24]	; (8006704 <_close_r+0x1c>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fc faa0 	bl	8002c38 <_close>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_close_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_close_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20000238 	.word	0x20000238

08006708 <fiprintf>:
 8006708:	b40e      	push	{r1, r2, r3}
 800670a:	b503      	push	{r0, r1, lr}
 800670c:	4601      	mov	r1, r0
 800670e:	ab03      	add	r3, sp, #12
 8006710:	4805      	ldr	r0, [pc, #20]	; (8006728 <fiprintf+0x20>)
 8006712:	f853 2b04 	ldr.w	r2, [r3], #4
 8006716:	6800      	ldr	r0, [r0, #0]
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	f7ff fe41 	bl	80063a0 <_vfiprintf_r>
 800671e:	b002      	add	sp, #8
 8006720:	f85d eb04 	ldr.w	lr, [sp], #4
 8006724:	b003      	add	sp, #12
 8006726:	4770      	bx	lr
 8006728:	2000000c 	.word	0x2000000c

0800672c <_fstat_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_fstat_r+0x20>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	f7fc fa81 	bl	8002c40 <_fstat>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d102      	bne.n	8006748 <_fstat_r+0x1c>
 8006742:	682b      	ldr	r3, [r5, #0]
 8006744:	b103      	cbz	r3, 8006748 <_fstat_r+0x1c>
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	bf00      	nop
 800674c:	20000238 	.word	0x20000238

08006750 <_isatty_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	; (800676c <_isatty_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fc fa76 	bl	8002c4c <_isatty>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_isatty_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_isatty_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	20000238 	.word	0x20000238

08006770 <_lseek_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	; (8006790 <_lseek_r+0x20>)
 8006774:	4604      	mov	r4, r0
 8006776:	4608      	mov	r0, r1
 8006778:	4611      	mov	r1, r2
 800677a:	2200      	movs	r2, #0
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fc fa66 	bl	8002c50 <_lseek>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_lseek_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_lseek_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000238 	.word	0x20000238

08006794 <__ascii_mbtowc>:
 8006794:	b082      	sub	sp, #8
 8006796:	b901      	cbnz	r1, 800679a <__ascii_mbtowc+0x6>
 8006798:	a901      	add	r1, sp, #4
 800679a:	b142      	cbz	r2, 80067ae <__ascii_mbtowc+0x1a>
 800679c:	b14b      	cbz	r3, 80067b2 <__ascii_mbtowc+0x1e>
 800679e:	7813      	ldrb	r3, [r2, #0]
 80067a0:	600b      	str	r3, [r1, #0]
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	1e10      	subs	r0, r2, #0
 80067a6:	bf18      	it	ne
 80067a8:	2001      	movne	r0, #1
 80067aa:	b002      	add	sp, #8
 80067ac:	4770      	bx	lr
 80067ae:	4610      	mov	r0, r2
 80067b0:	e7fb      	b.n	80067aa <__ascii_mbtowc+0x16>
 80067b2:	f06f 0001 	mvn.w	r0, #1
 80067b6:	e7f8      	b.n	80067aa <__ascii_mbtowc+0x16>

080067b8 <_read_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	; (80067d8 <_read_r+0x20>)
 80067bc:	4604      	mov	r4, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fc fa28 	bl	8002c1c <_read>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_read_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_read_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000238 	.word	0x20000238

080067dc <__ascii_wctomb>:
 80067dc:	b149      	cbz	r1, 80067f2 <__ascii_wctomb+0x16>
 80067de:	2aff      	cmp	r2, #255	; 0xff
 80067e0:	bf85      	ittet	hi
 80067e2:	238a      	movhi	r3, #138	; 0x8a
 80067e4:	6003      	strhi	r3, [r0, #0]
 80067e6:	700a      	strbls	r2, [r1, #0]
 80067e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80067ec:	bf98      	it	ls
 80067ee:	2001      	movls	r0, #1
 80067f0:	4770      	bx	lr
 80067f2:	4608      	mov	r0, r1
 80067f4:	4770      	bx	lr

080067f6 <abort>:
 80067f6:	b508      	push	{r3, lr}
 80067f8:	2006      	movs	r0, #6
 80067fa:	f000 f82b 	bl	8006854 <raise>
 80067fe:	2001      	movs	r0, #1
 8006800:	f7fc fa06 	bl	8002c10 <_exit>

08006804 <_raise_r>:
 8006804:	291f      	cmp	r1, #31
 8006806:	b538      	push	{r3, r4, r5, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	d904      	bls.n	8006818 <_raise_r+0x14>
 800680e:	2316      	movs	r3, #22
 8006810:	6003      	str	r3, [r0, #0]
 8006812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800681a:	b112      	cbz	r2, 8006822 <_raise_r+0x1e>
 800681c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006820:	b94b      	cbnz	r3, 8006836 <_raise_r+0x32>
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f830 	bl	8006888 <_getpid_r>
 8006828:	462a      	mov	r2, r5
 800682a:	4601      	mov	r1, r0
 800682c:	4620      	mov	r0, r4
 800682e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006832:	f000 b817 	b.w	8006864 <_kill_r>
 8006836:	2b01      	cmp	r3, #1
 8006838:	d00a      	beq.n	8006850 <_raise_r+0x4c>
 800683a:	1c59      	adds	r1, r3, #1
 800683c:	d103      	bne.n	8006846 <_raise_r+0x42>
 800683e:	2316      	movs	r3, #22
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	2001      	movs	r0, #1
 8006844:	e7e7      	b.n	8006816 <_raise_r+0x12>
 8006846:	2400      	movs	r4, #0
 8006848:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800684c:	4628      	mov	r0, r5
 800684e:	4798      	blx	r3
 8006850:	2000      	movs	r0, #0
 8006852:	e7e0      	b.n	8006816 <_raise_r+0x12>

08006854 <raise>:
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <raise+0xc>)
 8006856:	4601      	mov	r1, r0
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	f7ff bfd3 	b.w	8006804 <_raise_r>
 800685e:	bf00      	nop
 8006860:	2000000c 	.word	0x2000000c

08006864 <_kill_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d07      	ldr	r5, [pc, #28]	; (8006884 <_kill_r+0x20>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	4611      	mov	r1, r2
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	f7fc f9c5 	bl	8002c00 <_kill>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d102      	bne.n	8006880 <_kill_r+0x1c>
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	b103      	cbz	r3, 8006880 <_kill_r+0x1c>
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	bd38      	pop	{r3, r4, r5, pc}
 8006882:	bf00      	nop
 8006884:	20000238 	.word	0x20000238

08006888 <_getpid_r>:
 8006888:	f7fc b9b8 	b.w	8002bfc <_getpid>
 800688c:	0000      	movs	r0, r0
	...

08006890 <exp>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	ed2d 8b02 	vpush	{d8}
 8006896:	ec55 4b10 	vmov	r4, r5, d0
 800689a:	f000 f891 	bl	80069c0 <__ieee754_exp>
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <exp+0x98>)
 80068a0:	eeb0 8a40 	vmov.f32	s16, s0
 80068a4:	eef0 8a60 	vmov.f32	s17, s1
 80068a8:	f993 3000 	ldrsb.w	r3, [r3]
 80068ac:	3301      	adds	r3, #1
 80068ae:	d012      	beq.n	80068d6 <exp+0x46>
 80068b0:	ec45 4b10 	vmov	d0, r4, r5
 80068b4:	f000 fbba 	bl	800702c <finite>
 80068b8:	b168      	cbz	r0, 80068d6 <exp+0x46>
 80068ba:	a313      	add	r3, pc, #76	; (adr r3, 8006908 <exp+0x78>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	f7fa f958 	bl	8000b78 <__aeabi_dcmpgt>
 80068c8:	b160      	cbz	r0, 80068e4 <exp+0x54>
 80068ca:	f7fd fa33 	bl	8003d34 <__errno>
 80068ce:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8006910 <exp+0x80>
 80068d2:	2322      	movs	r3, #34	; 0x22
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	eeb0 0a48 	vmov.f32	s0, s16
 80068da:	eef0 0a68 	vmov.f32	s1, s17
 80068de:	ecbd 8b02 	vpop	{d8}
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	a30c      	add	r3, pc, #48	; (adr r3, 8006918 <exp+0x88>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7fa f925 	bl	8000b3c <__aeabi_dcmplt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0ef      	beq.n	80068d6 <exp+0x46>
 80068f6:	f7fd fa1d 	bl	8003d34 <__errno>
 80068fa:	2322      	movs	r3, #34	; 0x22
 80068fc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8006920 <exp+0x90>
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	e7e8      	b.n	80068d6 <exp+0x46>
 8006904:	f3af 8000 	nop.w
 8006908:	fefa39ef 	.word	0xfefa39ef
 800690c:	40862e42 	.word	0x40862e42
 8006910:	00000000 	.word	0x00000000
 8006914:	7ff00000 	.word	0x7ff00000
 8006918:	d52d3051 	.word	0xd52d3051
 800691c:	c0874910 	.word	0xc0874910
	...
 8006928:	200001dc 	.word	0x200001dc
 800692c:	00000000 	.word	0x00000000

08006930 <log>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	ed2d 8b02 	vpush	{d8}
 8006936:	ec55 4b10 	vmov	r4, r5, d0
 800693a:	f000 f9bd 	bl	8006cb8 <__ieee754_log>
 800693e:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <log+0x88>)
 8006940:	eeb0 8a40 	vmov.f32	s16, s0
 8006944:	eef0 8a60 	vmov.f32	s17, s1
 8006948:	f993 3000 	ldrsb.w	r3, [r3]
 800694c:	3301      	adds	r3, #1
 800694e:	d01a      	beq.n	8006986 <log+0x56>
 8006950:	4622      	mov	r2, r4
 8006952:	462b      	mov	r3, r5
 8006954:	4620      	mov	r0, r4
 8006956:	4629      	mov	r1, r5
 8006958:	f7fa f918 	bl	8000b8c <__aeabi_dcmpun>
 800695c:	b998      	cbnz	r0, 8006986 <log+0x56>
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	4620      	mov	r0, r4
 8006964:	4629      	mov	r1, r5
 8006966:	f7fa f907 	bl	8000b78 <__aeabi_dcmpgt>
 800696a:	b960      	cbnz	r0, 8006986 <log+0x56>
 800696c:	2200      	movs	r2, #0
 800696e:	2300      	movs	r3, #0
 8006970:	4620      	mov	r0, r4
 8006972:	4629      	mov	r1, r5
 8006974:	f7fa f8d8 	bl	8000b28 <__aeabi_dcmpeq>
 8006978:	b160      	cbz	r0, 8006994 <log+0x64>
 800697a:	f7fd f9db 	bl	8003d34 <__errno>
 800697e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80069b0 <log+0x80>
 8006982:	2322      	movs	r3, #34	; 0x22
 8006984:	6003      	str	r3, [r0, #0]
 8006986:	eeb0 0a48 	vmov.f32	s0, s16
 800698a:	eef0 0a68 	vmov.f32	s1, s17
 800698e:	ecbd 8b02 	vpop	{d8}
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	f7fd f9ce 	bl	8003d34 <__errno>
 8006998:	ecbd 8b02 	vpop	{d8}
 800699c:	2321      	movs	r3, #33	; 0x21
 800699e:	6003      	str	r3, [r0, #0]
 80069a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a4:	4805      	ldr	r0, [pc, #20]	; (80069bc <log+0x8c>)
 80069a6:	f000 bb4f 	b.w	8007048 <nan>
 80069aa:	bf00      	nop
 80069ac:	f3af 8000 	nop.w
 80069b0:	00000000 	.word	0x00000000
 80069b4:	fff00000 	.word	0xfff00000
 80069b8:	200001dc 	.word	0x200001dc
 80069bc:	080084d8 	.word	0x080084d8

080069c0 <__ieee754_exp>:
 80069c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c4:	ec55 4b10 	vmov	r4, r5, d0
 80069c8:	49b1      	ldr	r1, [pc, #708]	; (8006c90 <__ieee754_exp+0x2d0>)
 80069ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80069ce:	428b      	cmp	r3, r1
 80069d0:	ed2d 8b04 	vpush	{d8-d9}
 80069d4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80069d8:	d937      	bls.n	8006a4a <__ieee754_exp+0x8a>
 80069da:	49ae      	ldr	r1, [pc, #696]	; (8006c94 <__ieee754_exp+0x2d4>)
 80069dc:	428b      	cmp	r3, r1
 80069de:	d916      	bls.n	8006a0e <__ieee754_exp+0x4e>
 80069e0:	ee10 3a10 	vmov	r3, s0
 80069e4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80069e8:	4313      	orrs	r3, r2
 80069ea:	d009      	beq.n	8006a00 <__ieee754_exp+0x40>
 80069ec:	ee10 2a10 	vmov	r2, s0
 80069f0:	462b      	mov	r3, r5
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7f9 fc79 	bl	80002ec <__adddf3>
 80069fa:	4604      	mov	r4, r0
 80069fc:	460d      	mov	r5, r1
 80069fe:	e000      	b.n	8006a02 <__ieee754_exp+0x42>
 8006a00:	bb06      	cbnz	r6, 8006a44 <__ieee754_exp+0x84>
 8006a02:	ecbd 8b04 	vpop	{d8-d9}
 8006a06:	ec45 4b10 	vmov	d0, r4, r5
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	a38a      	add	r3, pc, #552	; (adr r3, 8006c38 <__ieee754_exp+0x278>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	ee10 0a10 	vmov	r0, s0
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7fa f8ad 	bl	8000b78 <__aeabi_dcmpgt>
 8006a1e:	b138      	cbz	r0, 8006a30 <__ieee754_exp+0x70>
 8006a20:	a387      	add	r3, pc, #540	; (adr r3, 8006c40 <__ieee754_exp+0x280>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	4610      	mov	r0, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7f9 fe15 	bl	8000658 <__aeabi_dmul>
 8006a2e:	e7e4      	b.n	80069fa <__ieee754_exp+0x3a>
 8006a30:	a385      	add	r3, pc, #532	; (adr r3, 8006c48 <__ieee754_exp+0x288>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7fa f87f 	bl	8000b3c <__aeabi_dcmplt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f000 8087 	beq.w	8006b52 <__ieee754_exp+0x192>
 8006a44:	2400      	movs	r4, #0
 8006a46:	2500      	movs	r5, #0
 8006a48:	e7db      	b.n	8006a02 <__ieee754_exp+0x42>
 8006a4a:	4a93      	ldr	r2, [pc, #588]	; (8006c98 <__ieee754_exp+0x2d8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	f240 80ac 	bls.w	8006baa <__ieee754_exp+0x1ea>
 8006a52:	4a92      	ldr	r2, [pc, #584]	; (8006c9c <__ieee754_exp+0x2dc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d87c      	bhi.n	8006b52 <__ieee754_exp+0x192>
 8006a58:	4b91      	ldr	r3, [pc, #580]	; (8006ca0 <__ieee754_exp+0x2e0>)
 8006a5a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	ee10 0a10 	vmov	r0, s0
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fc3e 	bl	80002e8 <__aeabi_dsub>
 8006a6c:	4b8d      	ldr	r3, [pc, #564]	; (8006ca4 <__ieee754_exp+0x2e4>)
 8006a6e:	00f7      	lsls	r7, r6, #3
 8006a70:	443b      	add	r3, r7
 8006a72:	ed93 7b00 	vldr	d7, [r3]
 8006a76:	f1c6 0a01 	rsb	sl, r6, #1
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	ebaa 0a06 	sub.w	sl, sl, r6
 8006a82:	eeb0 8a47 	vmov.f32	s16, s14
 8006a86:	eef0 8a67 	vmov.f32	s17, s15
 8006a8a:	ec53 2b18 	vmov	r2, r3, d8
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fc29 	bl	80002e8 <__aeabi_dsub>
 8006a96:	4604      	mov	r4, r0
 8006a98:	460d      	mov	r5, r1
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fdd9 	bl	8000658 <__aeabi_dmul>
 8006aa6:	a36a      	add	r3, pc, #424	; (adr r3, 8006c50 <__ieee754_exp+0x290>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	f7f9 fdd2 	bl	8000658 <__aeabi_dmul>
 8006ab4:	a368      	add	r3, pc, #416	; (adr r3, 8006c58 <__ieee754_exp+0x298>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fc15 	bl	80002e8 <__aeabi_dsub>
 8006abe:	4632      	mov	r2, r6
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	f7f9 fdc9 	bl	8000658 <__aeabi_dmul>
 8006ac6:	a366      	add	r3, pc, #408	; (adr r3, 8006c60 <__ieee754_exp+0x2a0>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f7f9 fc0e 	bl	80002ec <__adddf3>
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	f7f9 fdc0 	bl	8000658 <__aeabi_dmul>
 8006ad8:	a363      	add	r3, pc, #396	; (adr r3, 8006c68 <__ieee754_exp+0x2a8>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fc03 	bl	80002e8 <__aeabi_dsub>
 8006ae2:	4632      	mov	r2, r6
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	f7f9 fdb7 	bl	8000658 <__aeabi_dmul>
 8006aea:	a361      	add	r3, pc, #388	; (adr r3, 8006c70 <__ieee754_exp+0x2b0>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fbfc 	bl	80002ec <__adddf3>
 8006af4:	4632      	mov	r2, r6
 8006af6:	463b      	mov	r3, r7
 8006af8:	f7f9 fdae 	bl	8000658 <__aeabi_dmul>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 fbf0 	bl	80002e8 <__aeabi_dsub>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	460f      	mov	r7, r1
 8006b10:	4620      	mov	r0, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fda0 	bl	8000658 <__aeabi_dmul>
 8006b18:	ec41 0b19 	vmov	d9, r0, r1
 8006b1c:	f1ba 0f00 	cmp.w	sl, #0
 8006b20:	d15d      	bne.n	8006bde <__ieee754_exp+0x21e>
 8006b22:	2200      	movs	r2, #0
 8006b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fbdc 	bl	80002e8 <__aeabi_dsub>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	ec51 0b19 	vmov	r0, r1, d9
 8006b38:	f7f9 feb8 	bl	80008ac <__aeabi_ddiv>
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	462b      	mov	r3, r5
 8006b40:	f7f9 fbd2 	bl	80002e8 <__aeabi_dsub>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	2000      	movs	r0, #0
 8006b4a:	4957      	ldr	r1, [pc, #348]	; (8006ca8 <__ieee754_exp+0x2e8>)
 8006b4c:	f7f9 fbcc 	bl	80002e8 <__aeabi_dsub>
 8006b50:	e753      	b.n	80069fa <__ieee754_exp+0x3a>
 8006b52:	4856      	ldr	r0, [pc, #344]	; (8006cac <__ieee754_exp+0x2ec>)
 8006b54:	a348      	add	r3, pc, #288	; (adr r3, 8006c78 <__ieee754_exp+0x2b8>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7f9 fd79 	bl	8000658 <__aeabi_dmul>
 8006b66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b6a:	f7f9 fbbf 	bl	80002ec <__adddf3>
 8006b6e:	f7fa f823 	bl	8000bb8 <__aeabi_d2iz>
 8006b72:	4682      	mov	sl, r0
 8006b74:	f7f9 fd06 	bl	8000584 <__aeabi_i2d>
 8006b78:	a341      	add	r3, pc, #260	; (adr r3, 8006c80 <__ieee754_exp+0x2c0>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	4606      	mov	r6, r0
 8006b80:	460f      	mov	r7, r1
 8006b82:	f7f9 fd69 	bl	8000658 <__aeabi_dmul>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 fbab 	bl	80002e8 <__aeabi_dsub>
 8006b92:	a33d      	add	r3, pc, #244	; (adr r3, 8006c88 <__ieee754_exp+0x2c8>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f7f9 fd5a 	bl	8000658 <__aeabi_dmul>
 8006ba4:	ec41 0b18 	vmov	d8, r0, r1
 8006ba8:	e76f      	b.n	8006a8a <__ieee754_exp+0xca>
 8006baa:	4a41      	ldr	r2, [pc, #260]	; (8006cb0 <__ieee754_exp+0x2f0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d811      	bhi.n	8006bd4 <__ieee754_exp+0x214>
 8006bb0:	a323      	add	r3, pc, #140	; (adr r3, 8006c40 <__ieee754_exp+0x280>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	ee10 0a10 	vmov	r0, s0
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f7f9 fb96 	bl	80002ec <__adddf3>
 8006bc0:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <__ieee754_exp+0x2e8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f7f9 ffd8 	bl	8000b78 <__aeabi_dcmpgt>
 8006bc8:	b138      	cbz	r0, 8006bda <__ieee754_exp+0x21a>
 8006bca:	4b37      	ldr	r3, [pc, #220]	; (8006ca8 <__ieee754_exp+0x2e8>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	e710      	b.n	80069f6 <__ieee754_exp+0x36>
 8006bd4:	f04f 0a00 	mov.w	sl, #0
 8006bd8:	e75f      	b.n	8006a9a <__ieee754_exp+0xda>
 8006bda:	4682      	mov	sl, r0
 8006bdc:	e75d      	b.n	8006a9a <__ieee754_exp+0xda>
 8006bde:	4632      	mov	r2, r6
 8006be0:	463b      	mov	r3, r7
 8006be2:	2000      	movs	r0, #0
 8006be4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006be8:	f7f9 fb7e 	bl	80002e8 <__aeabi_dsub>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	ec51 0b19 	vmov	r0, r1, d9
 8006bf4:	f7f9 fe5a 	bl	80008ac <__aeabi_ddiv>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	ec51 0b18 	vmov	r0, r1, d8
 8006c00:	f7f9 fb72 	bl	80002e8 <__aeabi_dsub>
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	f7f9 fb6e 	bl	80002e8 <__aeabi_dsub>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	2000      	movs	r0, #0
 8006c12:	4925      	ldr	r1, [pc, #148]	; (8006ca8 <__ieee754_exp+0x2e8>)
 8006c14:	f7f9 fb68 	bl	80002e8 <__aeabi_dsub>
 8006c18:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8006c1c:	4592      	cmp	sl, r2
 8006c1e:	db02      	blt.n	8006c26 <__ieee754_exp+0x266>
 8006c20:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006c24:	e6e9      	b.n	80069fa <__ieee754_exp+0x3a>
 8006c26:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8006c2a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8006c34:	e6f9      	b.n	8006a2a <__ieee754_exp+0x6a>
 8006c36:	bf00      	nop
 8006c38:	fefa39ef 	.word	0xfefa39ef
 8006c3c:	40862e42 	.word	0x40862e42
 8006c40:	8800759c 	.word	0x8800759c
 8006c44:	7e37e43c 	.word	0x7e37e43c
 8006c48:	d52d3051 	.word	0xd52d3051
 8006c4c:	c0874910 	.word	0xc0874910
 8006c50:	72bea4d0 	.word	0x72bea4d0
 8006c54:	3e663769 	.word	0x3e663769
 8006c58:	c5d26bf1 	.word	0xc5d26bf1
 8006c5c:	3ebbbd41 	.word	0x3ebbbd41
 8006c60:	af25de2c 	.word	0xaf25de2c
 8006c64:	3f11566a 	.word	0x3f11566a
 8006c68:	16bebd93 	.word	0x16bebd93
 8006c6c:	3f66c16c 	.word	0x3f66c16c
 8006c70:	5555553e 	.word	0x5555553e
 8006c74:	3fc55555 	.word	0x3fc55555
 8006c78:	652b82fe 	.word	0x652b82fe
 8006c7c:	3ff71547 	.word	0x3ff71547
 8006c80:	fee00000 	.word	0xfee00000
 8006c84:	3fe62e42 	.word	0x3fe62e42
 8006c88:	35793c76 	.word	0x35793c76
 8006c8c:	3dea39ef 	.word	0x3dea39ef
 8006c90:	40862e41 	.word	0x40862e41
 8006c94:	7fefffff 	.word	0x7fefffff
 8006c98:	3fd62e42 	.word	0x3fd62e42
 8006c9c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006ca0:	080085f8 	.word	0x080085f8
 8006ca4:	08008608 	.word	0x08008608
 8006ca8:	3ff00000 	.word	0x3ff00000
 8006cac:	080085e8 	.word	0x080085e8
 8006cb0:	3e2fffff 	.word	0x3e2fffff
 8006cb4:	00000000 	.word	0x00000000

08006cb8 <__ieee754_log>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	ec51 0b10 	vmov	r0, r1, d0
 8006cc0:	ed2d 8b04 	vpush	{d8-d9}
 8006cc4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006cc8:	b083      	sub	sp, #12
 8006cca:	460d      	mov	r5, r1
 8006ccc:	da29      	bge.n	8006d22 <__ieee754_log+0x6a>
 8006cce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cd2:	4303      	orrs	r3, r0
 8006cd4:	ee10 2a10 	vmov	r2, s0
 8006cd8:	d10c      	bne.n	8006cf4 <__ieee754_log+0x3c>
 8006cda:	49cf      	ldr	r1, [pc, #828]	; (8007018 <__ieee754_log+0x360>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f7f9 fde3 	bl	80008ac <__aeabi_ddiv>
 8006ce6:	ec41 0b10 	vmov	d0, r0, r1
 8006cea:	b003      	add	sp, #12
 8006cec:	ecbd 8b04 	vpop	{d8-d9}
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	da05      	bge.n	8006d04 <__ieee754_log+0x4c>
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	f7f9 faf5 	bl	80002e8 <__aeabi_dsub>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2300      	movs	r3, #0
 8006d02:	e7ee      	b.n	8006ce2 <__ieee754_log+0x2a>
 8006d04:	4bc5      	ldr	r3, [pc, #788]	; (800701c <__ieee754_log+0x364>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	f7f9 fca6 	bl	8000658 <__aeabi_dmul>
 8006d0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006d10:	460d      	mov	r5, r1
 8006d12:	4ac3      	ldr	r2, [pc, #780]	; (8007020 <__ieee754_log+0x368>)
 8006d14:	4295      	cmp	r5, r2
 8006d16:	dd06      	ble.n	8006d26 <__ieee754_log+0x6e>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	f7f9 fae6 	bl	80002ec <__adddf3>
 8006d20:	e7e1      	b.n	8006ce6 <__ieee754_log+0x2e>
 8006d22:	2300      	movs	r3, #0
 8006d24:	e7f5      	b.n	8006d12 <__ieee754_log+0x5a>
 8006d26:	152c      	asrs	r4, r5, #20
 8006d28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006d30:	441c      	add	r4, r3
 8006d32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006d36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006d42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006d46:	ea42 0105 	orr.w	r1, r2, r5
 8006d4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4bb4      	ldr	r3, [pc, #720]	; (8007024 <__ieee754_log+0x36c>)
 8006d52:	f7f9 fac9 	bl	80002e8 <__aeabi_dsub>
 8006d56:	1cab      	adds	r3, r5, #2
 8006d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	4682      	mov	sl, r0
 8006d60:	468b      	mov	fp, r1
 8006d62:	f04f 0200 	mov.w	r2, #0
 8006d66:	dc53      	bgt.n	8006e10 <__ieee754_log+0x158>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f7f9 fedd 	bl	8000b28 <__aeabi_dcmpeq>
 8006d6e:	b1d0      	cbz	r0, 8006da6 <__ieee754_log+0xee>
 8006d70:	2c00      	cmp	r4, #0
 8006d72:	f000 8122 	beq.w	8006fba <__ieee754_log+0x302>
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7f9 fc04 	bl	8000584 <__aeabi_i2d>
 8006d7c:	a390      	add	r3, pc, #576	; (adr r3, 8006fc0 <__ieee754_log+0x308>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	4606      	mov	r6, r0
 8006d84:	460f      	mov	r7, r1
 8006d86:	f7f9 fc67 	bl	8000658 <__aeabi_dmul>
 8006d8a:	a38f      	add	r3, pc, #572	; (adr r3, 8006fc8 <__ieee754_log+0x310>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	4630      	mov	r0, r6
 8006d96:	4639      	mov	r1, r7
 8006d98:	f7f9 fc5e 	bl	8000658 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	e7ba      	b.n	8006d1c <__ieee754_log+0x64>
 8006da6:	a38a      	add	r3, pc, #552	; (adr r3, 8006fd0 <__ieee754_log+0x318>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	4650      	mov	r0, sl
 8006dae:	4659      	mov	r1, fp
 8006db0:	f7f9 fc52 	bl	8000658 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	2000      	movs	r0, #0
 8006dba:	499b      	ldr	r1, [pc, #620]	; (8007028 <__ieee754_log+0x370>)
 8006dbc:	f7f9 fa94 	bl	80002e8 <__aeabi_dsub>
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	465b      	mov	r3, fp
 8006dc8:	4650      	mov	r0, sl
 8006dca:	4659      	mov	r1, fp
 8006dcc:	f7f9 fc44 	bl	8000658 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fc3e 	bl	8000658 <__aeabi_dmul>
 8006ddc:	4606      	mov	r6, r0
 8006dde:	460f      	mov	r7, r1
 8006de0:	b914      	cbnz	r4, 8006de8 <__ieee754_log+0x130>
 8006de2:	4632      	mov	r2, r6
 8006de4:	463b      	mov	r3, r7
 8006de6:	e0a2      	b.n	8006f2e <__ieee754_log+0x276>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7f9 fbcb 	bl	8000584 <__aeabi_i2d>
 8006dee:	a374      	add	r3, pc, #464	; (adr r3, 8006fc0 <__ieee754_log+0x308>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	f7f9 fc2e 	bl	8000658 <__aeabi_dmul>
 8006dfc:	a372      	add	r3, pc, #456	; (adr r3, 8006fc8 <__ieee754_log+0x310>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	4604      	mov	r4, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fc25 	bl	8000658 <__aeabi_dmul>
 8006e0e:	e0a7      	b.n	8006f60 <__ieee754_log+0x2a8>
 8006e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e14:	f7f9 fa6a 	bl	80002ec <__adddf3>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	4659      	mov	r1, fp
 8006e20:	f7f9 fd44 	bl	80008ac <__aeabi_ddiv>
 8006e24:	ec41 0b18 	vmov	d8, r0, r1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7f9 fbab 	bl	8000584 <__aeabi_i2d>
 8006e2e:	ec53 2b18 	vmov	r2, r3, d8
 8006e32:	ec41 0b19 	vmov	d9, r0, r1
 8006e36:	ec51 0b18 	vmov	r0, r1, d8
 8006e3a:	f7f9 fc0d 	bl	8000658 <__aeabi_dmul>
 8006e3e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006e42:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4689      	mov	r9, r1
 8006e50:	f7f9 fc02 	bl	8000658 <__aeabi_dmul>
 8006e54:	a360      	add	r3, pc, #384	; (adr r3, 8006fd8 <__ieee754_log+0x320>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460f      	mov	r7, r1
 8006e5e:	f7f9 fbfb 	bl	8000658 <__aeabi_dmul>
 8006e62:	a35f      	add	r3, pc, #380	; (adr r3, 8006fe0 <__ieee754_log+0x328>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 fa40 	bl	80002ec <__adddf3>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	f7f9 fbf2 	bl	8000658 <__aeabi_dmul>
 8006e74:	a35c      	add	r3, pc, #368	; (adr r3, 8006fe8 <__ieee754_log+0x330>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fa37 	bl	80002ec <__adddf3>
 8006e7e:	4632      	mov	r2, r6
 8006e80:	463b      	mov	r3, r7
 8006e82:	f7f9 fbe9 	bl	8000658 <__aeabi_dmul>
 8006e86:	a35a      	add	r3, pc, #360	; (adr r3, 8006ff0 <__ieee754_log+0x338>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 fa2e 	bl	80002ec <__adddf3>
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	f7f9 fbe0 	bl	8000658 <__aeabi_dmul>
 8006e98:	a357      	add	r3, pc, #348	; (adr r3, 8006ff8 <__ieee754_log+0x340>)
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fbd7 	bl	8000658 <__aeabi_dmul>
 8006eaa:	a355      	add	r3, pc, #340	; (adr r3, 8007000 <__ieee754_log+0x348>)
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f7f9 fa1c 	bl	80002ec <__adddf3>
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	f7f9 fbce 	bl	8000658 <__aeabi_dmul>
 8006ebc:	a352      	add	r3, pc, #328	; (adr r3, 8007008 <__ieee754_log+0x350>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 fa13 	bl	80002ec <__adddf3>
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	463b      	mov	r3, r7
 8006eca:	f7f9 fbc5 	bl	8000658 <__aeabi_dmul>
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	f7f9 fa09 	bl	80002ec <__adddf3>
 8006eda:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	3551      	adds	r5, #81	; 0x51
 8006ee2:	431d      	orrs	r5, r3
 8006ee4:	2d00      	cmp	r5, #0
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	4689      	mov	r9, r1
 8006eea:	dd48      	ble.n	8006f7e <__ieee754_log+0x2c6>
 8006eec:	4b4e      	ldr	r3, [pc, #312]	; (8007028 <__ieee754_log+0x370>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4650      	mov	r0, sl
 8006ef2:	4659      	mov	r1, fp
 8006ef4:	f7f9 fbb0 	bl	8000658 <__aeabi_dmul>
 8006ef8:	4652      	mov	r2, sl
 8006efa:	465b      	mov	r3, fp
 8006efc:	f7f9 fbac 	bl	8000658 <__aeabi_dmul>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4606      	mov	r6, r0
 8006f06:	460f      	mov	r7, r1
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	f7f9 f9ee 	bl	80002ec <__adddf3>
 8006f10:	ec53 2b18 	vmov	r2, r3, d8
 8006f14:	f7f9 fba0 	bl	8000658 <__aeabi_dmul>
 8006f18:	4680      	mov	r8, r0
 8006f1a:	4689      	mov	r9, r1
 8006f1c:	b964      	cbnz	r4, 8006f38 <__ieee754_log+0x280>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4630      	mov	r0, r6
 8006f24:	4639      	mov	r1, r7
 8006f26:	f7f9 f9df 	bl	80002e8 <__aeabi_dsub>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4650      	mov	r0, sl
 8006f30:	4659      	mov	r1, fp
 8006f32:	f7f9 f9d9 	bl	80002e8 <__aeabi_dsub>
 8006f36:	e6d6      	b.n	8006ce6 <__ieee754_log+0x2e>
 8006f38:	a321      	add	r3, pc, #132	; (adr r3, 8006fc0 <__ieee754_log+0x308>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	ec51 0b19 	vmov	r0, r1, d9
 8006f42:	f7f9 fb89 	bl	8000658 <__aeabi_dmul>
 8006f46:	a320      	add	r3, pc, #128	; (adr r3, 8006fc8 <__ieee754_log+0x310>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460d      	mov	r5, r1
 8006f50:	ec51 0b19 	vmov	r0, r1, d9
 8006f54:	f7f9 fb80 	bl	8000658 <__aeabi_dmul>
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	f7f9 f9c6 	bl	80002ec <__adddf3>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f7f9 f9be 	bl	80002e8 <__aeabi_dsub>
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	465b      	mov	r3, fp
 8006f70:	f7f9 f9ba 	bl	80002e8 <__aeabi_dsub>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4620      	mov	r0, r4
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	e7d9      	b.n	8006f32 <__ieee754_log+0x27a>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4650      	mov	r0, sl
 8006f84:	4659      	mov	r1, fp
 8006f86:	f7f9 f9af 	bl	80002e8 <__aeabi_dsub>
 8006f8a:	ec53 2b18 	vmov	r2, r3, d8
 8006f8e:	f7f9 fb63 	bl	8000658 <__aeabi_dmul>
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	2c00      	cmp	r4, #0
 8006f98:	f43f af23 	beq.w	8006de2 <__ieee754_log+0x12a>
 8006f9c:	a308      	add	r3, pc, #32	; (adr r3, 8006fc0 <__ieee754_log+0x308>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	ec51 0b19 	vmov	r0, r1, d9
 8006fa6:	f7f9 fb57 	bl	8000658 <__aeabi_dmul>
 8006faa:	a307      	add	r3, pc, #28	; (adr r3, 8006fc8 <__ieee754_log+0x310>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	ec51 0b19 	vmov	r0, r1, d9
 8006fb8:	e727      	b.n	8006e0a <__ieee754_log+0x152>
 8006fba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007010 <__ieee754_log+0x358>
 8006fbe:	e694      	b.n	8006cea <__ieee754_log+0x32>
 8006fc0:	fee00000 	.word	0xfee00000
 8006fc4:	3fe62e42 	.word	0x3fe62e42
 8006fc8:	35793c76 	.word	0x35793c76
 8006fcc:	3dea39ef 	.word	0x3dea39ef
 8006fd0:	55555555 	.word	0x55555555
 8006fd4:	3fd55555 	.word	0x3fd55555
 8006fd8:	df3e5244 	.word	0xdf3e5244
 8006fdc:	3fc2f112 	.word	0x3fc2f112
 8006fe0:	96cb03de 	.word	0x96cb03de
 8006fe4:	3fc74664 	.word	0x3fc74664
 8006fe8:	94229359 	.word	0x94229359
 8006fec:	3fd24924 	.word	0x3fd24924
 8006ff0:	55555593 	.word	0x55555593
 8006ff4:	3fe55555 	.word	0x3fe55555
 8006ff8:	d078c69f 	.word	0xd078c69f
 8006ffc:	3fc39a09 	.word	0x3fc39a09
 8007000:	1d8e78af 	.word	0x1d8e78af
 8007004:	3fcc71c5 	.word	0x3fcc71c5
 8007008:	9997fa04 	.word	0x9997fa04
 800700c:	3fd99999 	.word	0x3fd99999
	...
 8007018:	c3500000 	.word	0xc3500000
 800701c:	43500000 	.word	0x43500000
 8007020:	7fefffff 	.word	0x7fefffff
 8007024:	3ff00000 	.word	0x3ff00000
 8007028:	3fe00000 	.word	0x3fe00000

0800702c <finite>:
 800702c:	b082      	sub	sp, #8
 800702e:	ed8d 0b00 	vstr	d0, [sp]
 8007032:	9801      	ldr	r0, [sp, #4]
 8007034:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007038:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800703c:	0fc0      	lsrs	r0, r0, #31
 800703e:	b002      	add	sp, #8
 8007040:	4770      	bx	lr
 8007042:	0000      	movs	r0, r0
 8007044:	0000      	movs	r0, r0
	...

08007048 <nan>:
 8007048:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007050 <nan+0x8>
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	00000000 	.word	0x00000000
 8007054:	7ff80000 	.word	0x7ff80000

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
