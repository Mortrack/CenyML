
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c4  080054b0  080054b0  000154b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006774  08006774  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800677c  0800677c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200001dc  08006960  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006960  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d28a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217a  00000000  00000000  0002d496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007c5b  00000000  00000000  0002f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  00037270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001650  00000000  00000000  00037878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022838  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c41d  00000000  00000000  0005b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd9a6  00000000  00000000  00067b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001354c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002288  00000000  00000000  00135518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005494 	.word	0x08005494

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08005494 	.word	0x08005494

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <getMultiplePolynomialRegression>:
*
* @author Miranda Meza Cesar
* CREATION DATE: NOVEMBER 18, 2021
* LAST UPDATE: DECEMBER 04, 2021
*/
void getMultiplePolynomialRegression(double *X, double *Y, int n, int m, int p, int N, char isInteractionTerms, char isVariableOptimizer, double *b) {
 8000ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee4:	ed2d 8b02 	vpush	{d8}
 8000ee8:	b09b      	sub	sp, #108	; 0x6c
 8000eea:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
 8000eee:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
 8000ef2:	9607      	str	r6, [sp, #28]
	// Determine whether the interaction terms are desired in the resulting model to be generated or not and then excecute the corresponding code.
	if (isInteractionTerms == 1) { // Include the interaction terms in the training process of the model to be generated.
 8000ef4:	2c01      	cmp	r4, #1
void getMultiplePolynomialRegression(double *X, double *Y, int n, int m, int p, int N, char isInteractionTerms, char isVariableOptimizer, double *b) {
 8000ef6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000ef8:	9619      	str	r6, [sp, #100]	; 0x64
 8000efa:	9011      	str	r0, [sp, #68]	; 0x44
 8000efc:	9116      	str	r1, [sp, #88]	; 0x58
 8000efe:	9205      	str	r2, [sp, #20]
 8000f00:	930f      	str	r3, [sp, #60]	; 0x3c
	if (isInteractionTerms == 1) { // Include the interaction terms in the training process of the model to be generated.
 8000f02:	f000 8233 	beq.w	800136c <getMultiplePolynomialRegression+0x48c>
		printf("\nERROR: The functionality of this function, when the argument variable \"isInteractionTerms\" contains a value of 1, has not yet been developed.\n");
		exit(1);
		
		
	} else if (isInteractionTerms == 0) { // Do not inlcude the interaction terms in the training process of the model to be generated.
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	f040 8248 	bne.w	800139c <getMultiplePolynomialRegression+0x4bc>
		// If the machine learning features are less than the value of one, then emit an error message and terminate the program. Otherwise, continue with the program.
		if (m < 1) {
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f340 823f 	ble.w	8001390 <getMultiplePolynomialRegression+0x4b0>
			printf("\nERROR: The machine learning features (independent variables) must be equal or greater than 1 for this particular algorithm.\n");
			exit(1);
		}
		// If the samples are less than the number of machine learning features, then emit an error message and terminate the program. Otherwise, continue with the program.
		if (n < m) {
 8000f12:	4293      	cmp	r3, r2
 8000f14:	f300 8236 	bgt.w	8001384 <getMultiplePolynomialRegression+0x4a4>
			printf("\nERROR: The number of samples provided must be equal or higher than the number of machine learning features (independent variables) for this particular algorithm.\n");
			exit(1);
		}
		// If the output of the system under study is different than the value of one, then emit an error message and terminate the program. Otherwise, continue with the program.
		if (p != 1) {
 8000f18:	2d01      	cmp	r5, #1
 8000f1a:	f040 822d 	bne.w	8001378 <getMultiplePolynomialRegression+0x498>
		// Store the data that must be contained in the input matrix "X_tilde". In addition, we obtain the transpose of "X_tilde".
		int currentRowTimesmTimesNplusOne; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
		int currentRowTimesM; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
		int currentRowAndColumn; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
		int currentRowAndColumn2; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000f1e:	9e07      	ldr	r6, [sp, #28]
		int mPlusOne = m+1; //This variable is used to store a repetitive matheamtical operation, for performance purposes.
		int NplusOne = (N+1); //This variable is used to store a repetitive matheamtical operation, for performance purposes.
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000f20:	9905      	ldr	r1, [sp, #20]
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000f22:	fb06 f703 	mul.w	r7, r6, r3
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000f26:	fb07 1001 	mla	r0, r7, r1, r1
 8000f2a:	00c5      	lsls	r5, r0, #3
 8000f2c:	ee08 0a10 	vmov	s16, r0
 8000f30:	4628      	mov	r0, r5
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000f32:	9712      	str	r7, [sp, #72]	; 0x48
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000f34:	f001 fd3e 	bl	80029b4 <malloc>
 8000f38:	4603      	mov	r3, r0
		double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 8000f3a:	4628      	mov	r0, r5
		double *X_tilde = (double *) malloc(n*mTimesNPlusOne*sizeof(double)); // This variable will contain the input data of the system under study ("X") and an additional first row with values of "1".
 8000f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8000f3e:	461d      	mov	r5, r3
		double *TransposeOf_X_tilde = (double *) malloc(mTimesNPlusOne*n*sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the input data from which the desired machine learning method will be calcualted.
 8000f40:	f001 fd38 	bl	80029b4 <malloc>
 8000f44:	ebc6 7246 	rsb	r2, r6, r6, lsl #29
 8000f48:	ebc6 7306 	rsb	r3, r6, r6, lsl #28
 8000f4c:	9003      	str	r0, [sp, #12]
 8000f4e:	9008      	str	r0, [sp, #32]
 8000f50:	900e      	str	r0, [sp, #56]	; 0x38
 8000f52:	00d0      	lsls	r0, r2, #3
 8000f54:	9009      	str	r0, [sp, #36]	; 0x24
 8000f56:	0118      	lsls	r0, r3, #4
 8000f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000f5a:	940d      	str	r4, [sp, #52]	; 0x34
 8000f5c:	00da      	lsls	r2, r3, #3
 8000f5e:	eb05 01c6 	add.w	r1, r5, r6, lsl #3
 8000f62:	9210      	str	r2, [sp, #64]	; 0x40
 8000f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000f66:	940c      	str	r4, [sp, #48]	; 0x30
 8000f68:	f101 0508 	add.w	r5, r1, #8
 8000f6c:	9905      	ldr	r1, [sp, #20]
 8000f6e:	9513      	str	r5, [sp, #76]	; 0x4c
 8000f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		int mTimesNPlusOne = m*N+1; // This variable is used to store a repetitive mathematical operations in some for-loops, for performance purposes.
 8000f74:	1c7d      	adds	r5, r7, #1
 8000f76:	9504      	str	r5, [sp, #16]
		int currentRow2; // This variable is used in the for-loop for the matrix transpose that will be made.
		int currentColumn2 = 0; // This variable is used in the for-loop for the matrix transpose that will be made.
 8000f78:	9402      	str	r4, [sp, #8]
 8000f7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8000f7c:	9306      	str	r3, [sp, #24]
 8000f7e:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
		for (int currentRow=0; currentRow<n; currentRow++) {
			currentRow2 = 0; // We reset the counters used in the following for-loop.
			currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
			currentRowTimesM = currentRow*m;
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
			TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 8000f82:	ed9f 7ba3 	vldr	d7, [pc, #652]	; 8001210 <getMultiplePolynomialRegression+0x330>
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
 8000f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 8000f8a:	990e      	ldr	r1, [sp, #56]	; 0x38
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
 8000f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 8000f90:	eca1 7b02 	vstmia	r1!, {d7}
			X_tilde[currentRowTimesmTimesNplusOne] = 1;
 8000f94:	ed83 7b00 	vstr	d7, [r3]
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8000f98:	9b07      	ldr	r3, [sp, #28]
			TransposeOf_X_tilde[currentColumn2] = X_tilde[currentRowTimesmTimesNplusOne];
 8000f9a:	910e      	str	r1, [sp, #56]	; 0x38
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000fa2:	dd2b      	ble.n	8000ffc <getMultiplePolynomialRegression+0x11c>
 8000fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000fa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fa8:	4498      	add	r8, r3
 8000faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
			currentRow2 = 0; // We reset the counters used in the following for-loop.
 8000fac:	f04f 0900 	mov.w	r9, #0
 8000fb0:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
				currentRowAndColumn = (currentColumn-1)*N + currentRowTimesmTimesNplusOne;
				increaseExponentialOfThisValue = 1;
				for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
 8000fb4:	9b05      	ldr	r3, [sp, #20]
				increaseExponentialOfThisValue = 1;
 8000fb6:	4998      	ldr	r1, [pc, #608]	; (8001218 <getMultiplePolynomialRegression+0x338>)
 8000fb8:	fb09 3403 	mla	r4, r9, r3, r3
 8000fbc:	9b02      	ldr	r3, [sp, #8]
 8000fbe:	441c      	add	r4, r3
 8000fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
					currentRowAndColumn2 = currentExponential + currentRowAndColumn;
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumn-1 + currentRowTimesM];
 8000fc2:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 8000fc6:	eb03 0508 	add.w	r5, r3, r8
 8000fca:	9b03      	ldr	r3, [sp, #12]
 8000fcc:	9501      	str	r5, [sp, #4]
				increaseExponentialOfThisValue = 1;
 8000fce:	2000      	movs	r0, #0
 8000fd0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
					increaseExponentialOfThisValue = increaseExponentialOfThisValue * X[currentColumn-1 + currentRowTimesM];
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	f7ff fb2e 	bl	8000638 <__aeabi_dmul>
					X_tilde[currentRowAndColumn2] = increaseExponentialOfThisValue;
 8000fdc:	e8e5 0102 	strd	r0, r1, [r5], #8
				for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
 8000fe0:	4545      	cmp	r5, r8
					currentRow2++;
					TransposeOf_X_tilde[currentColumn2 + currentRow2*n] = X_tilde[currentRowAndColumn2];
 8000fe2:	e9c4 0100 	strd	r0, r1, [r4]
				for (int currentExponential=1; currentExponential<NplusOne; currentExponential++) {
 8000fe6:	445c      	add	r4, fp
 8000fe8:	d1f4      	bne.n	8000fd4 <getMultiplePolynomialRegression+0xf4>
 8000fea:	9b07      	ldr	r3, [sp, #28]
 8000fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000fee:	4499      	add	r9, r3
			for (int currentColumn=1; currentColumn<mPlusOne; currentColumn++) {
 8000ff0:	9b01      	ldr	r3, [sp, #4]
 8000ff2:	eba3 0802 	sub.w	r8, r3, r2
 8000ff6:	9b06      	ldr	r3, [sp, #24]
 8000ff8:	4553      	cmp	r3, sl
 8000ffa:	d1db      	bne.n	8000fb4 <getMultiplePolynomialRegression+0xd4>
				}
			}
			currentColumn2++;
 8000ffc:	9a06      	ldr	r2, [sp, #24]
 8000ffe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001000:	9b02      	ldr	r3, [sp, #8]
 8001002:	440a      	add	r2, r1
 8001004:	9206      	str	r2, [sp, #24]
 8001006:	9904      	ldr	r1, [sp, #16]
 8001008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800100a:	440a      	add	r2, r1
 800100c:	920c      	str	r2, [sp, #48]	; 0x30
 800100e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001012:	440a      	add	r2, r1
 8001014:	920d      	str	r2, [sp, #52]	; 0x34
		for (int currentRow=0; currentRow<n; currentRow++) {
 8001016:	9a05      	ldr	r2, [sp, #20]
			currentColumn2++;
 8001018:	3301      	adds	r3, #1
		for (int currentRow=0; currentRow<n; currentRow++) {
 800101a:	429a      	cmp	r2, r3
			currentColumn2++;
 800101c:	9302      	str	r3, [sp, #8]
		for (int currentRow=0; currentRow<n; currentRow++) {
 800101e:	dcb0      	bgt.n	8000f82 <getMultiplePolynomialRegression+0xa2>
		
		// -------------------- SOLUTION OF THE MODEL -------------------- //
		// In order to start obtaining the coefficients, we multiply the matrix "TransposeOf_X_tilde" with the matrix "X_tilde" and store the result in the matrix "matMul1".
		int currentRowTimesN; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
		int currentColumnTimesN; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
		double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 8001020:	9c04      	ldr	r4, [sp, #16]
 8001022:	2108      	movs	r1, #8
 8001024:	fb04 f004 	mul.w	r0, r4, r4
 8001028:	f001 fc7e 	bl	8002928 <calloc>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 800102c:	2c00      	cmp	r4, #0
		double *matMul1 = (double *) calloc(mTimesNPlusOne*mTimesNPlusOne, sizeof(double)); // We allocate, and initialize with zeros, the memory required for the local pointer variable that will contain the result of making a matrix multiplication between "X_tilde" and its transpose.
 800102e:	4601      	mov	r1, r0
 8001030:	9010      	str	r0, [sp, #64]	; 0x40
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001032:	f340 8184 	ble.w	800133e <getMultiplePolynomialRegression+0x45e>
 8001036:	00e3      	lsls	r3, r4, #3
 8001038:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 800103c:	9306      	str	r3, [sp, #24]
 800103e:	2000      	movs	r0, #0
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001046:	9215      	str	r2, [sp, #84]	; 0x54
 8001048:	9202      	str	r2, [sp, #8]
 800104a:	9009      	str	r0, [sp, #36]	; 0x24
 800104c:	9007      	str	r0, [sp, #28]
 800104e:	9118      	str	r1, [sp, #96]	; 0x60
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8001056:	4602      	mov	r2, r0
			currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
			currentRowTimesN = currentRow*n;
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 8001058:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800105a:	f04f 0b00 	mov.w	fp, #0
 800105e:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
				currentColumnTimesN = currentColumn*n;
				currentRowAndColumn = currentColumn + currentRowTimesmTimesNplusOne;
				for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001062:	9b03      	ldr	r3, [sp, #12]
 8001064:	9f01      	ldr	r7, [sp, #4]
 8001066:	e8fa 4502 	ldrd	r4, r5, [sl], #8
 800106a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800106e:	2600      	movs	r6, #0
					// Here we want to multiply "TransposeOf_X_tilde" with the matrix "X_tilde", but we will use "TransposeOf_X_tilde" for such multiplication since they contain the same data, for performance purposes.
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 8001070:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8001074:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8001078:	f7ff fade 	bl	8000638 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff f922 	bl	80002cc <__adddf3>
				for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001088:	3601      	adds	r6, #1
 800108a:	45b1      	cmp	r9, r6
					matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesN] * TransposeOf_X_tilde[currentMultipliedElements + currentColumnTimesN];
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
				for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001090:	dcee      	bgt.n	8001070 <getMultiplePolynomialRegression+0x190>
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 8001092:	9b02      	ldr	r3, [sp, #8]
 8001094:	4553      	cmp	r3, sl
 8001096:	e94a 4502 	strd	r4, r5, [sl, #-8]
 800109a:	44cb      	add	fp, r9
 800109c:	d1e1      	bne.n	8001062 <getMultiplePolynomialRegression+0x182>
 800109e:	9906      	ldr	r1, [sp, #24]
 80010a0:	461a      	mov	r2, r3
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 80010a2:	440a      	add	r2, r1
 80010a4:	9202      	str	r2, [sp, #8]
 80010a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80010a8:	9a01      	ldr	r2, [sp, #4]
 80010aa:	9b07      	ldr	r3, [sp, #28]
 80010ac:	440a      	add	r2, r1
 80010ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	9a04      	ldr	r2, [sp, #16]
 80010b4:	4608      	mov	r0, r1
 80010b6:	3301      	adds	r3, #1
 80010b8:	4410      	add	r0, r2
 80010ba:	429a      	cmp	r2, r3
 80010bc:	4601      	mov	r1, r0
 80010be:	9009      	str	r0, [sp, #36]	; 0x24
 80010c0:	d002      	beq.n	80010c8 <getMultiplePolynomialRegression+0x1e8>
 80010c2:	9307      	str	r3, [sp, #28]
 80010c4:	460a      	mov	r2, r1
 80010c6:	e7c7      	b.n	8001058 <getMultiplePolynomialRegression+0x178>
		//		 resources and further increase performance by not having to
		//		 allocate more memory in the computer system.
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
			currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
				TransposeOf_X_tilde[currentColumn + currentRowTimesmTimesNplusOne] = 0;
 80010c8:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 80010cc:	9b03      	ldr	r3, [sp, #12]
 80010ce:	2400      	movs	r4, #0
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 80010d0:	4618      	mov	r0, r3
 80010d2:	462a      	mov	r2, r5
 80010d4:	2100      	movs	r1, #0
 80010d6:	f001 fc8b 	bl	80029f0 <memset>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 80010da:	42a6      	cmp	r6, r4
 80010dc:	4603      	mov	r3, r0
 80010de:	442b      	add	r3, r5
 80010e0:	f104 0401 	add.w	r4, r4, #1
 80010e4:	d1f4      	bne.n	80010d0 <getMultiplePolynomialRegression+0x1f0>
 80010e6:	9b06      	ldr	r3, [sp, #24]
		    }
		}
		for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
			TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 80010e8:	4d4b      	ldr	r5, [pc, #300]	; (8001218 <getMultiplePolynomialRegression+0x338>)
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 80010ea:	9903      	ldr	r1, [sp, #12]
 80010ec:	9807      	ldr	r0, [sp, #28]
 80010ee:	f103 0608 	add.w	r6, r3, #8
			TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 80010f2:	2400      	movs	r4, #0
 80010f4:	9614      	str	r6, [sp, #80]	; 0x50
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We set all values to zero.
 80010f6:	2200      	movs	r2, #0
		for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 80010f8:	4282      	cmp	r2, r0
			TransposeOf_X_tilde[currentUnitaryValue + currentUnitaryValue*mTimesNPlusOne] = 1;
 80010fa:	e9c1 4500 	strd	r4, r5, [r1]
		for (int currentUnitaryValue=0; currentUnitaryValue<mTimesNPlusOne; currentUnitaryValue++) { // We set the corresponding 1's values to make the corresponding unitary matrix.
 80010fe:	f102 0201 	add.w	r2, r2, #1
 8001102:	4431      	add	r1, r6
 8001104:	d1f8      	bne.n	80010f8 <getMultiplePolynomialRegression+0x218>
 8001106:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001108:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	2200      	movs	r2, #0
 8001110:	9311      	str	r3, [sp, #68]	; 0x44
 8001112:	3b08      	subs	r3, #8
 8001114:	920d      	str	r2, [sp, #52]	; 0x34
 8001116:	9317      	str	r3, [sp, #92]	; 0x5c
 8001118:	9209      	str	r2, [sp, #36]	; 0x24
 800111a:	9b03      	ldr	r3, [sp, #12]
 800111c:	9a06      	ldr	r2, [sp, #24]
 800111e:	189a      	adds	r2, r3, r2
 8001120:	9213      	str	r2, [sp, #76]	; 0x4c
 8001122:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001124:	920c      	str	r2, [sp, #48]	; 0x30
 8001126:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		int currentColumnTimesmTimesNplusOne; // This variable is used to store a repetitive multiplication in some for-loops, for performance purposes.
		double ratioModifier; // This variable is used to store the ratio modifier for the current row whose values will be updated due to the inverse matrix method.
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
			currentColumnTimesmTimesNplusOne = currentColumn*mTimesNPlusOne;
			currentRowAndColumn2 = currentColumn + currentColumnTimesmTimesNplusOne;
			for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 800112a:	2300      	movs	r3, #0
 800112c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001132:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8001136:	9a01      	ldr	r2, [sp, #4]
 8001138:	4698      	mov	r8, r3
				if (currentRow != currentColumn) {
 800113a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800113c:	4293      	cmp	r3, r2
 800113e:	d03e      	beq.n	80011be <getMultiplePolynomialRegression+0x2de>
					currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
					ratioModifier = matMul1[currentColumn + currentRowTimesmTimesNplusOne]/matMul1[currentRowAndColumn2];
 8001140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001142:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001144:	445b      	add	r3, fp
 8001146:	4413      	add	r3, r2
 8001148:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800114c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fb9b 	bl	800088c <__aeabi_ddiv>
 8001156:	9b02      	ldr	r3, [sp, #8]
 8001158:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800115c:	00da      	lsls	r2, r3, #3
 800115e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001160:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 8001166:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
						currentRowAndColumn = currentModifiedElements + currentRowTimesmTimesNplusOne;
						matMul1[currentRowAndColumn] = matMul1[currentRowAndColumn] - ratioModifier * matMul1[currentModifiedElements + currentColumnTimesmTimesNplusOne];
 800116a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800116e:	4622      	mov	r2, r4
 8001170:	462b      	mov	r3, r5
 8001172:	f7ff fa61 	bl	8000638 <__aeabi_dmul>
 8001176:	e9d9 6700 	ldrd	r6, r7, [r9]
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4630      	mov	r0, r6
 8001180:	4639      	mov	r1, r7
 8001182:	f7ff f8a1 	bl	80002c8 <__aeabi_dsub>
 8001186:	e8e9 0102 	strd	r0, r1, [r9], #8
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the principal matrix.
 800118a:	45cb      	cmp	fp, r9
 800118c:	d1ed      	bne.n	800116a <getMultiplePolynomialRegression+0x28a>
 800118e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001190:	9a03      	ldr	r2, [sp, #12]
 8001192:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8001196:	4413      	add	r3, r2
 8001198:	4699      	mov	r9, r3
					}
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
						currentRowAndColumn = currentModifiedElements + currentRowTimesmTimesNplusOne;
						TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] - ratioModifier * TransposeOf_X_tilde[currentModifiedElements + currentColumnTimesmTimesNplusOne];
 800119a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800119e:	4622      	mov	r2, r4
 80011a0:	462b      	mov	r3, r5
 80011a2:	f7ff fa49 	bl	8000638 <__aeabi_dmul>
 80011a6:	e9d9 6700 	ldrd	r6, r7, [r9]
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4630      	mov	r0, r6
 80011b0:	4639      	mov	r1, r7
 80011b2:	f7ff f889 	bl	80002c8 <__aeabi_dsub>
 80011b6:	e8e9 0102 	strd	r0, r1, [r9], #8
					for (int currentModifiedElements=0; currentModifiedElements<mTimesNPlusOne; currentModifiedElements++) { // We apply the current process to the result matrix.
 80011ba:	45c8      	cmp	r8, r9
 80011bc:	d1ed      	bne.n	800119a <getMultiplePolynomialRegression+0x2ba>
			for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 80011be:	9b02      	ldr	r3, [sp, #8]
 80011c0:	9a04      	ldr	r2, [sp, #16]
 80011c2:	9907      	ldr	r1, [sp, #28]
 80011c4:	4413      	add	r3, r2
 80011c6:	9a01      	ldr	r2, [sp, #4]
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	9b06      	ldr	r3, [sp, #24]
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4498      	add	r8, r3
 80011d0:	449b      	add	fp, r3
 80011d2:	f102 0301 	add.w	r3, r2, #1
 80011d6:	d002      	beq.n	80011de <getMultiplePolynomialRegression+0x2fe>
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	e7ad      	b.n	800113a <getMultiplePolynomialRegression+0x25a>
		for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) { // We apply the differentiations applied to each row according to the approach used.
 80011de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80011e0:	9b06      	ldr	r3, [sp, #24]
 80011e2:	4611      	mov	r1, r2
 80011e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011e6:	4419      	add	r1, r3
 80011e8:	441a      	add	r2, r3
 80011ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011ec:	920e      	str	r2, [sp, #56]	; 0x38
 80011ee:	3308      	adds	r3, #8
 80011f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80011f2:	930d      	str	r3, [sp, #52]	; 0x34
 80011f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80011f6:	910f      	str	r1, [sp, #60]	; 0x3c
 80011f8:	4413      	add	r3, r2
 80011fa:	9907      	ldr	r1, [sp, #28]
 80011fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011fe:	930c      	str	r3, [sp, #48]	; 0x30
 8001200:	428a      	cmp	r2, r1
 8001202:	f102 0301 	add.w	r3, r2, #1
 8001206:	d009      	beq.n	800121c <getMultiplePolynomialRegression+0x33c>
 8001208:	9309      	str	r3, [sp, #36]	; 0x24
 800120a:	e78e      	b.n	800112a <getMultiplePolynomialRegression+0x24a>
 800120c:	f3af 8000 	nop.w
 8001210:	00000000 	.word	0x00000000
 8001214:	3ff00000 	.word	0x3ff00000
 8001218:	3ff00000 	.word	0x3ff00000
 800121c:	2700      	movs	r7, #0
 800121e:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8001222:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001224:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001228:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800122c:	46b9      	mov	r9, r7
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
			currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
			currentRowAndColumn2 = currentRow + currentRowTimesmTimesNplusOne;
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
				currentRowAndColumn = currentColumn + currentRowTimesmTimesNplusOne;
				TransposeOf_X_tilde[currentRowAndColumn] = TransposeOf_X_tilde[currentRowAndColumn] / matMul1[currentRowAndColumn2];
 800122e:	e9d8 6700 	ldrd	r6, r7, [r8]
 8001232:	eb0a 0405 	add.w	r4, sl, r5
 8001236:	e9d4 0100 	ldrd	r0, r1, [r4]
 800123a:	4632      	mov	r2, r6
 800123c:	463b      	mov	r3, r7
 800123e:	f7ff fb25 	bl	800088c <__aeabi_ddiv>
 8001242:	e8e4 0102 	strd	r0, r1, [r4], #8
			for (int currentColumn=0; currentColumn<mTimesNPlusOne; currentColumn++) {
 8001246:	42a5      	cmp	r5, r4
 8001248:	d1f5      	bne.n	8001236 <getMultiplePolynomialRegression+0x356>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) { // We apply the last step of the approach used in order to obtain the diagonal of 1's in the principal matrix.
 800124a:	9a07      	ldr	r2, [sp, #28]
 800124c:	9b06      	ldr	r3, [sp, #24]
 800124e:	4591      	cmp	r9, r2
 8001250:	441d      	add	r5, r3
 8001252:	44d8      	add	r8, fp
 8001254:	f109 0301 	add.w	r3, r9, #1
 8001258:	d001      	beq.n	800125e <getMultiplePolynomialRegression+0x37e>
 800125a:	4699      	mov	r9, r3
 800125c:	e7e7      	b.n	800122e <getMultiplePolynomialRegression+0x34e>
		// NOTE: Remember that we will get the data of the transpose of
		//		 "X_tilde" directly from that same variable
		//		 ("X_tilde") due to performance reasons and; that the
		//		 inverse matrix that was obtained is stored in
		//		 "TransposeOf_X_tilde".
		double *matMul2 = (double *) calloc(mTimesNPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 800125e:	ee18 0a10 	vmov	r0, s16
 8001262:	2108      	movs	r1, #8
 8001264:	f001 fb60 	bl	8002928 <calloc>
 8001268:	2300      	movs	r3, #0
 800126a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	9007      	str	r0, [sp, #28]
 8001272:	9309      	str	r3, [sp, #36]	; 0x24
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
			currentRowTimesN = currentRow*n;
			currentRowTimesmTimesNplusOne = currentRow*mTimesNPlusOne;
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001274:	9b07      	ldr	r3, [sp, #28]
 8001276:	9a02      	ldr	r2, [sp, #8]
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 8001278:	f04f 0a00 	mov.w	sl, #0
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 800127c:	f8cd a004 	str.w	sl, [sp, #4]
 8001280:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
				currentRowAndColumn = currentColumn + currentRowTimesN;
				currentColumnTimesmTimesNplusOne = currentColumn*mTimesNPlusOne;
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 8001284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 8001286:	9f08      	ldr	r7, [sp, #32]
 8001288:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800128c:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 8001290:	2600      	movs	r6, #0
					matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesmTimesNplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesmTimesNplusOne];
 8001292:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8001296:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800129a:	f7ff f9cd 	bl	8000638 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f811 	bl	80002cc <__adddf3>
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 80012aa:	45b1      	cmp	r9, r6
					matMul2[currentRowAndColumn] = matMul2[currentRowAndColumn] + TransposeOf_X_tilde[currentMultipliedElements + currentRowTimesmTimesNplusOne] * X_tilde[currentMultipliedElements + currentColumnTimesmTimesNplusOne];
 80012ac:	4604      	mov	r4, r0
 80012ae:	460d      	mov	r5, r1
				for (int currentMultipliedElements=0; currentMultipliedElements<mTimesNPlusOne; currentMultipliedElements++) {
 80012b0:	f106 0601 	add.w	r6, r6, #1
 80012b4:	dced      	bgt.n	8001292 <getMultiplePolynomialRegression+0x3b2>
 80012b6:	9a04      	ldr	r2, [sp, #16]
			for (int currentColumn=0; currentColumn<n; currentColumn++) {
 80012b8:	9b01      	ldr	r3, [sp, #4]
 80012ba:	4492      	add	sl, r2
 80012bc:	9a05      	ldr	r2, [sp, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	429a      	cmp	r2, r3
 80012c2:	e94b 4502 	strd	r4, r5, [fp, #-8]
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	dcdc      	bgt.n	8001284 <getMultiplePolynomialRegression+0x3a4>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 80012ca:	9b08      	ldr	r3, [sp, #32]
 80012cc:	9a06      	ldr	r2, [sp, #24]
 80012ce:	4413      	add	r3, r2
 80012d0:	9308      	str	r3, [sp, #32]
 80012d2:	9a05      	ldr	r2, [sp, #20]
 80012d4:	9b02      	ldr	r3, [sp, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	4591      	cmp	r9, r2
 80012de:	f102 0301 	add.w	r3, r2, #1
 80012e2:	dd01      	ble.n	80012e8 <getMultiplePolynomialRegression+0x408>
 80012e4:	9309      	str	r3, [sp, #36]	; 0x24
 80012e6:	e7c5      	b.n	8001274 <getMultiplePolynomialRegression+0x394>
 80012e8:	f04f 0a00 	mov.w	sl, #0
 80012ec:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80012f0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80012f4:	f8cd a004 	str.w	sl, [sp, #4]
		}
		
		// In order to conclude obtaining the coefficients ("b"), we multiply the previously resulting matrix ("matMul2") by the output matrix "Y".
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
			currentRowTimesN = currentRow*n;
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 80012f8:	9b07      	ldr	r3, [sp, #28]
 80012fa:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80012fc:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 8001300:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
 8001304:	2600      	movs	r6, #0
				b[currentRow] = b[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 8001306:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 800130a:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 800130e:	f7ff f993 	bl	8000638 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ffd7 	bl	80002cc <__adddf3>
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800131e:	3601      	adds	r6, #1
				b[currentRow] = b[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 8001320:	4604      	mov	r4, r0
 8001322:	460d      	mov	r5, r1
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 8001324:	45b3      	cmp	fp, r6
				b[currentRow] = b[currentRow] + matMul2[currentMultipliedElements + currentRowTimesN] * Y[currentMultipliedElements];
 8001326:	e949 4502 	strd	r4, r5, [r9, #-8]
			for (int currentMultipliedElements=0; currentMultipliedElements<n; currentMultipliedElements++) {
 800132a:	dcec      	bgt.n	8001306 <getMultiplePolynomialRegression+0x426>
		for (int currentRow=0; currentRow<mTimesNPlusOne; currentRow++) {
 800132c:	9a01      	ldr	r2, [sp, #4]
 800132e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001330:	4291      	cmp	r1, r2
 8001332:	44da      	add	sl, fp
 8001334:	f102 0301 	add.w	r3, r2, #1
 8001338:	dd07      	ble.n	800134a <getMultiplePolynomialRegression+0x46a>
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	e7dc      	b.n	80012f8 <getMultiplePolynomialRegression+0x418>
		double *matMul2 = (double *) calloc(mTimesNPlusOne*n, sizeof(double)); // We allocate the memory required for the local pointer variable that will contain the result of making a matrix multiplication between the resulting inverse matrix of this process and the transpose of the matrix "X_tilde".
 800133e:	ee18 0a10 	vmov	r0, s16
 8001342:	2108      	movs	r1, #8
 8001344:	f001 faf0 	bl	8002928 <calloc>
 8001348:	9007      	str	r0, [sp, #28]
			}
		}
		
		// Free the Heap memory used for the locally allocated variables since they will no longer be used.
		free(X_tilde);
 800134a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800134c:	f001 fb3a 	bl	80029c4 <free>
		free(TransposeOf_X_tilde);
 8001350:	9803      	ldr	r0, [sp, #12]
 8001352:	f001 fb37 	bl	80029c4 <free>
		free(matMul1);
 8001356:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001358:	f001 fb34 	bl	80029c4 <free>
		free(matMul2);
 800135c:	9807      	ldr	r0, [sp, #28]
		printf("\nERROR: The argument variable \"isInteractionTerms\" is meant to store only a binary value that equals either 1 or 0.\n");
		exit(1);
	}
	
	return;
}
 800135e:	b01b      	add	sp, #108	; 0x6c
 8001360:	ecbd 8b02 	vpop	{d8}
 8001364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		free(matMul2);
 8001368:	f001 bb2c 	b.w	80029c4 <free>
		printf("\nERROR: The functionality of this function, when the argument variable \"isInteractionTerms\" contains a value of 1, has not yet been developed.\n");
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <getMultiplePolynomialRegression+0x4c8>)
 800136e:	f002 f8f1 	bl	8003554 <puts>
		exit(1);
 8001372:	4620      	mov	r0, r4
 8001374:	f001 fae6 	bl	8002944 <exit>
			printf("\nERROR: With respect to the system under study, there must only be only one output for this particular algorithm.\n");
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <getMultiplePolynomialRegression+0x4cc>)
 800137a:	f002 f8eb 	bl	8003554 <puts>
			exit(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f001 fae0 	bl	8002944 <exit>
			printf("\nERROR: The number of samples provided must be equal or higher than the number of machine learning features (independent variables) for this particular algorithm.\n");
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <getMultiplePolynomialRegression+0x4d0>)
 8001386:	f002 f8e5 	bl	8003554 <puts>
			exit(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f001 fada 	bl	8002944 <exit>
			printf("\nERROR: The machine learning features (independent variables) must be equal or greater than 1 for this particular algorithm.\n");
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <getMultiplePolynomialRegression+0x4d4>)
 8001392:	f002 f8df 	bl	8003554 <puts>
			exit(1);
 8001396:	2001      	movs	r0, #1
 8001398:	f001 fad4 	bl	8002944 <exit>
		printf("\nERROR: The argument variable \"isInteractionTerms\" is meant to store only a binary value that equals either 1 or 0.\n");
 800139c:	4806      	ldr	r0, [pc, #24]	; (80013b8 <getMultiplePolynomialRegression+0x4d8>)
 800139e:	f002 f8d9 	bl	8003554 <puts>
		exit(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f001 face 	bl	8002944 <exit>
 80013a8:	08005fa8 	.word	0x08005fa8
 80013ac:	08005f34 	.word	0x08005f34
 80013b0:	08005e90 	.word	0x08005e90
 80013b4:	08005e10 	.word	0x08005e10
 80013b8:	08006038 	.word	0x08006038

080013bc <_write>:
 * @author Controllers Tech
 * CREATION DATE: JANUARY 07, 2022.
 * LAST UPDATE: N/A/
 */
int _write(int file, char *ptr, int len) {
	for (int i=0; i<len; i++) {
 80013bc:	1e10      	subs	r0, r2, #0
 80013be:	dd1a      	ble.n	80013f6 <_write+0x3a>
int _write(int file, char *ptr, int len) {
 80013c0:	b430      	push	{r4, r5}
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013c6:	180d      	adds	r5, r1, r0
 80013c8:	f8d3 4e80 	ldr.w	r4, [r3, #3712]	; 0xe80
 80013cc:	07e4      	lsls	r4, r4, #31
		ITM_SendChar((*ptr++));
 80013ce:	f101 0101 	add.w	r1, r1, #1
 80013d2:	d50c      	bpl.n	80013ee <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013d4:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d8:	07e2      	lsls	r2, r4, #31
 80013da:	d508      	bpl.n	80013ee <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013dc:	681c      	ldr	r4, [r3, #0]
 80013de:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80013e2:	b91c      	cbnz	r4, 80013ec <_write+0x30>
    {
      __NOP();
 80013e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013e6:	681c      	ldr	r4, [r3, #0]
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d0fb      	beq.n	80013e4 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<len; i++) {
 80013ee:	42a9      	cmp	r1, r5
 80013f0:	d1ea      	bne.n	80013c8 <_write+0xc>
	}
	return len;
}
 80013f2:	bc30      	pop	{r4, r5}
 80013f4:	4770      	bx	lr
 80013f6:	4770      	bx	lr

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	2300      	movs	r3, #0
{
 80013fc:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001402:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001406:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4925      	ldr	r1, [pc, #148]	; (80014a0 <SystemClock_Config+0xa8>)
 800140c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140e:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001418:	6408      	str	r0, [r1, #64]	; 0x40
 800141a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800141c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001420:	9100      	str	r1, [sp, #0]
 8001422:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001434:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001436:	2009      	movs	r0, #9
 8001438:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800143e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001442:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001446:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001448:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 800144c:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 800144e:	21b4      	movs	r1, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001452:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001456:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800145a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001460:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f000 fe89 	bl	8002178 <HAL_RCC_OscConfig>
 8001466:	b108      	cbz	r0, 800146c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146a:	e7fe      	b.n	800146a <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800146c:	f000 fb3c 	bl	8001ae8 <HAL_PWREx_EnableOverDrive>
 8001470:	b108      	cbz	r0, 8001476 <SystemClock_Config+0x7e>
 8001472:	b672      	cpsid	i
  while (1)
 8001474:	e7fe      	b.n	8001474 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	260f      	movs	r6, #15
 8001478:	2702      	movs	r7, #2
 800147a:	2400      	movs	r4, #0
 800147c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001484:	a802      	add	r0, sp, #8
 8001486:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800148c:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001490:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001492:	f000 fb67 	bl	8001b64 <HAL_RCC_ClockConfig>
 8001496:	b108      	cbz	r0, 800149c <SystemClock_Config+0xa4>
 8001498:	b672      	cpsid	i
  while (1)
 800149a:	e7fe      	b.n	800149a <SystemClock_Config+0xa2>
}
 800149c:	b017      	add	sp, #92	; 0x5c
 800149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <main>:
{
 80014a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ac:	f6ad 1d84 	subw	sp, sp, #2436	; 0x984
  HAL_Init();
 80014b0:	f000 fa76 	bl	80019a0 <HAL_Init>
  SystemClock_Config();
 80014b4:	f7ff ffa0 	bl	80013f8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	4aab      	ldr	r2, [pc, #684]	; (8001768 <main+0x2c0>)
 80014bc:	9306      	str	r3, [sp, #24]
 80014be:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hrtc.Instance = RTC;
 80014c0:	4daa      	ldr	r5, [pc, #680]	; (800176c <main+0x2c4>)
 80014c2:	48ab      	ldr	r0, [pc, #684]	; (8001770 <main+0x2c8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014c4:	606b      	str	r3, [r5, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	f041 0104 	orr.w	r1, r1, #4
 80014ca:	6311      	str	r1, [r2, #48]	; 0x30
 80014cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ce:	612b      	str	r3, [r5, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d0:	f001 0104 	and.w	r1, r1, #4
 80014d4:	9106      	str	r1, [sp, #24]
 80014d6:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d8:	9307      	str	r3, [sp, #28]
 80014da:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014dc:	616b      	str	r3, [r5, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80014e2:	6311      	str	r1, [r2, #48]	; 0x30
 80014e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e6:	61ab      	str	r3, [r5, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e8:	f002 0280 	and.w	r2, r2, #128	; 0x80
  RTC_TimeTypeDef sTime = {0};
 80014ec:	acd0      	add	r4, sp, #832	; 0x340
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	9207      	str	r2, [sp, #28]
  RTC_TimeTypeDef sTime = {0};
 80014f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80014f4:	e9c4 3303 	strd	r3, r3, [r4, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f8:	9a07      	ldr	r2, [sp, #28]
  RTC_DateTypeDef sDate = {0};
 80014fa:	9308      	str	r3, [sp, #32]
  hrtc.Init.AsynchPrediv = 127;
 80014fc:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80014fe:	6028      	str	r0, [r5, #0]
  RTC_TimeTypeDef sTime = {0};
 8001500:	6023      	str	r3, [r4, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001502:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	e9c5 2302 	strd	r2, r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800150a:	f001 f83f 	bl	800258c <HAL_RTC_Init>
 800150e:	b108      	cbz	r0, 8001514 <main+0x6c>
 8001510:	b672      	cpsid	i
  while (1)
 8001512:	e7fe      	b.n	8001512 <main+0x6a>
  sTime.Seconds = 0x0;
 8001514:	4603      	mov	r3, r0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001516:	2201      	movs	r2, #1
 8001518:	4621      	mov	r1, r4
 800151a:	4628      	mov	r0, r5
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800151c:	e9c4 3303 	strd	r3, r3, [r4, #12]
  sTime.Hours = 0x0;
 8001520:	8023      	strh	r3, [r4, #0]
  sTime.Seconds = 0x0;
 8001522:	70a3      	strb	r3, [r4, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001524:	f001 f8a0 	bl	8002668 <HAL_RTC_SetTime>
 8001528:	b108      	cbz	r0, 800152e <main+0x86>
 800152a:	b672      	cpsid	i
  while (1)
 800152c:	e7fe      	b.n	800152c <main+0x84>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800152e:	4b91      	ldr	r3, [pc, #580]	; (8001774 <main+0x2cc>)
 8001530:	9308      	str	r3, [sp, #32]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001532:	4628      	mov	r0, r5
 8001534:	2201      	movs	r2, #1
 8001536:	a908      	add	r1, sp, #32
 8001538:	f001 f94e 	bl	80027d8 <HAL_RTC_SetDate>
 800153c:	b108      	cbz	r0, 8001542 <main+0x9a>
 800153e:	b672      	cpsid	i
  while (1)
 8001540:	e7fe      	b.n	8001540 <main+0x98>
  double databaseX[] = {10, 10, 10, 20, 10, 30, 10, 40, 10, 50, 10, 60, 10, 70, 10, 80, 10, 90, 10, 100,
 8001542:	498d      	ldr	r1, [pc, #564]	; (8001778 <main+0x2d0>)
	  	printf("----------------------------------------------------------------------\n");
 8001544:	f8df b260 	ldr.w	fp, [pc, #608]	; 80017a8 <main+0x300>
  double databaseX[] = {10, 10, 10, 20, 10, 30, 10, 40, 10, 50, 10, 60, 10, 70, 10, 80, 10, 90, 10, 100,
 8001548:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800154c:	4620      	mov	r0, r4
 800154e:	f001 fa41 	bl	80029d4 <memcpy>
  double databaseY[] = {56.08, 47.12, 40.72, 36.88, 35.6, 36.88, 40.72, 47.12, 56.08, 67.6, 44.88, 35.92, 29.52, 25.68, 24.4, 25.68, 29.52, 35.92, 44.88, 56.4, 36.88, 27.92, 21.52, 17.68, 16.4, 17.68, 21.52, 27.92, 36.88, 48.4, 32.08, 23.12, 16.72, 12.88, 11.6, 12.88, 16.72, 23.12, 32.08, 43.6, 30.48, 21.52, 15.12, 11.28, 10, 11.28, 15.12, 21.52, 30.48, 42, 32.08, 23.12, 16.72, 12.88, 11.6, 12.88, 16.72, 23.12, 32.08, 43.6, 36.88, 27.92, 21.52, 17.68, 16.4, 17.68, 21.52, 27.92, 36.88, 48.4, 44.88, 35.92, 29.52, 25.68, 24.4, 25.68, 29.52, 35.92, 44.88, 56.4, 56.08, 47.12, 40.72, 36.88, 35.6, 36.88, 40.72, 47.12, 56.08, 67.6, 70.48, 61.52, 55.12, 51.28, 50, 51.28, 55.12, 61.52, 70.48, 82}; // This variable contains the expected/real output data of the system under study for when n=100.
 8001552:	498a      	ldr	r1, [pc, #552]	; (800177c <main+0x2d4>)
 8001554:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001558:	a808      	add	r0, sp, #32
 800155a:	f001 fa3b 	bl	80029d4 <memcpy>
	  	printf("----------------------------------------------------------------------\n");
 800155e:	4658      	mov	r0, fp
 8001560:	f001 fff8 	bl	8003554 <puts>
	  	printf("----------------------------------------------------------------------\n");
 8001564:	4658      	mov	r0, fp
 8001566:	f001 fff5 	bl	8003554 <puts>
	  	printf("Initializing the output and input data with %d samples and %d independent variables...\n", n, m);
 800156a:	2202      	movs	r2, #2
 800156c:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001570:	4883      	ldr	r0, [pc, #524]	; (8001780 <main+0x2d8>)
 8001572:	f001 ff69 	bl	8003448 <iprintf>
	  	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to initialize the input data to be used.
 8001576:	f000 fa39 	bl	80019ec <HAL_GetTick>
 800157a:	4605      	mov	r5, r0
	  	double *X = (double *) malloc(n*m*sizeof(double));
 800157c:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 8001580:	f001 fa18 	bl	80029b4 <malloc>
 8001584:	4681      	mov	r9, r0
	  	double *Y = (double *) malloc(n*p*sizeof(double));
 8001586:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 800158a:	f001 fa13 	bl	80029b4 <malloc>
 800158e:	f04f 0c00 	mov.w	ip, #0
 8001592:	4680      	mov	r8, r0
	  	for (int currentIteration=0; currentIteration<(n/n_database); currentIteration++) {
 8001594:	4686      	mov	lr, r0
	  		for (int currentRow=0; currentRow<n_database; currentRow++) {
 8001596:	ab08      	add	r3, sp, #32
	  	double *Y = (double *) malloc(n*p*sizeof(double));
 8001598:	4672      	mov	r2, lr
	  			Y[currentRow + currentIteration*n_database] = databaseY[currentRow];
 800159a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
	  		for (int currentRow=0; currentRow<n_database; currentRow++) {
 800159e:	42a3      	cmp	r3, r4
	  			Y[currentRow + currentIteration*n_database] = databaseY[currentRow];
 80015a0:	e8e2 0102 	strd	r0, r1, [r2], #8
	  		for (int currentRow=0; currentRow<n_database; currentRow++) {
 80015a4:	d1f9      	bne.n	800159a <main+0xf2>
	  	for (int currentIteration=0; currentIteration<(n/n_database); currentIteration++) {
 80015a6:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80015aa:	f5bc 7f61 	cmp.w	ip, #900	; 0x384
 80015ae:	f50e 7e48 	add.w	lr, lr, #800	; 0x320
 80015b2:	d1f0      	bne.n	8001596 <main+0xee>
 80015b4:	46ca      	mov	sl, r9
 80015b6:	f04f 0e00 	mov.w	lr, #0
 80015ba:	f50d 6c18 	add.w	ip, sp, #2432	; 0x980
	  		for (int currentRow=0; currentRow<n_database; currentRow++) {
 80015be:	4623      	mov	r3, r4
	  	double *Y = (double *) malloc(n*p*sizeof(double));
 80015c0:	4652      	mov	r2, sl
	  			X[0 + currentRow*m + currentIteration*n_database*m] = databaseX[0 + currentRow*m];
 80015c2:	ed93 7b00 	vldr	d7, [r3]
	  			X[1 + currentRow*m + currentIteration*n_database*m] = databaseX[1 + currentRow*m];
 80015c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015ca:	3310      	adds	r3, #16
	  		for (int currentRow=0; currentRow<n_database; currentRow++) {
 80015cc:	459c      	cmp	ip, r3
	  			X[0 + currentRow*m + currentIteration*n_database*m] = databaseX[0 + currentRow*m];
 80015ce:	ed82 7b00 	vstr	d7, [r2]
	  			X[1 + currentRow*m + currentIteration*n_database*m] = databaseX[1 + currentRow*m];
 80015d2:	e9c2 0102 	strd	r0, r1, [r2, #8]
	  		for (int currentRow=0; currentRow<n_database; currentRow++) {
 80015d6:	f102 0210 	add.w	r2, r2, #16
 80015da:	d1f2      	bne.n	80015c2 <main+0x11a>
	  	for (int currentIteration=0; currentIteration<(n/n_database); currentIteration++) {
 80015dc:	f10e 0ec8 	add.w	lr, lr, #200	; 0xc8
 80015e0:	f5be 6fe1 	cmp.w	lr, #1800	; 0x708
 80015e4:	f50a 6ac8 	add.w	sl, sl, #1600	; 0x640
 80015e8:	d1e9      	bne.n	80015be <main+0x116>
	  	elapsedTime = HAL_GetTick() - startingTime; // We obtain the elapsed time to initialize the input data to be used.
 80015ea:	f000 f9ff 	bl	80019ec <HAL_GetTick>
	  	printf("Output and input data initialization elapsed %ld milliseconds.\n\n", elapsedTime);
 80015ee:	1b41      	subs	r1, r0, r5
 80015f0:	4864      	ldr	r0, [pc, #400]	; (8001784 <main+0x2dc>)
 80015f2:	f001 ff29 	bl	8003448 <iprintf>
	  	printf("Initializing CenyML multiple polynomial regression algorithm ...\n");
 80015f6:	4864      	ldr	r0, [pc, #400]	; (8001788 <main+0x2e0>)
 80015f8:	f001 ffac 	bl	8003554 <puts>
	  	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to apply the multiple polynomial regression with the input data (X).
 80015fc:	f000 f9f6 	bl	80019ec <HAL_GetTick>
	  	double *b = (double *) calloc((m*N+1)*p, sizeof(double));
 8001600:	2108      	movs	r1, #8
	  	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to apply the multiple polynomial regression with the input data (X).
 8001602:	4682      	mov	sl, r0
	  	double *b = (double *) calloc((m*N+1)*p, sizeof(double));
 8001604:	2005      	movs	r0, #5
 8001606:	f001 f98f 	bl	8002928 <calloc>
	  	getMultiplePolynomialRegression(X, Y, n, m, p, N, (char) 0, (char) 0, b); // NOTE: Remember that this functions stores the resulting coefficients in the pointer variable "b".
 800160a:	2302      	movs	r3, #2
 800160c:	2200      	movs	r2, #0
 800160e:	2101      	movs	r1, #1
 8001610:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001614:	e9cd 2003 	strd	r2, r0, [sp, #12]
	  	double *b = (double *) calloc((m*N+1)*p, sizeof(double));
 8001618:	4605      	mov	r5, r0
	  	getMultiplePolynomialRegression(X, Y, n, m, p, N, (char) 0, (char) 0, b); // NOTE: Remember that this functions stores the resulting coefficients in the pointer variable "b".
 800161a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800161e:	9100      	str	r1, [sp, #0]
 8001620:	4648      	mov	r0, r9
 8001622:	4641      	mov	r1, r8
 8001624:	f7ff fc5c 	bl	8000ee0 <getMultiplePolynomialRegression>
	  	elapsedTime = HAL_GetTick() - startingTime; // We obtain the elapsed time to apply the multiple polynomial regression with the input data (X).
 8001628:	f000 f9e0 	bl	80019ec <HAL_GetTick>
	  	printf("CenyML multiple polynomial regression algorithm elapsed %ld milliseconds.\n\n", elapsedTime);
 800162c:	eba0 010a 	sub.w	r1, r0, sl
 8001630:	4856      	ldr	r0, [pc, #344]	; (800178c <main+0x2e4>)
 8001632:	f001 ff09 	bl	8003448 <iprintf>
	  	printf("Initializing coefficients validation of the CenyML getMultiplePolynomialRegression method ...\n");
 8001636:	4856      	ldr	r0, [pc, #344]	; (8001790 <main+0x2e8>)
 8001638:	f001 ff8c 	bl	8003554 <puts>
	  	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to validate the getMultiplePolynomialRegression method.
 800163c:	f000 f9d6 	bl	80019ec <HAL_GetTick>
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 8001640:	4b54      	ldr	r3, [pc, #336]	; (8001794 <main+0x2ec>)
 8001642:	2200      	movs	r2, #0
	  	startingTime = HAL_GetTick(); // We obtain the reference time to count the elapsed time to validate the getMultiplePolynomialRegression method.
 8001644:	4682      	mov	sl, r0
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 8001646:	e9d5 0100 	ldrd	r0, r1, [r5]
 800164a:	f7fe fe3d 	bl	80002c8 <__aeabi_dsub>
 800164e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 8001652:	a33b      	add	r3, pc, #236	; (adr r3, 8001740 <main+0x298>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	4639      	mov	r1, r7
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 800165a:	4606      	mov	r6, r0
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 800165c:	f7ff fa7c 	bl	8000b58 <__aeabi_dcmpgt>
 8001660:	2800      	cmp	r0, #0
 8001662:	d166      	bne.n	8001732 <main+0x28a>
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 8001664:	a338      	add	r3, pc, #224	; (adr r3, 8001748 <main+0x2a0>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800166e:	f7fe fe2d 	bl	80002cc <__adddf3>
 8001672:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 8001676:	a332      	add	r3, pc, #200	; (adr r3, 8001740 <main+0x298>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	4639      	mov	r1, r7
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 800167e:	4606      	mov	r6, r0
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 8001680:	f7ff fa6a 	bl	8000b58 <__aeabi_dcmpgt>
 8001684:	2800      	cmp	r0, #0
 8001686:	d154      	bne.n	8001732 <main+0x28a>
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 8001688:	a331      	add	r3, pc, #196	; (adr r3, 8001750 <main+0x2a8>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8001692:	f7fe fe19 	bl	80002c8 <__aeabi_dsub>
 8001696:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 800169a:	a329      	add	r3, pc, #164	; (adr r3, 8001740 <main+0x298>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	4639      	mov	r1, r7
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 80016a2:	4606      	mov	r6, r0
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 80016a4:	f7ff fa58 	bl	8000b58 <__aeabi_dcmpgt>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d142      	bne.n	8001732 <main+0x28a>
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 80016ac:	a32a      	add	r3, pc, #168	; (adr r3, 8001758 <main+0x2b0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80016b6:	f7fe fe09 	bl	80002cc <__adddf3>
 80016ba:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 80016be:	a320      	add	r3, pc, #128	; (adr r3, 8001740 <main+0x298>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	4639      	mov	r1, r7
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 80016c6:	4606      	mov	r6, r0
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 80016c8:	f7ff fa46 	bl	8000b58 <__aeabi_dcmpgt>
 80016cc:	bb88      	cbnz	r0, 8001732 <main+0x28a>
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 80016ce:	a324      	add	r3, pc, #144	; (adr r3, 8001760 <main+0x2b8>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80016d8:	f7fe fdf6 	bl	80002c8 <__aeabi_dsub>
 80016dc:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 80016e0:	a317      	add	r3, pc, #92	; (adr r3, 8001740 <main+0x298>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	4639      	mov	r1, r7
			differentiation = fabs(b[currentRow] - b_ideal[currentRow]);
 80016e8:	4606      	mov	r6, r0
			if (differentiation > epsilon) { // if the error surpassed the value permitted, then terminate validation process and emit message to indicate a non match.
 80016ea:	f7ff fa35 	bl	8000b58 <__aeabi_dcmpgt>
 80016ee:	bb00      	cbnz	r0, 8001732 <main+0x28a>
	  		printf("Validation process MATCHED!\n");
 80016f0:	4829      	ldr	r0, [pc, #164]	; (8001798 <main+0x2f0>)
 80016f2:	f001 ff2f 	bl	8003554 <puts>
	  	elapsedTime = HAL_GetTick() - startingTime; // We obtain the elapsed time to validate the getMultiplePolynomialRegression method.
 80016f6:	f000 f979 	bl	80019ec <HAL_GetTick>
	  	printf("The coefficients validation of the CenyML getMultiplePolynomialRegression method elapsed %ld milliseconds.\n\n", elapsedTime);
 80016fa:	eba0 010a 	sub.w	r1, r0, sl
 80016fe:	4827      	ldr	r0, [pc, #156]	; (800179c <main+0x2f4>)
 8001700:	f001 fea2 	bl	8003448 <iprintf>
	  	printf("The program has been successfully completed!\n");
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <main+0x2f8>)
 8001706:	f001 ff25 	bl	8003554 <puts>
	  	free(X);
 800170a:	4648      	mov	r0, r9
 800170c:	f001 f95a 	bl	80029c4 <free>
	  	free(Y);
 8001710:	4640      	mov	r0, r8
 8001712:	f001 f957 	bl	80029c4 <free>
	  	free(b);
 8001716:	4628      	mov	r0, r5
 8001718:	f001 f954 	bl	80029c4 <free>
	  	printf("----------------------------------------------------------------------\n");
 800171c:	4658      	mov	r0, fp
 800171e:	f001 ff19 	bl	8003554 <puts>
	  	printf("----------------------------------------------------------------------\n");
 8001722:	4658      	mov	r0, fp
 8001724:	f001 ff16 	bl	8003554 <puts>
	  	HAL_Delay(1000); // 1000ms delay.
 8001728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172c:	f000 f964 	bl	80019f8 <HAL_Delay>
  {
 8001730:	e715      	b.n	800155e <main+0xb6>
				printf("Validation process DID NOT MATCH! and a difference of %f was obtained.\n", differentiation);
 8001732:	4632      	mov	r2, r6
 8001734:	463b      	mov	r3, r7
 8001736:	481b      	ldr	r0, [pc, #108]	; (80017a4 <main+0x2fc>)
 8001738:	f001 fe86 	bl	8003448 <iprintf>
	  	if (isMatch == 1) { // If the flag "isMatch" indicates a true/high value, then emit message to indicate that the validation process matched.
 800173c:	e7db      	b.n	80016f6 <main+0x24e>
 800173e:	bf00      	nop
 8001740:	e2308c3a 	.word	0xe2308c3a
 8001744:	3e45798e 	.word	0x3e45798e
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3ff99999 	.word	0x3ff99999
 8001750:	d2f1a9fc 	.word	0xd2f1a9fc
 8001754:	3f90624d 	.word	0x3f90624d
 8001758:	47ae147b 	.word	0x47ae147b
 800175c:	3ff47ae1 	.word	0x3ff47ae1
 8001760:	eb1c432d 	.word	0xeb1c432d
 8001764:	3f8a36e2 	.word	0x3f8a36e2
 8001768:	40023800 	.word	0x40023800
 800176c:	20000204 	.word	0x20000204
 8001770:	40002800 	.word	0x40002800
 8001774:	00010101 	.word	0x00010101
 8001778:	080054b0 	.word	0x080054b0
 800177c:	08005af0 	.word	0x08005af0
 8001780:	080060f4 	.word	0x080060f4
 8001784:	0800614c 	.word	0x0800614c
 8001788:	08006190 	.word	0x08006190
 800178c:	080061d4 	.word	0x080061d4
 8001790:	08006220 	.word	0x08006220
 8001794:	40548000 	.word	0x40548000
 8001798:	080062c8 	.word	0x080062c8
 800179c:	080062e4 	.word	0x080062e4
 80017a0:	08006354 	.word	0x08006354
 80017a4:	08006280 	.word	0x08006280
 80017a8:	080060ac 	.word	0x080060ac

080017ac <Error_Handler>:
 80017ac:	b672      	cpsid	i
  while (1)
 80017ae:	e7fe      	b.n	80017ae <Error_Handler+0x2>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x34>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	9100      	str	r1, [sp, #0]
 80017b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
 80017c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	9101      	str	r1, [sp, #4]
 80017cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	b002      	add	sp, #8
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017e8:	b510      	push	{r4, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	b098      	sub	sp, #96	; 0x60
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ee:	225c      	movs	r2, #92	; 0x5c
 80017f0:	a801      	add	r0, sp, #4
 80017f2:	2100      	movs	r1, #0
 80017f4:	f001 f8fc 	bl	80029f0 <memset>
  if(hrtc->Instance==RTC)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RTC_MspInit+0x40>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001800:	b018      	add	sp, #96	; 0x60
 8001802:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001804:	2220      	movs	r2, #32
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180a:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800180c:	9201      	str	r2, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800180e:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001810:	f000 fa46 	bl	8001ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	b920      	cbnz	r0, 8001820 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RTC_MspInit+0x44>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	b018      	add	sp, #96	; 0x60
 800181e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001820:	f7ff ffc4 	bl	80017ac <Error_Handler>
 8001824:	e7f7      	b.n	8001816 <HAL_RTC_MspInit+0x2e>
 8001826:	bf00      	nop
 8001828:	40002800 	.word	0x40002800
 800182c:	42470e3c 	.word	0x42470e3c

08001830 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler>
 8001832:	bf00      	nop

08001834 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <HardFault_Handler>
 8001836:	bf00      	nop

08001838 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler>
 800183a:	bf00      	nop

0800183c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <BusFault_Handler>
 800183e:	bf00      	nop

08001840 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler>
 8001842:	bf00      	nop

08001844 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <DebugMon_Handler>:
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <PendSV_Handler>:
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 b8c0 	b.w	80019d4 <HAL_IncTick>

08001854 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001854:	2001      	movs	r0, #1
 8001856:	4770      	bx	lr

08001858 <_kill>:

int _kill(int pid, int sig)
{
 8001858:	b508      	push	{r3, lr}
	errno = EINVAL;
 800185a:	f001 f86d 	bl	8002938 <__errno>
 800185e:	2316      	movs	r3, #22
 8001860:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001866:	bd08      	pop	{r3, pc}

08001868 <_exit>:

void _exit (int status)
{
 8001868:	b508      	push	{r3, lr}
	errno = EINVAL;
 800186a:	f001 f865 	bl	8002938 <__errno>
 800186e:	2316      	movs	r3, #22
 8001870:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001872:	e7fe      	b.n	8001872 <_exit+0xa>

08001874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	1e16      	subs	r6, r2, #0
 8001878:	dd07      	ble.n	800188a <_read+0x16>
 800187a:	460c      	mov	r4, r1
 800187c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	42a5      	cmp	r5, r4
 8001888:	d1f9      	bne.n	800187e <_read+0xa>
	}

return len;
}
 800188a:	4630      	mov	r0, r6
 800188c:	bd70      	pop	{r4, r5, r6, pc}
 800188e:	bf00      	nop

08001890 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800189e:	2000      	movs	r0, #0
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018a4:	2001      	movs	r0, #1
 80018a6:	4770      	bx	lr

080018a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018a8:	2000      	movs	r0, #0
 80018aa:	4770      	bx	lr

080018ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80018b0:	680b      	ldr	r3, [r1, #0]
{
 80018b2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4c0c      	ldr	r4, [pc, #48]	; (80018e8 <_sbrk+0x3c>)
 80018b6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018b8:	b12b      	cbz	r3, 80018c6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4418      	add	r0, r3
 80018bc:	4290      	cmp	r0, r2
 80018be:	d807      	bhi.n	80018d0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018c0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <_sbrk+0x40>)
 80018c8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4418      	add	r0, r3
 80018cc:	4290      	cmp	r0, r2
 80018ce:	d9f7      	bls.n	80018c0 <_sbrk+0x14>
    errno = ENOMEM;
 80018d0:	f001 f832 	bl	8002938 <__errno>
 80018d4:	230c      	movs	r3, #12
 80018d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd10      	pop	{r4, pc}
 80018e0:	200001f8 	.word	0x200001f8
 80018e4:	20020000 	.word	0x20020000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000238 	.word	0x20000238

080018f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <SystemInit+0x10>)
 80018f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001920:	4c0b      	ldr	r4, [pc, #44]	; (8001950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192e:	f7ff ffdf 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f001 f81b 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fdb7 	bl	80014a8 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001948:	08006784 	.word	0x08006784
  ldr r2, =_sbss
 800194c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001950:	20000238 	.word	0x20000238

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_InitTick+0x3c>)
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_InitTick+0x40>)
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
{
 8001962:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001968:	fbb0 f0f2 	udiv	r0, r0, r2
 800196c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001970:	f000 f8a0 	bl	8001ab4 <HAL_SYSTICK_Config>
 8001974:	b908      	cbnz	r0, 800197a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	2d0f      	cmp	r5, #15
 8001978:	d901      	bls.n	800197e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800197a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800197c:	bd38      	pop	{r3, r4, r5, pc}
 800197e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	4602      	mov	r2, r0
 8001982:	4629      	mov	r1, r5
 8001984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001988:	f000 f85c 	bl	8001a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_InitTick+0x44>)
 800198e:	4620      	mov	r0, r4
 8001990:	601d      	str	r5, [r3, #0]
}
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	20000004 	.word	0x20000004
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_Init>:
{
 80019a0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_Init+0x30>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f82d 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f7ff ffc8 	bl	8001958 <HAL_InitTick>
  HAL_MspInit();
 80019c8:	f7ff fef2 	bl	80017b0 <HAL_MspInit>
}
 80019cc:	2000      	movs	r0, #0
 80019ce:	bd08      	pop	{r3, pc}
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_IncTick+0x10>)
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_IncTick+0x14>)
 80019d8:	6811      	ldr	r1, [r2, #0]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	440b      	add	r3, r1
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000224 	.word	0x20000224
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_GetTick+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000224 	.word	0x20000224

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff fff6 	bl	80019ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a00:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001a02:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001a04:	d002      	beq.n	8001a0c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_Delay+0x20>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	1b43      	subs	r3, r0, r5
 8001a12:	42a3      	cmp	r3, r4
 8001a14:	d3fa      	bcc.n	8001a0c <HAL_Delay+0x14>
  {
  }
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4908      	ldr	r1, [pc, #32]	; (8001a40 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8001a1e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a22:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a24:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001a28:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a38:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001a3c:	60cb      	str	r3, [r1, #12]
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_NVIC_SetPriority+0x68>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4e:	f1c3 0507 	rsb	r5, r3, #7
 8001a52:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a54:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	bf28      	it	cs
 8001a5a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5c:	2c06      	cmp	r4, #6
 8001a5e:	d919      	bls.n	8001a94 <HAL_NVIC_SetPriority+0x50>
 8001a60:	3b03      	subs	r3, #3
 8001a62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a66:	409c      	lsls	r4, r3
 8001a68:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a70:	40ac      	lsls	r4, r5
 8001a72:	ea21 0104 	bic.w	r1, r1, r4
 8001a76:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001a78:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	db0c      	blt.n	8001a9a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a88:	0109      	lsls	r1, r1, #4
 8001a8a:	b2c9      	uxtb	r1, r1
 8001a8c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a90:	bc30      	pop	{r4, r5}
 8001a92:	4770      	bx	lr
 8001a94:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	4613      	mov	r3, r2
 8001a98:	e7e8      	b.n	8001a6c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_NVIC_SetPriority+0x6c>)
 8001a9c:	f000 000f 	and.w	r0, r0, #15
 8001aa0:	0109      	lsls	r1, r1, #4
 8001aa2:	4403      	add	r3, r0
 8001aa4:	b2c9      	uxtb	r1, r1
 8001aa6:	7619      	strb	r1, [r3, #24]
 8001aa8:	bc30      	pop	{r4, r5}
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	e000ecfc 	.word	0xe000ecfc

08001ab4 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001aba:	d20e      	bcs.n	8001ada <HAL_SYSTICK_Config+0x26>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	4c08      	ldr	r4, [pc, #32]	; (8001ae4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	20f0      	movs	r0, #240	; 0xf0
 8001ac6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001acc:	2107      	movs	r1, #7
  return (0UL);                                                     /* Function successful */
 8001ace:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	6019      	str	r1, [r3, #0]
 8001ad8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2001      	movs	r0, #1
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ae8:	b530      	push	{r4, r5, lr}
 8001aea:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001aee:	491a      	ldr	r1, [pc, #104]	; (8001b58 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001af0:	4d1a      	ldr	r5, [pc, #104]	; (8001b5c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2200      	movs	r2, #0
 8001af4:	9201      	str	r2, [sp, #4]
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b06:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b0a:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8001b0c:	f7ff ff6e 	bl	80019ec <HAL_GetTick>
 8001b10:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b12:	e005      	b.n	8001b20 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b14:	f7ff ff6a 	bl	80019ec <HAL_GetTick>
 8001b18:	1b00      	subs	r0, r0, r4
 8001b1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b1e:	d816      	bhi.n	8001b4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b20:	686b      	ldr	r3, [r5, #4]
 8001b22:	03da      	lsls	r2, r3, #15
 8001b24:	d5f6      	bpl.n	8001b14 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b28:	4d0c      	ldr	r5, [pc, #48]	; (8001b5c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001b2e:	f7ff ff5d 	bl	80019ec <HAL_GetTick>
 8001b32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b34:	e005      	b.n	8001b42 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b36:	f7ff ff59 	bl	80019ec <HAL_GetTick>
 8001b3a:	1b00      	subs	r0, r0, r4
 8001b3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b40:	d805      	bhi.n	8001b4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b42:	686b      	ldr	r3, [r5, #4]
 8001b44:	039b      	lsls	r3, r3, #14
 8001b46:	d5f6      	bpl.n	8001b36 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001b48:	2000      	movs	r0, #0
}
 8001b4a:	b003      	add	sp, #12
 8001b4c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8001b4e:	2003      	movs	r0, #3
}
 8001b50:	b003      	add	sp, #12
 8001b52:	bd30      	pop	{r4, r5, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	420e0040 	.word	0x420e0040
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	420e0044 	.word	0x420e0044

08001b64 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	f000 8087 	beq.w	8001c78 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6a:	4a48      	ldr	r2, [pc, #288]	; (8001c8c <HAL_RCC_ClockConfig+0x128>)
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	428b      	cmp	r3, r1
{
 8001b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b78:	460d      	mov	r5, r1
 8001b7a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	d209      	bcs.n	8001b92 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	b2cb      	uxtb	r3, r1
 8001b80:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d002      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8001b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	0798      	lsls	r0, r3, #30
 8001b96:	d514      	bpl.n	8001bc2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	0759      	lsls	r1, r3, #29
 8001b9a:	d504      	bpl.n	8001ba6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	493c      	ldr	r1, [pc, #240]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001b9e:	688a      	ldr	r2, [r1, #8]
 8001ba0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ba4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	071a      	lsls	r2, r3, #28
 8001ba8:	d504      	bpl.n	8001bb4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001baa:	4939      	ldr	r1, [pc, #228]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001bac:	688a      	ldr	r2, [r1, #8]
 8001bae:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001bb2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4936      	ldr	r1, [pc, #216]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001bb6:	68a0      	ldr	r0, [r4, #8]
 8001bb8:	688a      	ldr	r2, [r1, #8]
 8001bba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bbe:	4302      	orrs	r2, r0
 8001bc0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	07df      	lsls	r7, r3, #31
 8001bc4:	d521      	bpl.n	8001c0a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	6862      	ldr	r2, [r4, #4]
 8001bc8:	2a01      	cmp	r2, #1
 8001bca:	d057      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bcc:	1e93      	subs	r3, r2, #2
 8001bce:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd4:	d94d      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	0799      	lsls	r1, r3, #30
 8001bd8:	d5d8      	bpl.n	8001b8c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4e2d      	ldr	r6, [pc, #180]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001bdc:	68b3      	ldr	r3, [r6, #8]
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001be6:	f7ff ff01 	bl	80019ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf2:	f7ff fefb 	bl	80019ec <HAL_GetTick>
 8001bf6:	1bc0      	subs	r0, r0, r7
 8001bf8:	4540      	cmp	r0, r8
 8001bfa:	d844      	bhi.n	8001c86 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfc:	68b3      	ldr	r3, [r6, #8]
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c08:	d1f3      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_RCC_ClockConfig+0x128>)
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	d906      	bls.n	8001c24 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	b2eb      	uxtb	r3, r5
 8001c18:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	42ab      	cmp	r3, r5
 8001c22:	d1b3      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	075a      	lsls	r2, r3, #29
 8001c28:	d506      	bpl.n	8001c38 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2a:	4919      	ldr	r1, [pc, #100]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001c2c:	68e0      	ldr	r0, [r4, #12]
 8001c2e:	688a      	ldr	r2, [r1, #8]
 8001c30:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001c34:	4302      	orrs	r2, r0
 8001c36:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	071b      	lsls	r3, r3, #28
 8001c3a:	d507      	bpl.n	8001c4c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001c3e:	6921      	ldr	r1, [r4, #16]
 8001c40:	6893      	ldr	r3, [r2, #8]
 8001c42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4c:	f000 fa3c 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001c52:	4c10      	ldr	r4, [pc, #64]	; (8001c94 <HAL_RCC_ClockConfig+0x130>)
 8001c54:	6892      	ldr	r2, [r2, #8]
 8001c56:	4910      	ldr	r1, [pc, #64]	; (8001c98 <HAL_RCC_ClockConfig+0x134>)
 8001c58:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c62:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001c64:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c66:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001c68:	f7ff fe76 	bl	8001958 <HAL_InitTick>
  return HAL_OK;
 8001c6c:	2000      	movs	r0, #0
}
 8001c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	0198      	lsls	r0, r3, #6
 8001c74:	d4b1      	bmi.n	8001bda <HAL_RCC_ClockConfig+0x76>
 8001c76:	e789      	b.n	8001b8c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
}
 8001c7a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_ClockConfig+0x12c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	039e      	lsls	r6, r3, #14
 8001c82:	d4aa      	bmi.n	8001bda <HAL_RCC_ClockConfig+0x76>
 8001c84:	e782      	b.n	8001b8c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	e781      	b.n	8001b8e <HAL_RCC_ClockConfig+0x2a>
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08006384 	.word	0x08006384
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008

08001ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	f013 0601 	ands.w	r6, r3, #1
{
 8001caa:	b083      	sub	sp, #12
 8001cac:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001cae:	d00b      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cb0:	49b4      	ldr	r1, [pc, #720]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cb2:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8001cb4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001cb8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001cbc:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cbe:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cc2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cc6:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001cc8:	079a      	lsls	r2, r3, #30
 8001cca:	d50b      	bpl.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ccc:	49ad      	ldr	r1, [pc, #692]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001cd0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001cd4:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8001cd8:	4302      	orrs	r2, r0
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001cda:	2800      	cmp	r0, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001cdc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      plli2sused = 1U;
 8001ce0:	bf08      	it	eq
 8001ce2:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ce4:	f013 0504 	ands.w	r5, r3, #4
 8001ce8:	d012      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cea:	49a6      	ldr	r1, [pc, #664]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cec:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001cee:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cf2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001cfa:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cfe:	bf18      	it	ne
 8001d00:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d04:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d08:	bf12      	itee	ne
 8001d0a:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8001d0c:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8001d0e:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d10:	071f      	lsls	r7, r3, #28
 8001d12:	d50f      	bpl.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d14:	489b      	ldr	r0, [pc, #620]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d18:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001d1c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001d20:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d22:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d26:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d2a:	f000 80f9 	beq.w	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8001d2e:	2900      	cmp	r1, #0
 8001d30:	bf08      	it	eq
 8001d32:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d34:	0698      	lsls	r0, r3, #26
 8001d36:	f100 80aa 	bmi.w	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d3a:	06df      	lsls	r7, r3, #27
 8001d3c:	d504      	bpl.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d3e:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d40:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	6823      	ldr	r3, [r4, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001d48:	0618      	lsls	r0, r3, #24
 8001d4a:	d508      	bpl.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d4c:	498d      	ldr	r1, [pc, #564]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d4e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001d50:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d54:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d5e:	0659      	lsls	r1, r3, #25
 8001d60:	d508      	bpl.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d62:	4988      	ldr	r1, [pc, #544]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001d66:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d6a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d6e:	4302      	orrs	r2, r0
 8001d70:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d74:	05da      	lsls	r2, r3, #23
 8001d76:	d50c      	bpl.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d78:	4982      	ldr	r1, [pc, #520]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d7c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d80:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001d84:	4302      	orrs	r2, r0

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8001d86:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d8a:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
      pllsaiused = 1U;
 8001d8e:	bf08      	it	eq
 8001d90:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d92:	059f      	lsls	r7, r3, #22
 8001d94:	d508      	bpl.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d96:	497b      	ldr	r1, [pc, #492]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d98:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001d9a:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001d9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001da2:	4302      	orrs	r2, r0
 8001da4:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001da8:	0558      	lsls	r0, r3, #21
 8001daa:	d50b      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001dac:	4875      	ldr	r0, [pc, #468]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dae:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001db0:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8001db4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001db8:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001dba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001dbe:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001dc2:	d00b      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001dc4:	2e01      	cmp	r6, #1
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dcc:	d006      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001dce:	2d01      	cmp	r5, #1
 8001dd0:	f000 80e2 	beq.w	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001dd4:	2000      	movs	r0, #0
}
 8001dd6:	b003      	add	sp, #12
 8001dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dde:	4f69      	ldr	r7, [pc, #420]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001de4:	f7ff fe02 	bl	80019ec <HAL_GetTick>
 8001de8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dea:	e004      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dec:	f7ff fdfe 	bl	80019ec <HAL_GetTick>
 8001df0:	1b83      	subs	r3, r0, r6
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d841      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	0119      	lsls	r1, r3, #4
 8001dfa:	d4f7      	bmi.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	07da      	lsls	r2, r3, #31
 8001e00:	d53f      	bpl.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e04:	2a00      	cmp	r2, #0
 8001e06:	d13c      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e08:	495e      	ldr	r1, [pc, #376]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e0a:	6860      	ldr	r0, [r4, #4]
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e0c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e10:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e14:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001e18:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 8001e1c:	4332      	orrs	r2, r6
 8001e1e:	68a6      	ldr	r6, [r4, #8]
 8001e20:	4302      	orrs	r2, r0
 8001e22:	6960      	ldr	r0, [r4, #20]
 8001e24:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
 8001e28:	ea42 7200 	orr.w	r2, r2, r0, lsl #28
 8001e2c:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e30:	075e      	lsls	r6, r3, #29
 8001e32:	d504      	bpl.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8001e34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e36:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001e3a:	f000 8084 	beq.w	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8001e3e:	0718      	lsls	r0, r3, #28
 8001e40:	d503      	bpl.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e42:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001e44:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001e48:	d07d      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e4a:	0559      	lsls	r1, r3, #21
 8001e4c:	d504      	bpl.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001e4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001e50:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001e54:	f000 8103 	beq.w	800205e <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e58:	051a      	lsls	r2, r3, #20
 8001e5a:	d463      	bmi.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_PLLI2S_ENABLE();
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e5e:	4f49      	ldr	r7, [pc, #292]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    __HAL_RCC_PLLI2S_ENABLE();
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e64:	f7ff fdc2 	bl	80019ec <HAL_GetTick>
 8001e68:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	d4ae      	bmi.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x12e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e70:	f7ff fdbc 	bl	80019ec <HAL_GetTick>
 8001e74:	1b80      	subs	r0, r0, r6
 8001e76:	2802      	cmp	r0, #2
 8001e78:	d9f7      	bls.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
}
 8001e7c:	b003      	add	sp, #12
 8001e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e82:	079f      	lsls	r7, r3, #30
 8001e84:	d5d4      	bpl.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x190>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d1d1      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001e8c:	e7bc      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    PWR->CR |= PWR_CR_DBP;
 8001e90:	4f3f      	ldr	r7, [pc, #252]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2200      	movs	r2, #0
 8001e94:	9201      	str	r2, [sp, #4]
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eae:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fd9c 	bl	80019ec <HAL_GetTick>
 8001eb4:	4680      	mov	r8, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eb6:	e005      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7ff fd98 	bl	80019ec <HAL_GetTick>
 8001ebc:	eba0 0008 	sub.w	r0, r0, r8
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d8da      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	05d9      	lsls	r1, r3, #23
 8001ec8:	d5f6      	bpl.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eca:	4f2e      	ldr	r7, [pc, #184]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ece:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed0:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001ed4:	d011      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001ed6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8001eda:	4291      	cmp	r1, r2
 8001edc:	d00f      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x25e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee6:	2001      	movs	r0, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee8:	2100      	movs	r1, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eec:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001eee:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef2:	07da      	lsls	r2, r3, #31
 8001ef4:	f100 80cd 	bmi.w	8002092 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8001ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001efa:	f403 7240 	and.w	r2, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001efe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f02:	f000 80a1 	beq.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8001f06:	491f      	ldr	r1, [pc, #124]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f08:	688a      	ldr	r2, [r1, #8]
 8001f0a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f0e:	608a      	str	r2, [r1, #8]
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f12:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	e70c      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
      plli2sused = 1U;
 8001f20:	2601      	movs	r6, #1
 8001f22:	e707      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f24:	1d20      	adds	r0, r4, #4
 8001f26:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f2e:	6961      	ldr	r1, [r4, #20]
 8001f30:	4303      	orrs	r3, r0
 8001f32:	0852      	lsrs	r2, r2, #1
 8001f34:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001f38:	3a01      	subs	r2, #1
 8001f3a:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001f44:	e78a      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f46:	490f      	ldr	r1, [pc, #60]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001f48:	6860      	ldr	r0, [r4, #4]
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f4a:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f4e:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001f52:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001f56:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001f5a:	4332      	orrs	r2, r6
 8001f5c:	68a6      	ldr	r6, [r4, #8]
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	6920      	ldr	r0, [r4, #16]
 8001f62:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
 8001f66:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001f6a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f6e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001f72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f74:	f020 001f 	bic.w	r0, r0, #31
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8001f80:	e763      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	424711e0 	.word	0x424711e0
 8001f8c:	42470068 	.word	0x42470068
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42470e40 	.word	0x42470e40
    __HAL_RCC_PLLSAI_DISABLE();
 8001f98:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f9a:	4e4a      	ldr	r6, [pc, #296]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fd24 	bl	80019ec <HAL_GetTick>
 8001fa4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fa8:	f7ff fd20 	bl	80019ec <HAL_GetTick>
 8001fac:	1b40      	subs	r0, r0, r5
 8001fae:	2802      	cmp	r0, #2
 8001fb0:	f63f af63 	bhi.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fb4:	6833      	ldr	r3, [r6, #0]
 8001fb6:	009f      	lsls	r7, r3, #2
 8001fb8:	d4f6      	bmi.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	0750      	lsls	r0, r2, #29
 8001fbe:	d579      	bpl.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001fc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d176      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001fc6:	493f      	ldr	r1, [pc, #252]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001fc8:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001fca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001fce:	69e5      	ldr	r5, [r4, #28]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001fd8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001fdc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fe4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001fe8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001fea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001fee:	3801      	subs	r0, #1
 8001ff0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001ff8:	05d2      	lsls	r2, r2, #23
 8001ffa:	d514      	bpl.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002002:	d110      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x386>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002004:	492f      	ldr	r1, [pc, #188]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002006:	69a5      	ldr	r5, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002008:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800200c:	e9d4 0207 	ldrd	r0, r2, [r4, #28]
 8002010:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002014:	432b      	orrs	r3, r5
 8002016:	0852      	lsrs	r2, r2, #1
 8002018:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800201c:	3a01      	subs	r2, #1
 800201e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002028:	4d26      	ldr	r5, [pc, #152]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
    __HAL_RCC_PLLSAI_ENABLE();
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800202e:	f7ff fcdd 	bl	80019ec <HAL_GetTick>
 8002032:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	f53f aecc 	bmi.w	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800203c:	f7ff fcd6 	bl	80019ec <HAL_GetTick>
 8002040:	1b00      	subs	r0, r0, r4
 8002042:	2802      	cmp	r0, #2
 8002044:	d9f6      	bls.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8002046:	e718      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002048:	481e      	ldr	r0, [pc, #120]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800204a:	6882      	ldr	r2, [r0, #8]
 800204c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002050:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002054:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002058:	430a      	orrs	r2, r1
 800205a:	6082      	str	r2, [r0, #8]
 800205c:	e758      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x270>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800205e:	4f19      	ldr	r7, [pc, #100]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002060:	6866      	ldr	r6, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002062:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002066:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800206a:	68e1      	ldr	r1, [r4, #12]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800206c:	f3c0 4c01 	ubfx	ip, r0, #16, #2
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002070:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002074:	68a0      	ldr	r0, [r4, #8]
 8002076:	4332      	orrs	r2, r6
 8002078:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800207c:	f10c 0601 	add.w	r6, ip, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002080:	0849      	lsrs	r1, r1, #1
 8002082:	ea42 6246 	orr.w	r2, r2, r6, lsl #25
 8002086:	3901      	subs	r1, #1
 8002088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800208c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002090:	e6e2      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        tickstart = HAL_GetTick();
 8002092:	f7ff fcab 	bl	80019ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800209a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e006      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fca5 	bl	80019ec <HAL_GetTick>
 80020a2:	eba0 0008 	sub.w	r0, r0, r8
 80020a6:	4548      	cmp	r0, r9
 80020a8:	f63f aee7 	bhi.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ae:	079b      	lsls	r3, r3, #30
 80020b0:	d5f5      	bpl.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80020b2:	e721      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020b4:	0711      	lsls	r1, r2, #28
 80020b6:	d59f      	bpl.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x358>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d19c      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80020be:	e782      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80020c0:	42470070 	.word	0x42470070
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c8:	4928      	ldr	r1, [pc, #160]	; (800216c <HAL_RCC_GetSysClockFreq+0xa4>)
{
 80020ca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020cc:	688b      	ldr	r3, [r1, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d007      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1e>
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d01d      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x4e>
 80020da:	4a25      	ldr	r2, [pc, #148]	; (8002170 <HAL_RCC_GetSysClockFreq+0xa8>)
 80020dc:	4825      	ldr	r0, [pc, #148]	; (8002174 <HAL_RCC_GetSysClockFreq+0xac>)
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf08      	it	eq
 80020e2:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e8:	684b      	ldr	r3, [r1, #4]
 80020ea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f2:	d130      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	6849      	ldr	r1, [r1, #4]
 80020f6:	481f      	ldr	r0, [pc, #124]	; (8002174 <HAL_RCC_GetSysClockFreq+0xac>)
 80020f8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80020fc:	fba1 0100 	umull	r0, r1, r1, r0
 8002100:	f7fe fd72 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800210c:	3301      	adds	r3, #1
 800210e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002110:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002114:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002116:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002118:	684b      	ldr	r3, [r1, #4]
 800211a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800211e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002122:	d10e      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002124:	6849      	ldr	r1, [r1, #4]
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <HAL_RCC_GetSysClockFreq+0xac>)
 8002128:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800212c:	fba1 0100 	umull	r0, r1, r1, r0
 8002130:	f7fe fd5a 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 800213c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002140:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	684b      	ldr	r3, [r1, #4]
 8002144:	480a      	ldr	r0, [pc, #40]	; (8002170 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002146:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800214a:	fba3 0100 	umull	r0, r1, r3, r0
 800214e:	2300      	movs	r3, #0
 8002150:	f7fe fd4a 	bl	8000be8 <__aeabi_uldivmod>
 8002154:	e7ee      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002156:	684b      	ldr	r3, [r1, #4]
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_RCC_GetSysClockFreq+0xa8>)
 800215a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800215e:	fba3 0100 	umull	r0, r1, r3, r0
 8002162:	2300      	movs	r3, #0
 8002164:	f7fe fd40 	bl	8000be8 <__aeabi_uldivmod>
 8002168:	e7cc      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x3c>
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	007a1200 	.word	0x007a1200
 8002174:	00f42400 	.word	0x00f42400

08002178 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002178:	2800      	cmp	r0, #0
 800217a:	f000 81b5 	beq.w	80024e8 <HAL_RCC_OscConfig+0x370>
{
 800217e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	6803      	ldr	r3, [r0, #0]
 8002184:	07da      	lsls	r2, r3, #31
{
 8002186:	b082      	sub	sp, #8
 8002188:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	d536      	bpl.n	80021fa <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800218c:	49ad      	ldr	r1, [pc, #692]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 800218e:	688a      	ldr	r2, [r1, #8]
 8002190:	f002 020c 	and.w	r2, r2, #12
 8002194:	2a04      	cmp	r2, #4
 8002196:	f000 80df 	beq.w	8002358 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800219a:	688a      	ldr	r2, [r1, #8]
 800219c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021a0:	2a08      	cmp	r2, #8
 80021a2:	f000 80d5 	beq.w	8002350 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	49a7      	ldr	r1, [pc, #668]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 80021a8:	688a      	ldr	r2, [r1, #8]
 80021aa:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ae:	2a0c      	cmp	r2, #12
 80021b0:	f000 8104 	beq.w	80023bc <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ba:	f000 8118 	beq.w	80023ee <HAL_RCC_OscConfig+0x276>
 80021be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c2:	f000 8198 	beq.w	80024f6 <HAL_RCC_OscConfig+0x37e>
 80021c6:	4d9f      	ldr	r5, [pc, #636]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 80021c8:	682a      	ldr	r2, [r5, #0]
 80021ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ce:	602a      	str	r2, [r5, #0]
 80021d0:	682a      	ldr	r2, [r5, #0]
 80021d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d6:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 810d 	bne.w	80023f8 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff fc05 	bl	80019ec <HAL_GetTick>
 80021e2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e4:	e005      	b.n	80021f2 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e6:	f7ff fc01 	bl	80019ec <HAL_GetTick>
 80021ea:	1b80      	subs	r0, r0, r6
 80021ec:	2864      	cmp	r0, #100	; 0x64
 80021ee:	f200 80fa 	bhi.w	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	682b      	ldr	r3, [r5, #0]
 80021f4:	0399      	lsls	r1, r3, #14
 80021f6:	d4f6      	bmi.n	80021e6 <HAL_RCC_OscConfig+0x6e>
 80021f8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	079a      	lsls	r2, r3, #30
 80021fc:	d52f      	bpl.n	800225e <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021fe:	4a91      	ldr	r2, [pc, #580]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 8002200:	6891      	ldr	r1, [r2, #8]
 8002202:	f011 0f0c 	tst.w	r1, #12
 8002206:	f000 8098 	beq.w	800233a <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800220a:	6891      	ldr	r1, [r2, #8]
 800220c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002210:	2908      	cmp	r1, #8
 8002212:	f000 808e 	beq.w	8002332 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	498b      	ldr	r1, [pc, #556]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 8002218:	688a      	ldr	r2, [r1, #8]
 800221a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800221e:	2a0c      	cmp	r2, #12
 8002220:	f000 8164 	beq.w	80024ec <HAL_RCC_OscConfig+0x374>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002224:	68e3      	ldr	r3, [r4, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8116 	beq.w	8002458 <HAL_RCC_OscConfig+0x2e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b86      	ldr	r3, [pc, #536]	; (8002448 <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	4e85      	ldr	r6, [pc, #532]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002234:	f7ff fbda 	bl	80019ec <HAL_GetTick>
 8002238:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	e005      	b.n	8002248 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223c:	f7ff fbd6 	bl	80019ec <HAL_GetTick>
 8002240:	1b40      	subs	r0, r0, r5
 8002242:	2802      	cmp	r0, #2
 8002244:	f200 80cf 	bhi.w	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	6833      	ldr	r3, [r6, #0]
 800224a:	0798      	lsls	r0, r3, #30
 800224c:	d5f6      	bpl.n	800223c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	6922      	ldr	r2, [r4, #16]
 8002252:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002256:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800225a:	6033      	str	r3, [r6, #0]
 800225c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	071a      	lsls	r2, r3, #28
 8002260:	d452      	bmi.n	8002308 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002262:	0758      	lsls	r0, r3, #29
 8002264:	d530      	bpl.n	80022c8 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 8002268:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800226a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800226e:	f000 8099 	beq.w	80023a4 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4e75      	ldr	r6, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x2d4>)
 8002276:	6833      	ldr	r3, [r6, #0]
 8002278:	05d9      	lsls	r1, r3, #23
 800227a:	f140 80a4 	bpl.w	80023c6 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	68a3      	ldr	r3, [r4, #8]
 8002280:	2b01      	cmp	r3, #1
 8002282:	f000 80c7 	beq.w	8002414 <HAL_RCC_OscConfig+0x29c>
 8002286:	2b05      	cmp	r3, #5
 8002288:	f000 813f 	beq.w	800250a <HAL_RCC_OscConfig+0x392>
 800228c:	4e6d      	ldr	r6, [pc, #436]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 800228e:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	6732      	str	r2, [r6, #112]	; 0x70
 8002296:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002298:	f022 0204 	bic.w	r2, r2, #4
 800229c:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 80bd 	bne.w	800241e <HAL_RCC_OscConfig+0x2a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff fba2 	bl	80019ec <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022ac:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ae:	e005      	b.n	80022bc <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7ff fb9c 	bl	80019ec <HAL_GetTick>
 80022b4:	1bc0      	subs	r0, r0, r7
 80022b6:	4540      	cmp	r0, r8
 80022b8:	f200 8095 	bhi.w	80023e6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80022be:	0798      	lsls	r0, r3, #30
 80022c0:	d4f6      	bmi.n	80022b0 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	f040 810a 	bne.w	80024dc <HAL_RCC_OscConfig+0x364>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c8:	69a0      	ldr	r0, [r4, #24]
 80022ca:	b1c8      	cbz	r0, 8002300 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022cc:	4d5d      	ldr	r5, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 80022ce:	68ab      	ldr	r3, [r5, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	f000 80d0 	beq.w	800247a <HAL_RCC_OscConfig+0x302>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_RCC_OscConfig+0x2d8>)
 80022dc:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80022e0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e2:	f000 811c 	beq.w	800251e <HAL_RCC_OscConfig+0x3a6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7ff fb81 	bl	80019ec <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80022ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e004      	b.n	80022fa <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fb7c 	bl	80019ec <HAL_GetTick>
 80022f4:	1b40      	subs	r0, r0, r5
 80022f6:	2802      	cmp	r0, #2
 80022f8:	d875      	bhi.n	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	d4f7      	bmi.n	80022f0 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002300:	2000      	movs	r0, #0
}
 8002302:	b002      	add	sp, #8
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002308:	6963      	ldr	r3, [r4, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02e      	beq.n	800236c <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002310:	4e4c      	ldr	r6, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002316:	f7ff fb69 	bl	80019ec <HAL_GetTick>
 800231a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231c:	e004      	b.n	8002328 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231e:	f7ff fb65 	bl	80019ec <HAL_GetTick>
 8002322:	1b40      	subs	r0, r0, r5
 8002324:	2802      	cmp	r0, #2
 8002326:	d85e      	bhi.n	80023e6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002328:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800232a:	079b      	lsls	r3, r3, #30
 800232c:	d5f7      	bpl.n	800231e <HAL_RCC_OscConfig+0x1a6>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	e797      	b.n	8002262 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002332:	6852      	ldr	r2, [r2, #4]
 8002334:	0257      	lsls	r7, r2, #9
 8002336:	f53f af6e 	bmi.w	8002216 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4a42      	ldr	r2, [pc, #264]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	0795      	lsls	r5, r2, #30
 8002340:	d524      	bpl.n	800238c <HAL_RCC_OscConfig+0x214>
 8002342:	68e2      	ldr	r2, [r4, #12]
 8002344:	2a01      	cmp	r2, #1
 8002346:	d021      	beq.n	800238c <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
}
 800234a:	b002      	add	sp, #8
 800234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002350:	684a      	ldr	r2, [r1, #4]
 8002352:	0257      	lsls	r7, r2, #9
 8002354:	f57f af27 	bpl.w	80021a6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4a3a      	ldr	r2, [pc, #232]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	0395      	lsls	r5, r2, #14
 800235e:	f57f af4c 	bpl.w	80021fa <HAL_RCC_OscConfig+0x82>
 8002362:	6862      	ldr	r2, [r4, #4]
 8002364:	2a00      	cmp	r2, #0
 8002366:	f47f af48 	bne.w	80021fa <HAL_RCC_OscConfig+0x82>
 800236a:	e7ed      	b.n	8002348 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 800236c:	4a39      	ldr	r2, [pc, #228]	; (8002454 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	4e35      	ldr	r6, [pc, #212]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 8002370:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002372:	f7ff fb3b 	bl	80019ec <HAL_GetTick>
 8002376:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	e004      	b.n	8002384 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237a:	f7ff fb37 	bl	80019ec <HAL_GetTick>
 800237e:	1b40      	subs	r0, r0, r5
 8002380:	2802      	cmp	r0, #2
 8002382:	d830      	bhi.n	80023e6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002386:	079f      	lsls	r7, r3, #30
 8002388:	d4f7      	bmi.n	800237a <HAL_RCC_OscConfig+0x202>
 800238a:	e7d0      	b.n	800232e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	492d      	ldr	r1, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 800238e:	6920      	ldr	r0, [r4, #16]
 8002390:	680a      	ldr	r2, [r1, #0]
 8002392:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002396:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800239a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239c:	071a      	lsls	r2, r3, #28
 800239e:	f57f af60 	bpl.w	8002262 <HAL_RCC_OscConfig+0xea>
 80023a2:	e7b1      	b.n	8002308 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023b8:	2501      	movs	r5, #1
 80023ba:	e75b      	b.n	8002274 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	684a      	ldr	r2, [r1, #4]
 80023be:	0256      	lsls	r6, r2, #9
 80023c0:	f57f aef8 	bpl.w	80021b4 <HAL_RCC_OscConfig+0x3c>
 80023c4:	e7c8      	b.n	8002358 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	6833      	ldr	r3, [r6, #0]
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023ce:	f7ff fb0d 	bl	80019ec <HAL_GetTick>
 80023d2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	6833      	ldr	r3, [r6, #0]
 80023d6:	05da      	lsls	r2, r3, #23
 80023d8:	f53f af51 	bmi.w	800227e <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7ff fb06 	bl	80019ec <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9f6      	bls.n	80023d4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80023e6:	2003      	movs	r0, #3
}
 80023e8:	b002      	add	sp, #8
 80023ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023f8:	f7ff faf8 	bl	80019ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fc:	4e11      	ldr	r6, [pc, #68]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80023fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002400:	e004      	b.n	800240c <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002402:	f7ff faf3 	bl	80019ec <HAL_GetTick>
 8002406:	1b40      	subs	r0, r0, r5
 8002408:	2864      	cmp	r0, #100	; 0x64
 800240a:	d8ec      	bhi.n	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240c:	6833      	ldr	r3, [r6, #0]
 800240e:	0398      	lsls	r0, r3, #14
 8002410:	d5f7      	bpl.n	8002402 <HAL_RCC_OscConfig+0x28a>
 8002412:	e6f1      	b.n	80021f8 <HAL_RCC_OscConfig+0x80>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
 8002416:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800241e:	f7ff fae5 	bl	80019ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002422:	4f08      	ldr	r7, [pc, #32]	; (8002444 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002424:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	e004      	b.n	8002436 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff fade 	bl	80019ec <HAL_GetTick>
 8002430:	1b80      	subs	r0, r0, r6
 8002432:	4540      	cmp	r0, r8
 8002434:	d8d7      	bhi.n	80023e6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002438:	079b      	lsls	r3, r3, #30
 800243a:	d5f7      	bpl.n	800242c <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 800243c:	2d00      	cmp	r5, #0
 800243e:	f43f af43 	beq.w	80022c8 <HAL_RCC_OscConfig+0x150>
 8002442:	e04b      	b.n	80024dc <HAL_RCC_OscConfig+0x364>
 8002444:	40023800 	.word	0x40023800
 8002448:	42470000 	.word	0x42470000
 800244c:	40007000 	.word	0x40007000
 8002450:	42470060 	.word	0x42470060
 8002454:	42470e80 	.word	0x42470e80
        __HAL_RCC_HSI_DISABLE();
 8002458:	4a49      	ldr	r2, [pc, #292]	; (8002580 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4e4a      	ldr	r6, [pc, #296]	; (8002584 <HAL_RCC_OscConfig+0x40c>)
        __HAL_RCC_HSI_DISABLE();
 800245c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800245e:	f7ff fac5 	bl	80019ec <HAL_GetTick>
 8002462:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002464:	e004      	b.n	8002470 <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fac1 	bl	80019ec <HAL_GetTick>
 800246a:	1b40      	subs	r0, r0, r5
 800246c:	2802      	cmp	r0, #2
 800246e:	d8ba      	bhi.n	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002470:	6833      	ldr	r3, [r6, #0]
 8002472:	0799      	lsls	r1, r3, #30
 8002474:	d4f7      	bmi.n	8002466 <HAL_RCC_OscConfig+0x2ee>
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	e6f1      	b.n	800225e <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247a:	2801      	cmp	r0, #1
 800247c:	f43f af41 	beq.w	8002302 <HAL_RCC_OscConfig+0x18a>
        pll_config = RCC->PLLCFGR;
 8002480:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002484:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002488:	4291      	cmp	r1, r2
 800248a:	f47f af5d 	bne.w	8002348 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002490:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002494:	4291      	cmp	r1, r2
 8002496:	f47f af57 	bne.w	8002348 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800249c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024a0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024a6:	f47f af4f 	bne.w	8002348 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
 80024b0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024b8:	f47f af46 	bne.w	8002348 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80024c6:	f47f af3f 	bne.w	8002348 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 80024d4:	bf14      	ite	ne
 80024d6:	2001      	movne	r0, #1
 80024d8:	2000      	moveq	r0, #0
 80024da:	e712      	b.n	8002302 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_RCC_OscConfig+0x40c>)
 80024de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	e6ef      	b.n	80022c8 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 80024e8:	2001      	movs	r0, #1
}
 80024ea:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ec:	684a      	ldr	r2, [r1, #4]
 80024ee:	0256      	lsls	r6, r2, #9
 80024f0:	f53f ae98 	bmi.w	8002224 <HAL_RCC_OscConfig+0xac>
 80024f4:	e721      	b.n	800233a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCC_OscConfig+0x40c>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002506:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002508:	e776      	b.n	80023f8 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_OscConfig+0x40c>)
 800250c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800250e:	f042 0204 	orr.w	r2, r2, #4
 8002512:	671a      	str	r2, [r3, #112]	; 0x70
 8002514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800251c:	e77f      	b.n	800241e <HAL_RCC_OscConfig+0x2a6>
        tickstart = HAL_GetTick();
 800251e:	f7ff fa65 	bl	80019ec <HAL_GetTick>
 8002522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002524:	e005      	b.n	8002532 <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fa61 	bl	80019ec <HAL_GetTick>
 800252a:	1b80      	subs	r0, r0, r6
 800252c:	2802      	cmp	r0, #2
 800252e:	f63f af5a 	bhi.w	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	682b      	ldr	r3, [r5, #0]
 8002534:	0199      	lsls	r1, r3, #6
 8002536:	d4f6      	bmi.n	8002526 <HAL_RCC_OscConfig+0x3ae>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002538:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800253c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800253e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002540:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002542:	4313      	orrs	r3, r2
 8002544:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002546:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800254a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800254e:	0852      	lsrs	r2, r2, #1
 8002550:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002554:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002556:	490c      	ldr	r1, [pc, #48]	; (8002588 <HAL_RCC_OscConfig+0x410>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	4e0a      	ldr	r6, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x40c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800255e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002560:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002562:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002564:	f7ff fa42 	bl	80019ec <HAL_GetTick>
 8002568:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	e005      	b.n	8002578 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff fa3e 	bl	80019ec <HAL_GetTick>
 8002570:	1b00      	subs	r0, r0, r4
 8002572:	2802      	cmp	r0, #2
 8002574:	f63f af37 	bhi.w	80023e6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002578:	6833      	ldr	r3, [r6, #0]
 800257a:	019a      	lsls	r2, r3, #6
 800257c:	d5f6      	bpl.n	800256c <HAL_RCC_OscConfig+0x3f4>
 800257e:	e6bf      	b.n	8002300 <HAL_RCC_OscConfig+0x188>
 8002580:	42470000 	.word	0x42470000
 8002584:	40023800 	.word	0x40023800
 8002588:	42470060 	.word	0x42470060

0800258c <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800258c:	2800      	cmp	r0, #0
 800258e:	d068      	beq.n	8002662 <HAL_RTC_Init+0xd6>
{
 8002590:	b538      	push	{r3, r4, r5, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002592:	7f43      	ldrb	r3, [r0, #29]
 8002594:	4604      	mov	r4, r0
 8002596:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800259a:	2b00      	cmp	r3, #0
 800259c:	d05d      	beq.n	800265a <HAL_RTC_Init+0xce>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025a2:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025a4:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025a6:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025a8:	6259      	str	r1, [r3, #36]	; 0x24
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	0655      	lsls	r5, r2, #25
 80025b0:	d53c      	bpl.n	800262c <HAL_RTC_Init+0xa0>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025b2:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025b4:	6862      	ldr	r2, [r4, #4]
 80025b6:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80025be:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80025c2:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	432a      	orrs	r2, r5
 80025c8:	4302      	orrs	r2, r0
 80025ca:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025cc:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025ce:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025d0:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68a1      	ldr	r1, [r4, #8]
 80025d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	0691      	lsls	r1, r2, #26
 80025e8:	d50d      	bpl.n	8002606 <HAL_RTC_Init+0x7a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80025ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025ec:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80025ee:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80025f2:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f6:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025f8:	4302      	orrs	r2, r0
    hrtc->State = HAL_RTC_STATE_READY;
 80025fa:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fe:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002600:	7761      	strb	r1, [r4, #29]
    return HAL_OK;
 8002602:	2000      	movs	r0, #0
}
 8002604:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800260c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800260e:	f7ff f9ed 	bl	80019ec <HAL_GetTick>
 8002612:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002614:	e005      	b.n	8002622 <HAL_RTC_Init+0x96>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002616:	f7ff f9e9 	bl	80019ec <HAL_GetTick>
 800261a:	1b43      	subs	r3, r0, r5
 800261c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002620:	d814      	bhi.n	800264c <HAL_RTC_Init+0xc0>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	0692      	lsls	r2, r2, #26
 8002628:	d5f5      	bpl.n	8002616 <HAL_RTC_Init+0x8a>
 800262a:	e7de      	b.n	80025ea <HAL_RTC_Init+0x5e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800262c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002630:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002632:	f7ff f9db 	bl	80019ec <HAL_GetTick>
 8002636:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	0650      	lsls	r0, r2, #25
 800263e:	d4b8      	bmi.n	80025b2 <HAL_RTC_Init+0x26>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002640:	f7ff f9d4 	bl	80019ec <HAL_GetTick>
 8002644:	1b43      	subs	r3, r0, r5
 8002646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264a:	d9f5      	bls.n	8002638 <HAL_RTC_Init+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002650:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002652:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002654:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800265a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800265c:	f7ff f8c4 	bl	80017e8 <HAL_RTC_MspInit>
 8002660:	e79d      	b.n	800259e <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 8002662:	2001      	movs	r0, #1
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <HAL_RTC_SetTime>:
{
 8002668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 800266c:	7f03      	ldrb	r3, [r0, #28]
 800266e:	2b01      	cmp	r3, #1
 8002670:	f000 80af 	beq.w	80027d2 <HAL_RTC_SetTime+0x16a>
 8002674:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002676:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002678:	2101      	movs	r1, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800267a:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hrtc);
 800267c:	7701      	strb	r1, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800267e:	4606      	mov	r6, r0
 8002680:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002682:	2a00      	cmp	r2, #0
 8002684:	d047      	beq.n	8002716 <HAL_RTC_SetTime+0xae>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002686:	68bb      	ldr	r3, [r7, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002688:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)sTime->Seconds) | \
 800268a:	78aa      	ldrb	r2, [r5, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800268c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002690:	bf16      	itet	ne
 8002692:	78ec      	ldrbne	r4, [r5, #3]
      sTime->TimeFormat = 0x00U;
 8002694:	70eb      	strbeq	r3, [r5, #3]
 8002696:	0423      	lslne	r3, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002698:	786c      	ldrb	r4, [r5, #1]
 800269a:	0224      	lsls	r4, r4, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800269c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80026a0:	4314      	orrs	r4, r2
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80026a2:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a4:	22ca      	movs	r2, #202	; 0xca
 80026a6:	2353      	movs	r3, #83	; 0x53
 80026a8:	627a      	str	r2, [r7, #36]	; 0x24
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	065a      	lsls	r2, r3, #25
 80026b0:	d56a      	bpl.n	8002788 <HAL_RTC_SetTime+0x120>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80026b2:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80026b6:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80026ba:	603c      	str	r4, [r7, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80026bc:	68ba      	ldr	r2, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026be:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80026c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c6:	60ba      	str	r2, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	430b      	orrs	r3, r1
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d6:	60fb      	str	r3, [r7, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	d412      	bmi.n	8002704 <HAL_RTC_SetTime+0x9c>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026e4:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 80026e6:	f7ff f981 	bl	80019ec <HAL_GetTick>
 80026ea:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026ec:	e005      	b.n	80026fa <HAL_RTC_SetTime+0x92>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026ee:	f7ff f97d 	bl	80019ec <HAL_GetTick>
 80026f2:	1b40      	subs	r0, r0, r5
 80026f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80026f8:	d862      	bhi.n	80027c0 <HAL_RTC_SetTime+0x158>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026fa:	6837      	ldr	r7, [r6, #0]
 80026fc:	68fc      	ldr	r4, [r7, #12]
 80026fe:	f014 0420 	ands.w	r4, r4, #32
 8002702:	d0f4      	beq.n	80026ee <HAL_RTC_SetTime+0x86>
   __HAL_UNLOCK(hrtc);
 8002704:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002706:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002708:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800270a:	6279      	str	r1, [r7, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800270c:	7772      	strb	r2, [r6, #29]
   __HAL_UNLOCK(hrtc);
 800270e:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8002710:	4618      	mov	r0, r3
}
 8002712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002716:	68bc      	ldr	r4, [r7, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002718:	782b      	ldrb	r3, [r5, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800271a:	f014 0c40 	ands.w	ip, r4, #64	; 0x40
 800271e:	bf16      	itet	ne
 8002720:	78ec      	ldrbne	r4, [r5, #3]
      sTime->TimeFormat = 0x00U;
 8002722:	f885 c003 	strbeq.w	ip, [r5, #3]
 8002726:	ea4f 4c04 	movne.w	ip, r4, lsl #16
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;

  while(Value >= 10U)
 800272a:	2b09      	cmp	r3, #9
 800272c:	d909      	bls.n	8002742 <HAL_RTC_SetTime+0xda>
  uint32_t bcdhigh = 0U;
 800272e:	2100      	movs	r1, #0
  {
    bcdhigh++;
    Value -= 10U;
 8002730:	3b0a      	subs	r3, #10
 8002732:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002734:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002736:	f101 0101 	add.w	r1, r1, #1
  while(Value >= 10U)
 800273a:	d8f9      	bhi.n	8002730 <HAL_RTC_SetTime+0xc8>
 800273c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002740:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002742:	7869      	ldrb	r1, [r5, #1]
  while(Value >= 10U)
 8002744:	2909      	cmp	r1, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002746:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 800274a:	d909      	bls.n	8002760 <HAL_RTC_SetTime+0xf8>
  uint32_t bcdhigh = 0U;
 800274c:	2400      	movs	r4, #0
    Value -= 10U;
 800274e:	390a      	subs	r1, #10
 8002750:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8002752:	2909      	cmp	r1, #9
    bcdhigh++;
 8002754:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8002758:	d8f9      	bhi.n	800274e <HAL_RTC_SetTime+0xe6>
 800275a:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 800275e:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002760:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10U)
 8002762:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002764:	ea4f 2101 	mov.w	r1, r1, lsl #8
  while(Value >= 10U)
 8002768:	d909      	bls.n	800277e <HAL_RTC_SetTime+0x116>
    Value -= 10U;
 800276a:	f1a0 040a 	sub.w	r4, r0, #10
 800276e:	b2e0      	uxtb	r0, r4
  while(Value >= 10U)
 8002770:	2809      	cmp	r0, #9
    bcdhigh++;
 8002772:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002776:	d8f8      	bhi.n	800276a <HAL_RTC_SetTime+0x102>
 8002778:	ea40 1402 	orr.w	r4, r0, r2, lsl #4
 800277c:	b2e0      	uxtb	r0, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800277e:	ea43 040c 	orr.w	r4, r3, ip
 8002782:	430c      	orrs	r4, r1
 8002784:	4304      	orrs	r4, r0
 8002786:	e78d      	b.n	80026a4 <HAL_RTC_SetTime+0x3c>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278c:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 800278e:	f7ff f92d 	bl	80019ec <HAL_GetTick>
 8002792:	4680      	mov	r8, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002794:	6837      	ldr	r7, [r6, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f013 0940 	ands.w	r9, r3, #64	; 0x40
 800279c:	d189      	bne.n	80026b2 <HAL_RTC_SetTime+0x4a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800279e:	f7ff f925 	bl	80019ec <HAL_GetTick>
 80027a2:	eba0 0008 	sub.w	r0, r0, r8
 80027a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80027aa:	d9f3      	bls.n	8002794 <HAL_RTC_SetTime+0x12c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ac:	6832      	ldr	r2, [r6, #0]
 80027ae:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027b0:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027b2:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 80027b4:	f886 901c 	strb.w	r9, [r6, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027b8:	7773      	strb	r3, [r6, #29]
    return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
}
 80027bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c0:	6832      	ldr	r2, [r6, #0]
 80027c2:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027c4:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c6:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80027c8:	7734      	strb	r4, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027ca:	7773      	strb	r3, [r6, #29]
        return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 80027d2:	2002      	movs	r0, #2
}
 80027d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080027d8 <HAL_RTC_SetDate>:
{
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80027da:	7f03      	ldrb	r3, [r0, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	f000 809e 	beq.w	800291e <HAL_RTC_SetDate+0x146>
 80027e2:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027e4:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 80027e6:	2001      	movs	r0, #1
 80027e8:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ea:	776b      	strb	r3, [r5, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d038      	beq.n	8002862 <HAL_RTC_SetDate+0x8a>
                  (((uint32_t)sDate->Month) << 8U) | \
 80027f0:	784c      	ldrb	r4, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027f2:	78c8      	ldrb	r0, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 80027f4:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 80027f6:	780b      	ldrb	r3, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 80027f8:	0224      	lsls	r4, r4, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027fa:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80027fe:	4314      	orrs	r4, r2
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002800:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002804:	682a      	ldr	r2, [r5, #0]
 8002806:	21ca      	movs	r1, #202	; 0xca
 8002808:	2353      	movs	r3, #83	; 0x53
 800280a:	6251      	str	r1, [r2, #36]	; 0x24
 800280c:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800280e:	68d3      	ldr	r3, [r2, #12]
 8002810:	0659      	lsls	r1, r3, #25
 8002812:	d55f      	bpl.n	80028d4 <HAL_RTC_SetDate+0xfc>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002814:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002818:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800281c:	6054      	str	r4, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800281e:	68d3      	ldr	r3, [r2, #12]
 8002820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002824:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002826:	6893      	ldr	r3, [r2, #8]
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	d412      	bmi.n	8002852 <HAL_RTC_SetDate+0x7a>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800282c:	68d3      	ldr	r3, [r2, #12]
 800282e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002832:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8002834:	f7ff f8da 	bl	80019ec <HAL_GetTick>
 8002838:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800283a:	e005      	b.n	8002848 <HAL_RTC_SetDate+0x70>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800283c:	f7ff f8d6 	bl	80019ec <HAL_GetTick>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002846:	d862      	bhi.n	800290e <HAL_RTC_SetDate+0x136>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002848:	682a      	ldr	r2, [r5, #0]
 800284a:	68d4      	ldr	r4, [r2, #12]
 800284c:	f014 0420 	ands.w	r4, r4, #32
 8002850:	d0f4      	beq.n	800283c <HAL_RTC_SetDate+0x64>
    __HAL_UNLOCK(hrtc);
 8002852:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002854:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8002856:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002858:	6250      	str	r0, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800285a:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800285c:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 800285e:	4618      	mov	r0, r3
}
 8002860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002862:	784b      	ldrb	r3, [r1, #1]
 8002864:	06d8      	lsls	r0, r3, #27
 8002866:	d54e      	bpl.n	8002906 <HAL_RTC_SetDate+0x12e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002868:	78cc      	ldrb	r4, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800286a:	f023 0310 	bic.w	r3, r3, #16
 800286e:	330a      	adds	r3, #10
 8002870:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002872:	2c09      	cmp	r4, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002874:	704b      	strb	r3, [r1, #1]
  while(Value >= 10U)
 8002876:	d954      	bls.n	8002922 <HAL_RTC_SetDate+0x14a>
  uint32_t bcdhigh = 0U;
 8002878:	2000      	movs	r0, #0
    Value -= 10U;
 800287a:	3c0a      	subs	r4, #10
 800287c:	b2e4      	uxtb	r4, r4
  while(Value >= 10U)
 800287e:	2c09      	cmp	r4, #9
    bcdhigh++;
 8002880:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002884:	d8f9      	bhi.n	800287a <HAL_RTC_SetDate+0xa2>
 8002886:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
 800288a:	b2e4      	uxtb	r4, r4
 800288c:	2b09      	cmp	r3, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800288e:	ea4f 4004 	mov.w	r0, r4, lsl #16
  while(Value >= 10U)
 8002892:	d909      	bls.n	80028a8 <HAL_RTC_SetDate+0xd0>
  uint32_t bcdhigh = 0U;
 8002894:	2400      	movs	r4, #0
    Value -= 10U;
 8002896:	3b0a      	subs	r3, #10
 8002898:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 800289a:	2b09      	cmp	r3, #9
    bcdhigh++;
 800289c:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 80028a0:	d8f9      	bhi.n	8002896 <HAL_RTC_SetDate+0xbe>
 80028a2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80028a6:	b2db      	uxtb	r3, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80028a8:	788e      	ldrb	r6, [r1, #2]
  while(Value >= 10U)
 80028aa:	2e09      	cmp	r6, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80028ac:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 80028b0:	d909      	bls.n	80028c6 <HAL_RTC_SetDate+0xee>
    Value -= 10U;
 80028b2:	f1a6 040a 	sub.w	r4, r6, #10
 80028b6:	b2e6      	uxtb	r6, r4
  while(Value >= 10U)
 80028b8:	2e09      	cmp	r6, #9
    bcdhigh++;
 80028ba:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 80028be:	d8f8      	bhi.n	80028b2 <HAL_RTC_SetDate+0xda>
 80028c0:	ea46 1402 	orr.w	r4, r6, r2, lsl #4
 80028c4:	b2e6      	uxtb	r6, r4
                 ((uint32_t)sDate->WeekDay << 13U));
 80028c6:	780c      	ldrb	r4, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80028c8:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 80028cc:	4323      	orrs	r3, r4
 80028ce:	ea43 0406 	orr.w	r4, r3, r6
 80028d2:	e797      	b.n	8002804 <HAL_RTC_SetDate+0x2c>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80028da:	f7ff f887 	bl	80019ec <HAL_GetTick>
 80028de:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80028e0:	682a      	ldr	r2, [r5, #0]
 80028e2:	68d6      	ldr	r6, [r2, #12]
 80028e4:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80028e8:	d194      	bne.n	8002814 <HAL_RTC_SetDate+0x3c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80028ea:	f7ff f87f 	bl	80019ec <HAL_GetTick>
 80028ee:	1bc0      	subs	r0, r0, r7
 80028f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80028f4:	d9f4      	bls.n	80028e0 <HAL_RTC_SetDate+0x108>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f6:	682a      	ldr	r2, [r5, #0]
 80028f8:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028fa:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028fc:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 80028fe:	772e      	strb	r6, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002900:	776b      	strb	r3, [r5, #29]
    return HAL_ERROR;
 8002902:	2001      	movs	r0, #1
}
 8002904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002906:	78cc      	ldrb	r4, [r1, #3]
  while(Value >= 10U)
 8002908:	2c09      	cmp	r4, #9
 800290a:	d8b5      	bhi.n	8002878 <HAL_RTC_SetDate+0xa0>
 800290c:	e7be      	b.n	800288c <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800290e:	682a      	ldr	r2, [r5, #0]
 8002910:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002912:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002914:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002916:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002918:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 800291a:	2001      	movs	r0, #1
}
 800291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 800291e:	2002      	movs	r0, #2
}
 8002920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002922:	0420      	lsls	r0, r4, #16
  while(Value >= 10U)
 8002924:	e7b6      	b.n	8002894 <HAL_RTC_SetDate+0xbc>
 8002926:	bf00      	nop

08002928 <calloc>:
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <calloc+0xc>)
 800292a:	460a      	mov	r2, r1
 800292c:	4601      	mov	r1, r0
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	f000 b866 	b.w	8002a00 <_calloc_r>
 8002934:	2000000c 	.word	0x2000000c

08002938 <__errno>:
 8002938:	4b01      	ldr	r3, [pc, #4]	; (8002940 <__errno+0x8>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	2000000c 	.word	0x2000000c

08002944 <exit>:
 8002944:	b508      	push	{r3, lr}
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <exit+0x20>)
 8002948:	4604      	mov	r4, r0
 800294a:	b113      	cbz	r3, 8002952 <exit+0xe>
 800294c:	2100      	movs	r1, #0
 800294e:	f3af 8000 	nop.w
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <exit+0x24>)
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002958:	b103      	cbz	r3, 800295c <exit+0x18>
 800295a:	4798      	blx	r3
 800295c:	4620      	mov	r0, r4
 800295e:	f7fe ff83 	bl	8001868 <_exit>
 8002962:	bf00      	nop
 8002964:	00000000 	.word	0x00000000
 8002968:	08006394 	.word	0x08006394

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	4d0d      	ldr	r5, [pc, #52]	; (80029a4 <__libc_init_array+0x38>)
 8002970:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002972:	1b64      	subs	r4, r4, r5
 8002974:	10a4      	asrs	r4, r4, #2
 8002976:	2600      	movs	r6, #0
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	4d0b      	ldr	r5, [pc, #44]	; (80029ac <__libc_init_array+0x40>)
 800297e:	4c0c      	ldr	r4, [pc, #48]	; (80029b0 <__libc_init_array+0x44>)
 8002980:	f002 fd88 	bl	8005494 <_init>
 8002984:	1b64      	subs	r4, r4, r5
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	2600      	movs	r6, #0
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	0800677c 	.word	0x0800677c
 80029a8:	0800677c 	.word	0x0800677c
 80029ac:	0800677c 	.word	0x0800677c
 80029b0:	08006780 	.word	0x08006780

080029b4 <malloc>:
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <malloc+0xc>)
 80029b6:	4601      	mov	r1, r0
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	f000 b881 	b.w	8002ac0 <_malloc_r>
 80029be:	bf00      	nop
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <free>:
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <free+0xc>)
 80029c6:	4601      	mov	r1, r0
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f000 b829 	b.w	8002a20 <_free_r>
 80029ce:	bf00      	nop
 80029d0:	2000000c 	.word	0x2000000c

080029d4 <memcpy>:
 80029d4:	440a      	add	r2, r1
 80029d6:	4291      	cmp	r1, r2
 80029d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80029dc:	d100      	bne.n	80029e0 <memcpy+0xc>
 80029de:	4770      	bx	lr
 80029e0:	b510      	push	{r4, lr}
 80029e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029ea:	4291      	cmp	r1, r2
 80029ec:	d1f9      	bne.n	80029e2 <memcpy+0xe>
 80029ee:	bd10      	pop	{r4, pc}

080029f0 <memset>:
 80029f0:	4402      	add	r2, r0
 80029f2:	4603      	mov	r3, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <_calloc_r>:
 8002a00:	b513      	push	{r0, r1, r4, lr}
 8002a02:	434a      	muls	r2, r1
 8002a04:	4611      	mov	r1, r2
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	f000 f85a 	bl	8002ac0 <_malloc_r>
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	b118      	cbz	r0, 8002a18 <_calloc_r+0x18>
 8002a10:	9a01      	ldr	r2, [sp, #4]
 8002a12:	2100      	movs	r1, #0
 8002a14:	f7ff ffec 	bl	80029f0 <memset>
 8002a18:	4620      	mov	r0, r4
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd10      	pop	{r4, pc}
	...

08002a20 <_free_r>:
 8002a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a22:	2900      	cmp	r1, #0
 8002a24:	d048      	beq.n	8002ab8 <_free_r+0x98>
 8002a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a2a:	9001      	str	r0, [sp, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a32:	bfb8      	it	lt
 8002a34:	18e4      	addlt	r4, r4, r3
 8002a36:	f001 ff03 	bl	8004840 <__malloc_lock>
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <_free_r+0x9c>)
 8002a3c:	9801      	ldr	r0, [sp, #4]
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	4615      	mov	r5, r2
 8002a42:	b933      	cbnz	r3, 8002a52 <_free_r+0x32>
 8002a44:	6063      	str	r3, [r4, #4]
 8002a46:	6014      	str	r4, [r2, #0]
 8002a48:	b003      	add	sp, #12
 8002a4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a4e:	f001 befd 	b.w	800484c <__malloc_unlock>
 8002a52:	42a3      	cmp	r3, r4
 8002a54:	d90b      	bls.n	8002a6e <_free_r+0x4e>
 8002a56:	6821      	ldr	r1, [r4, #0]
 8002a58:	1862      	adds	r2, r4, r1
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	bf04      	itt	eq
 8002a5e:	681a      	ldreq	r2, [r3, #0]
 8002a60:	685b      	ldreq	r3, [r3, #4]
 8002a62:	6063      	str	r3, [r4, #4]
 8002a64:	bf04      	itt	eq
 8002a66:	1852      	addeq	r2, r2, r1
 8002a68:	6022      	streq	r2, [r4, #0]
 8002a6a:	602c      	str	r4, [r5, #0]
 8002a6c:	e7ec      	b.n	8002a48 <_free_r+0x28>
 8002a6e:	461a      	mov	r2, r3
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b10b      	cbz	r3, 8002a78 <_free_r+0x58>
 8002a74:	42a3      	cmp	r3, r4
 8002a76:	d9fa      	bls.n	8002a6e <_free_r+0x4e>
 8002a78:	6811      	ldr	r1, [r2, #0]
 8002a7a:	1855      	adds	r5, r2, r1
 8002a7c:	42a5      	cmp	r5, r4
 8002a7e:	d10b      	bne.n	8002a98 <_free_r+0x78>
 8002a80:	6824      	ldr	r4, [r4, #0]
 8002a82:	4421      	add	r1, r4
 8002a84:	1854      	adds	r4, r2, r1
 8002a86:	42a3      	cmp	r3, r4
 8002a88:	6011      	str	r1, [r2, #0]
 8002a8a:	d1dd      	bne.n	8002a48 <_free_r+0x28>
 8002a8c:	681c      	ldr	r4, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	6053      	str	r3, [r2, #4]
 8002a92:	4421      	add	r1, r4
 8002a94:	6011      	str	r1, [r2, #0]
 8002a96:	e7d7      	b.n	8002a48 <_free_r+0x28>
 8002a98:	d902      	bls.n	8002aa0 <_free_r+0x80>
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	6003      	str	r3, [r0, #0]
 8002a9e:	e7d3      	b.n	8002a48 <_free_r+0x28>
 8002aa0:	6825      	ldr	r5, [r4, #0]
 8002aa2:	1961      	adds	r1, r4, r5
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	bf04      	itt	eq
 8002aa8:	6819      	ldreq	r1, [r3, #0]
 8002aaa:	685b      	ldreq	r3, [r3, #4]
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	bf04      	itt	eq
 8002ab0:	1949      	addeq	r1, r1, r5
 8002ab2:	6021      	streq	r1, [r4, #0]
 8002ab4:	6054      	str	r4, [r2, #4]
 8002ab6:	e7c7      	b.n	8002a48 <_free_r+0x28>
 8002ab8:	b003      	add	sp, #12
 8002aba:	bd30      	pop	{r4, r5, pc}
 8002abc:	200001fc 	.word	0x200001fc

08002ac0 <_malloc_r>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	1ccd      	adds	r5, r1, #3
 8002ac4:	f025 0503 	bic.w	r5, r5, #3
 8002ac8:	3508      	adds	r5, #8
 8002aca:	2d0c      	cmp	r5, #12
 8002acc:	bf38      	it	cc
 8002ace:	250c      	movcc	r5, #12
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	db01      	blt.n	8002ada <_malloc_r+0x1a>
 8002ad6:	42a9      	cmp	r1, r5
 8002ad8:	d903      	bls.n	8002ae2 <_malloc_r+0x22>
 8002ada:	230c      	movs	r3, #12
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	2000      	movs	r0, #0
 8002ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae2:	f001 fead 	bl	8004840 <__malloc_lock>
 8002ae6:	4921      	ldr	r1, [pc, #132]	; (8002b6c <_malloc_r+0xac>)
 8002ae8:	680a      	ldr	r2, [r1, #0]
 8002aea:	4614      	mov	r4, r2
 8002aec:	b99c      	cbnz	r4, 8002b16 <_malloc_r+0x56>
 8002aee:	4f20      	ldr	r7, [pc, #128]	; (8002b70 <_malloc_r+0xb0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b923      	cbnz	r3, 8002afe <_malloc_r+0x3e>
 8002af4:	4621      	mov	r1, r4
 8002af6:	4630      	mov	r0, r6
 8002af8:	f000 fd34 	bl	8003564 <_sbrk_r>
 8002afc:	6038      	str	r0, [r7, #0]
 8002afe:	4629      	mov	r1, r5
 8002b00:	4630      	mov	r0, r6
 8002b02:	f000 fd2f 	bl	8003564 <_sbrk_r>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	d123      	bne.n	8002b52 <_malloc_r+0x92>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	6033      	str	r3, [r6, #0]
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f001 fe9c 	bl	800484c <__malloc_unlock>
 8002b14:	e7e3      	b.n	8002ade <_malloc_r+0x1e>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	1b5b      	subs	r3, r3, r5
 8002b1a:	d417      	bmi.n	8002b4c <_malloc_r+0x8c>
 8002b1c:	2b0b      	cmp	r3, #11
 8002b1e:	d903      	bls.n	8002b28 <_malloc_r+0x68>
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	441c      	add	r4, r3
 8002b24:	6025      	str	r5, [r4, #0]
 8002b26:	e004      	b.n	8002b32 <_malloc_r+0x72>
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	42a2      	cmp	r2, r4
 8002b2c:	bf0c      	ite	eq
 8002b2e:	600b      	streq	r3, [r1, #0]
 8002b30:	6053      	strne	r3, [r2, #4]
 8002b32:	4630      	mov	r0, r6
 8002b34:	f001 fe8a 	bl	800484c <__malloc_unlock>
 8002b38:	f104 000b 	add.w	r0, r4, #11
 8002b3c:	1d23      	adds	r3, r4, #4
 8002b3e:	f020 0007 	bic.w	r0, r0, #7
 8002b42:	1ac2      	subs	r2, r0, r3
 8002b44:	d0cc      	beq.n	8002ae0 <_malloc_r+0x20>
 8002b46:	1a1b      	subs	r3, r3, r0
 8002b48:	50a3      	str	r3, [r4, r2]
 8002b4a:	e7c9      	b.n	8002ae0 <_malloc_r+0x20>
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	6864      	ldr	r4, [r4, #4]
 8002b50:	e7cc      	b.n	8002aec <_malloc_r+0x2c>
 8002b52:	1cc4      	adds	r4, r0, #3
 8002b54:	f024 0403 	bic.w	r4, r4, #3
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d0e3      	beq.n	8002b24 <_malloc_r+0x64>
 8002b5c:	1a21      	subs	r1, r4, r0
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f000 fd00 	bl	8003564 <_sbrk_r>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d1dd      	bne.n	8002b24 <_malloc_r+0x64>
 8002b68:	e7cf      	b.n	8002b0a <_malloc_r+0x4a>
 8002b6a:	bf00      	nop
 8002b6c:	200001fc 	.word	0x200001fc
 8002b70:	20000200 	.word	0x20000200

08002b74 <__cvt>:
 8002b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b78:	ec55 4b10 	vmov	r4, r5, d0
 8002b7c:	2d00      	cmp	r5, #0
 8002b7e:	460e      	mov	r6, r1
 8002b80:	4619      	mov	r1, r3
 8002b82:	462b      	mov	r3, r5
 8002b84:	bfbb      	ittet	lt
 8002b86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002b8a:	461d      	movlt	r5, r3
 8002b8c:	2300      	movge	r3, #0
 8002b8e:	232d      	movlt	r3, #45	; 0x2d
 8002b90:	700b      	strb	r3, [r1, #0]
 8002b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002b98:	4691      	mov	r9, r2
 8002b9a:	f023 0820 	bic.w	r8, r3, #32
 8002b9e:	bfbc      	itt	lt
 8002ba0:	4622      	movlt	r2, r4
 8002ba2:	4614      	movlt	r4, r2
 8002ba4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ba8:	d005      	beq.n	8002bb6 <__cvt+0x42>
 8002baa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002bae:	d100      	bne.n	8002bb2 <__cvt+0x3e>
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	e000      	b.n	8002bb8 <__cvt+0x44>
 8002bb6:	2103      	movs	r1, #3
 8002bb8:	ab03      	add	r3, sp, #12
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	ab02      	add	r3, sp, #8
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	ec45 4b10 	vmov	d0, r4, r5
 8002bc4:	4653      	mov	r3, sl
 8002bc6:	4632      	mov	r2, r6
 8002bc8:	f000 fe2a 	bl	8003820 <_dtoa_r>
 8002bcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002bd0:	4607      	mov	r7, r0
 8002bd2:	d102      	bne.n	8002bda <__cvt+0x66>
 8002bd4:	f019 0f01 	tst.w	r9, #1
 8002bd8:	d022      	beq.n	8002c20 <__cvt+0xac>
 8002bda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bde:	eb07 0906 	add.w	r9, r7, r6
 8002be2:	d110      	bne.n	8002c06 <__cvt+0x92>
 8002be4:	783b      	ldrb	r3, [r7, #0]
 8002be6:	2b30      	cmp	r3, #48	; 0x30
 8002be8:	d10a      	bne.n	8002c00 <__cvt+0x8c>
 8002bea:	2200      	movs	r2, #0
 8002bec:	2300      	movs	r3, #0
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd ff89 	bl	8000b08 <__aeabi_dcmpeq>
 8002bf6:	b918      	cbnz	r0, 8002c00 <__cvt+0x8c>
 8002bf8:	f1c6 0601 	rsb	r6, r6, #1
 8002bfc:	f8ca 6000 	str.w	r6, [sl]
 8002c00:	f8da 3000 	ldr.w	r3, [sl]
 8002c04:	4499      	add	r9, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	f7fd ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 8002c12:	b108      	cbz	r0, 8002c18 <__cvt+0xa4>
 8002c14:	f8cd 900c 	str.w	r9, [sp, #12]
 8002c18:	2230      	movs	r2, #48	; 0x30
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	454b      	cmp	r3, r9
 8002c1e:	d307      	bcc.n	8002c30 <__cvt+0xbc>
 8002c20:	9b03      	ldr	r3, [sp, #12]
 8002c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c24:	1bdb      	subs	r3, r3, r7
 8002c26:	4638      	mov	r0, r7
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	b004      	add	sp, #16
 8002c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c30:	1c59      	adds	r1, r3, #1
 8002c32:	9103      	str	r1, [sp, #12]
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e7f0      	b.n	8002c1a <__cvt+0xa6>

08002c38 <__exponent>:
 8002c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	bfb8      	it	lt
 8002c40:	4249      	neglt	r1, r1
 8002c42:	f803 2b02 	strb.w	r2, [r3], #2
 8002c46:	bfb4      	ite	lt
 8002c48:	222d      	movlt	r2, #45	; 0x2d
 8002c4a:	222b      	movge	r2, #43	; 0x2b
 8002c4c:	2909      	cmp	r1, #9
 8002c4e:	7042      	strb	r2, [r0, #1]
 8002c50:	dd2a      	ble.n	8002ca8 <__exponent+0x70>
 8002c52:	f10d 0407 	add.w	r4, sp, #7
 8002c56:	46a4      	mov	ip, r4
 8002c58:	270a      	movs	r7, #10
 8002c5a:	46a6      	mov	lr, r4
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c62:	fb07 1516 	mls	r5, r7, r6, r1
 8002c66:	3530      	adds	r5, #48	; 0x30
 8002c68:	2a63      	cmp	r2, #99	; 0x63
 8002c6a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002c6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c72:	4631      	mov	r1, r6
 8002c74:	dcf1      	bgt.n	8002c5a <__exponent+0x22>
 8002c76:	3130      	adds	r1, #48	; 0x30
 8002c78:	f1ae 0502 	sub.w	r5, lr, #2
 8002c7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c80:	1c44      	adds	r4, r0, #1
 8002c82:	4629      	mov	r1, r5
 8002c84:	4561      	cmp	r1, ip
 8002c86:	d30a      	bcc.n	8002c9e <__exponent+0x66>
 8002c88:	f10d 0209 	add.w	r2, sp, #9
 8002c8c:	eba2 020e 	sub.w	r2, r2, lr
 8002c90:	4565      	cmp	r5, ip
 8002c92:	bf88      	it	hi
 8002c94:	2200      	movhi	r2, #0
 8002c96:	4413      	add	r3, r2
 8002c98:	1a18      	subs	r0, r3, r0
 8002c9a:	b003      	add	sp, #12
 8002c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ca2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002ca6:	e7ed      	b.n	8002c84 <__exponent+0x4c>
 8002ca8:	2330      	movs	r3, #48	; 0x30
 8002caa:	3130      	adds	r1, #48	; 0x30
 8002cac:	7083      	strb	r3, [r0, #2]
 8002cae:	70c1      	strb	r1, [r0, #3]
 8002cb0:	1d03      	adds	r3, r0, #4
 8002cb2:	e7f1      	b.n	8002c98 <__exponent+0x60>

08002cb4 <_printf_float>:
 8002cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb8:	ed2d 8b02 	vpush	{d8}
 8002cbc:	b08d      	sub	sp, #52	; 0x34
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002cc4:	4616      	mov	r6, r2
 8002cc6:	461f      	mov	r7, r3
 8002cc8:	4605      	mov	r5, r0
 8002cca:	f001 fd4d 	bl	8004768 <_localeconv_r>
 8002cce:	f8d0 a000 	ldr.w	sl, [r0]
 8002cd2:	4650      	mov	r0, sl
 8002cd4:	f7fd fa9c 	bl	8000210 <strlen>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	930a      	str	r3, [sp, #40]	; 0x28
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	9305      	str	r3, [sp, #20]
 8002ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ce4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002ce8:	3307      	adds	r3, #7
 8002cea:	f023 0307 	bic.w	r3, r3, #7
 8002cee:	f103 0208 	add.w	r2, r3, #8
 8002cf2:	f8c8 2000 	str.w	r2, [r8]
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002cfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002d02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002d06:	9307      	str	r3, [sp, #28]
 8002d08:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d0c:	ee08 0a10 	vmov	s16, r0
 8002d10:	4b9f      	ldr	r3, [pc, #636]	; (8002f90 <_printf_float+0x2dc>)
 8002d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d1a:	f7fd ff27 	bl	8000b6c <__aeabi_dcmpun>
 8002d1e:	bb88      	cbnz	r0, 8002d84 <_printf_float+0xd0>
 8002d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d24:	4b9a      	ldr	r3, [pc, #616]	; (8002f90 <_printf_float+0x2dc>)
 8002d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d2a:	f7fd ff01 	bl	8000b30 <__aeabi_dcmple>
 8002d2e:	bb48      	cbnz	r0, 8002d84 <_printf_float+0xd0>
 8002d30:	2200      	movs	r2, #0
 8002d32:	2300      	movs	r3, #0
 8002d34:	4640      	mov	r0, r8
 8002d36:	4649      	mov	r1, r9
 8002d38:	f7fd fef0 	bl	8000b1c <__aeabi_dcmplt>
 8002d3c:	b110      	cbz	r0, 8002d44 <_printf_float+0x90>
 8002d3e:	232d      	movs	r3, #45	; 0x2d
 8002d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d44:	4b93      	ldr	r3, [pc, #588]	; (8002f94 <_printf_float+0x2e0>)
 8002d46:	4894      	ldr	r0, [pc, #592]	; (8002f98 <_printf_float+0x2e4>)
 8002d48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002d4c:	bf94      	ite	ls
 8002d4e:	4698      	movls	r8, r3
 8002d50:	4680      	movhi	r8, r0
 8002d52:	2303      	movs	r3, #3
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	9b05      	ldr	r3, [sp, #20]
 8002d58:	f023 0204 	bic.w	r2, r3, #4
 8002d5c:	6022      	str	r2, [r4, #0]
 8002d5e:	f04f 0900 	mov.w	r9, #0
 8002d62:	9700      	str	r7, [sp, #0]
 8002d64:	4633      	mov	r3, r6
 8002d66:	aa0b      	add	r2, sp, #44	; 0x2c
 8002d68:	4621      	mov	r1, r4
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f000 f9d8 	bl	8003120 <_printf_common>
 8002d70:	3001      	adds	r0, #1
 8002d72:	f040 8090 	bne.w	8002e96 <_printf_float+0x1e2>
 8002d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d7a:	b00d      	add	sp, #52	; 0x34
 8002d7c:	ecbd 8b02 	vpop	{d8}
 8002d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	4640      	mov	r0, r8
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	f7fd feee 	bl	8000b6c <__aeabi_dcmpun>
 8002d90:	b140      	cbz	r0, 8002da4 <_printf_float+0xf0>
 8002d92:	464b      	mov	r3, r9
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bfbc      	itt	lt
 8002d98:	232d      	movlt	r3, #45	; 0x2d
 8002d9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d9e:	487f      	ldr	r0, [pc, #508]	; (8002f9c <_printf_float+0x2e8>)
 8002da0:	4b7f      	ldr	r3, [pc, #508]	; (8002fa0 <_printf_float+0x2ec>)
 8002da2:	e7d1      	b.n	8002d48 <_printf_float+0x94>
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002daa:	9206      	str	r2, [sp, #24]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	d13f      	bne.n	8002e30 <_printf_float+0x17c>
 8002db0:	2306      	movs	r3, #6
 8002db2:	6063      	str	r3, [r4, #4]
 8002db4:	9b05      	ldr	r3, [sp, #20]
 8002db6:	6861      	ldr	r1, [r4, #4]
 8002db8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9303      	str	r3, [sp, #12]
 8002dc0:	ab0a      	add	r3, sp, #40	; 0x28
 8002dc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002dc6:	ab09      	add	r3, sp, #36	; 0x24
 8002dc8:	ec49 8b10 	vmov	d0, r8, r9
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6022      	str	r2, [r4, #0]
 8002dd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f7ff fecd 	bl	8002b74 <__cvt>
 8002dda:	9b06      	ldr	r3, [sp, #24]
 8002ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002dde:	2b47      	cmp	r3, #71	; 0x47
 8002de0:	4680      	mov	r8, r0
 8002de2:	d108      	bne.n	8002df6 <_printf_float+0x142>
 8002de4:	1cc8      	adds	r0, r1, #3
 8002de6:	db02      	blt.n	8002dee <_printf_float+0x13a>
 8002de8:	6863      	ldr	r3, [r4, #4]
 8002dea:	4299      	cmp	r1, r3
 8002dec:	dd41      	ble.n	8002e72 <_printf_float+0x1be>
 8002dee:	f1ab 0b02 	sub.w	fp, fp, #2
 8002df2:	fa5f fb8b 	uxtb.w	fp, fp
 8002df6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002dfa:	d820      	bhi.n	8002e3e <_printf_float+0x18a>
 8002dfc:	3901      	subs	r1, #1
 8002dfe:	465a      	mov	r2, fp
 8002e00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e04:	9109      	str	r1, [sp, #36]	; 0x24
 8002e06:	f7ff ff17 	bl	8002c38 <__exponent>
 8002e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e0c:	1813      	adds	r3, r2, r0
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	4681      	mov	r9, r0
 8002e12:	6123      	str	r3, [r4, #16]
 8002e14:	dc02      	bgt.n	8002e1c <_printf_float+0x168>
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	07d2      	lsls	r2, r2, #31
 8002e1a:	d501      	bpl.n	8002e20 <_printf_float+0x16c>
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	6123      	str	r3, [r4, #16]
 8002e20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d09c      	beq.n	8002d62 <_printf_float+0xae>
 8002e28:	232d      	movs	r3, #45	; 0x2d
 8002e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e2e:	e798      	b.n	8002d62 <_printf_float+0xae>
 8002e30:	9a06      	ldr	r2, [sp, #24]
 8002e32:	2a47      	cmp	r2, #71	; 0x47
 8002e34:	d1be      	bne.n	8002db4 <_printf_float+0x100>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1bc      	bne.n	8002db4 <_printf_float+0x100>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e7b9      	b.n	8002db2 <_printf_float+0xfe>
 8002e3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002e42:	d118      	bne.n	8002e76 <_printf_float+0x1c2>
 8002e44:	2900      	cmp	r1, #0
 8002e46:	6863      	ldr	r3, [r4, #4]
 8002e48:	dd0b      	ble.n	8002e62 <_printf_float+0x1ae>
 8002e4a:	6121      	str	r1, [r4, #16]
 8002e4c:	b913      	cbnz	r3, 8002e54 <_printf_float+0x1a0>
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	07d0      	lsls	r0, r2, #31
 8002e52:	d502      	bpl.n	8002e5a <_printf_float+0x1a6>
 8002e54:	3301      	adds	r3, #1
 8002e56:	440b      	add	r3, r1
 8002e58:	6123      	str	r3, [r4, #16]
 8002e5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e5c:	f04f 0900 	mov.w	r9, #0
 8002e60:	e7de      	b.n	8002e20 <_printf_float+0x16c>
 8002e62:	b913      	cbnz	r3, 8002e6a <_printf_float+0x1b6>
 8002e64:	6822      	ldr	r2, [r4, #0]
 8002e66:	07d2      	lsls	r2, r2, #31
 8002e68:	d501      	bpl.n	8002e6e <_printf_float+0x1ba>
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	e7f4      	b.n	8002e58 <_printf_float+0x1a4>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e7f2      	b.n	8002e58 <_printf_float+0x1a4>
 8002e72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e78:	4299      	cmp	r1, r3
 8002e7a:	db05      	blt.n	8002e88 <_printf_float+0x1d4>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	6121      	str	r1, [r4, #16]
 8002e80:	07d8      	lsls	r0, r3, #31
 8002e82:	d5ea      	bpl.n	8002e5a <_printf_float+0x1a6>
 8002e84:	1c4b      	adds	r3, r1, #1
 8002e86:	e7e7      	b.n	8002e58 <_printf_float+0x1a4>
 8002e88:	2900      	cmp	r1, #0
 8002e8a:	bfd4      	ite	le
 8002e8c:	f1c1 0202 	rsble	r2, r1, #2
 8002e90:	2201      	movgt	r2, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	e7e0      	b.n	8002e58 <_printf_float+0x1a4>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	055a      	lsls	r2, r3, #21
 8002e9a:	d407      	bmi.n	8002eac <_printf_float+0x1f8>
 8002e9c:	6923      	ldr	r3, [r4, #16]
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b8      	blx	r7
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d12c      	bne.n	8002f04 <_printf_float+0x250>
 8002eaa:	e764      	b.n	8002d76 <_printf_float+0xc2>
 8002eac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002eb0:	f240 80e0 	bls.w	8003074 <_printf_float+0x3c0>
 8002eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f7fd fe24 	bl	8000b08 <__aeabi_dcmpeq>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d034      	beq.n	8002f2e <_printf_float+0x27a>
 8002ec4:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <_printf_float+0x2f0>)
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4631      	mov	r1, r6
 8002eca:	4628      	mov	r0, r5
 8002ecc:	47b8      	blx	r7
 8002ece:	3001      	adds	r0, #1
 8002ed0:	f43f af51 	beq.w	8002d76 <_printf_float+0xc2>
 8002ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	db02      	blt.n	8002ee2 <_printf_float+0x22e>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	07d8      	lsls	r0, r3, #31
 8002ee0:	d510      	bpl.n	8002f04 <_printf_float+0x250>
 8002ee2:	ee18 3a10 	vmov	r3, s16
 8002ee6:	4652      	mov	r2, sl
 8002ee8:	4631      	mov	r1, r6
 8002eea:	4628      	mov	r0, r5
 8002eec:	47b8      	blx	r7
 8002eee:	3001      	adds	r0, #1
 8002ef0:	f43f af41 	beq.w	8002d76 <_printf_float+0xc2>
 8002ef4:	f04f 0800 	mov.w	r8, #0
 8002ef8:	f104 091a 	add.w	r9, r4, #26
 8002efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	4543      	cmp	r3, r8
 8002f02:	dc09      	bgt.n	8002f18 <_printf_float+0x264>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	079b      	lsls	r3, r3, #30
 8002f08:	f100 8105 	bmi.w	8003116 <_printf_float+0x462>
 8002f0c:	68e0      	ldr	r0, [r4, #12]
 8002f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f10:	4298      	cmp	r0, r3
 8002f12:	bfb8      	it	lt
 8002f14:	4618      	movlt	r0, r3
 8002f16:	e730      	b.n	8002d7a <_printf_float+0xc6>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	464a      	mov	r2, r9
 8002f1c:	4631      	mov	r1, r6
 8002f1e:	4628      	mov	r0, r5
 8002f20:	47b8      	blx	r7
 8002f22:	3001      	adds	r0, #1
 8002f24:	f43f af27 	beq.w	8002d76 <_printf_float+0xc2>
 8002f28:	f108 0801 	add.w	r8, r8, #1
 8002f2c:	e7e6      	b.n	8002efc <_printf_float+0x248>
 8002f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dc39      	bgt.n	8002fa8 <_printf_float+0x2f4>
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <_printf_float+0x2f0>)
 8002f36:	2301      	movs	r3, #1
 8002f38:	4631      	mov	r1, r6
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	47b8      	blx	r7
 8002f3e:	3001      	adds	r0, #1
 8002f40:	f43f af19 	beq.w	8002d76 <_printf_float+0xc2>
 8002f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	d102      	bne.n	8002f52 <_printf_float+0x29e>
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	07d9      	lsls	r1, r3, #31
 8002f50:	d5d8      	bpl.n	8002f04 <_printf_float+0x250>
 8002f52:	ee18 3a10 	vmov	r3, s16
 8002f56:	4652      	mov	r2, sl
 8002f58:	4631      	mov	r1, r6
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	47b8      	blx	r7
 8002f5e:	3001      	adds	r0, #1
 8002f60:	f43f af09 	beq.w	8002d76 <_printf_float+0xc2>
 8002f64:	f04f 0900 	mov.w	r9, #0
 8002f68:	f104 0a1a 	add.w	sl, r4, #26
 8002f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f6e:	425b      	negs	r3, r3
 8002f70:	454b      	cmp	r3, r9
 8002f72:	dc01      	bgt.n	8002f78 <_printf_float+0x2c4>
 8002f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f76:	e792      	b.n	8002e9e <_printf_float+0x1ea>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4652      	mov	r2, sl
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	4628      	mov	r0, r5
 8002f80:	47b8      	blx	r7
 8002f82:	3001      	adds	r0, #1
 8002f84:	f43f aef7 	beq.w	8002d76 <_printf_float+0xc2>
 8002f88:	f109 0901 	add.w	r9, r9, #1
 8002f8c:	e7ee      	b.n	8002f6c <_printf_float+0x2b8>
 8002f8e:	bf00      	nop
 8002f90:	7fefffff 	.word	0x7fefffff
 8002f94:	08006398 	.word	0x08006398
 8002f98:	0800639c 	.word	0x0800639c
 8002f9c:	080063a4 	.word	0x080063a4
 8002fa0:	080063a0 	.word	0x080063a0
 8002fa4:	080063a8 	.word	0x080063a8
 8002fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fac:	429a      	cmp	r2, r3
 8002fae:	bfa8      	it	ge
 8002fb0:	461a      	movge	r2, r3
 8002fb2:	2a00      	cmp	r2, #0
 8002fb4:	4691      	mov	r9, r2
 8002fb6:	dc37      	bgt.n	8003028 <_printf_float+0x374>
 8002fb8:	f04f 0b00 	mov.w	fp, #0
 8002fbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fc0:	f104 021a 	add.w	r2, r4, #26
 8002fc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fc6:	9305      	str	r3, [sp, #20]
 8002fc8:	eba3 0309 	sub.w	r3, r3, r9
 8002fcc:	455b      	cmp	r3, fp
 8002fce:	dc33      	bgt.n	8003038 <_printf_float+0x384>
 8002fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	db3b      	blt.n	8003050 <_printf_float+0x39c>
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	07da      	lsls	r2, r3, #31
 8002fdc:	d438      	bmi.n	8003050 <_printf_float+0x39c>
 8002fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fe0:	9b05      	ldr	r3, [sp, #20]
 8002fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	eba2 0901 	sub.w	r9, r2, r1
 8002fea:	4599      	cmp	r9, r3
 8002fec:	bfa8      	it	ge
 8002fee:	4699      	movge	r9, r3
 8002ff0:	f1b9 0f00 	cmp.w	r9, #0
 8002ff4:	dc35      	bgt.n	8003062 <_printf_float+0x3ae>
 8002ff6:	f04f 0800 	mov.w	r8, #0
 8002ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ffe:	f104 0a1a 	add.w	sl, r4, #26
 8003002:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	eba3 0309 	sub.w	r3, r3, r9
 800300c:	4543      	cmp	r3, r8
 800300e:	f77f af79 	ble.w	8002f04 <_printf_float+0x250>
 8003012:	2301      	movs	r3, #1
 8003014:	4652      	mov	r2, sl
 8003016:	4631      	mov	r1, r6
 8003018:	4628      	mov	r0, r5
 800301a:	47b8      	blx	r7
 800301c:	3001      	adds	r0, #1
 800301e:	f43f aeaa 	beq.w	8002d76 <_printf_float+0xc2>
 8003022:	f108 0801 	add.w	r8, r8, #1
 8003026:	e7ec      	b.n	8003002 <_printf_float+0x34e>
 8003028:	4613      	mov	r3, r2
 800302a:	4631      	mov	r1, r6
 800302c:	4642      	mov	r2, r8
 800302e:	4628      	mov	r0, r5
 8003030:	47b8      	blx	r7
 8003032:	3001      	adds	r0, #1
 8003034:	d1c0      	bne.n	8002fb8 <_printf_float+0x304>
 8003036:	e69e      	b.n	8002d76 <_printf_float+0xc2>
 8003038:	2301      	movs	r3, #1
 800303a:	4631      	mov	r1, r6
 800303c:	4628      	mov	r0, r5
 800303e:	9205      	str	r2, [sp, #20]
 8003040:	47b8      	blx	r7
 8003042:	3001      	adds	r0, #1
 8003044:	f43f ae97 	beq.w	8002d76 <_printf_float+0xc2>
 8003048:	9a05      	ldr	r2, [sp, #20]
 800304a:	f10b 0b01 	add.w	fp, fp, #1
 800304e:	e7b9      	b.n	8002fc4 <_printf_float+0x310>
 8003050:	ee18 3a10 	vmov	r3, s16
 8003054:	4652      	mov	r2, sl
 8003056:	4631      	mov	r1, r6
 8003058:	4628      	mov	r0, r5
 800305a:	47b8      	blx	r7
 800305c:	3001      	adds	r0, #1
 800305e:	d1be      	bne.n	8002fde <_printf_float+0x32a>
 8003060:	e689      	b.n	8002d76 <_printf_float+0xc2>
 8003062:	9a05      	ldr	r2, [sp, #20]
 8003064:	464b      	mov	r3, r9
 8003066:	4442      	add	r2, r8
 8003068:	4631      	mov	r1, r6
 800306a:	4628      	mov	r0, r5
 800306c:	47b8      	blx	r7
 800306e:	3001      	adds	r0, #1
 8003070:	d1c1      	bne.n	8002ff6 <_printf_float+0x342>
 8003072:	e680      	b.n	8002d76 <_printf_float+0xc2>
 8003074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003076:	2a01      	cmp	r2, #1
 8003078:	dc01      	bgt.n	800307e <_printf_float+0x3ca>
 800307a:	07db      	lsls	r3, r3, #31
 800307c:	d538      	bpl.n	80030f0 <_printf_float+0x43c>
 800307e:	2301      	movs	r3, #1
 8003080:	4642      	mov	r2, r8
 8003082:	4631      	mov	r1, r6
 8003084:	4628      	mov	r0, r5
 8003086:	47b8      	blx	r7
 8003088:	3001      	adds	r0, #1
 800308a:	f43f ae74 	beq.w	8002d76 <_printf_float+0xc2>
 800308e:	ee18 3a10 	vmov	r3, s16
 8003092:	4652      	mov	r2, sl
 8003094:	4631      	mov	r1, r6
 8003096:	4628      	mov	r0, r5
 8003098:	47b8      	blx	r7
 800309a:	3001      	adds	r0, #1
 800309c:	f43f ae6b 	beq.w	8002d76 <_printf_float+0xc2>
 80030a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030a4:	2200      	movs	r2, #0
 80030a6:	2300      	movs	r3, #0
 80030a8:	f7fd fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80030ac:	b9d8      	cbnz	r0, 80030e6 <_printf_float+0x432>
 80030ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030b0:	f108 0201 	add.w	r2, r8, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	4631      	mov	r1, r6
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b8      	blx	r7
 80030bc:	3001      	adds	r0, #1
 80030be:	d10e      	bne.n	80030de <_printf_float+0x42a>
 80030c0:	e659      	b.n	8002d76 <_printf_float+0xc2>
 80030c2:	2301      	movs	r3, #1
 80030c4:	4652      	mov	r2, sl
 80030c6:	4631      	mov	r1, r6
 80030c8:	4628      	mov	r0, r5
 80030ca:	47b8      	blx	r7
 80030cc:	3001      	adds	r0, #1
 80030ce:	f43f ae52 	beq.w	8002d76 <_printf_float+0xc2>
 80030d2:	f108 0801 	add.w	r8, r8, #1
 80030d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	4543      	cmp	r3, r8
 80030dc:	dcf1      	bgt.n	80030c2 <_printf_float+0x40e>
 80030de:	464b      	mov	r3, r9
 80030e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030e4:	e6dc      	b.n	8002ea0 <_printf_float+0x1ec>
 80030e6:	f04f 0800 	mov.w	r8, #0
 80030ea:	f104 0a1a 	add.w	sl, r4, #26
 80030ee:	e7f2      	b.n	80030d6 <_printf_float+0x422>
 80030f0:	2301      	movs	r3, #1
 80030f2:	4642      	mov	r2, r8
 80030f4:	e7df      	b.n	80030b6 <_printf_float+0x402>
 80030f6:	2301      	movs	r3, #1
 80030f8:	464a      	mov	r2, r9
 80030fa:	4631      	mov	r1, r6
 80030fc:	4628      	mov	r0, r5
 80030fe:	47b8      	blx	r7
 8003100:	3001      	adds	r0, #1
 8003102:	f43f ae38 	beq.w	8002d76 <_printf_float+0xc2>
 8003106:	f108 0801 	add.w	r8, r8, #1
 800310a:	68e3      	ldr	r3, [r4, #12]
 800310c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800310e:	1a5b      	subs	r3, r3, r1
 8003110:	4543      	cmp	r3, r8
 8003112:	dcf0      	bgt.n	80030f6 <_printf_float+0x442>
 8003114:	e6fa      	b.n	8002f0c <_printf_float+0x258>
 8003116:	f04f 0800 	mov.w	r8, #0
 800311a:	f104 0919 	add.w	r9, r4, #25
 800311e:	e7f4      	b.n	800310a <_printf_float+0x456>

08003120 <_printf_common>:
 8003120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	4616      	mov	r6, r2
 8003126:	4699      	mov	r9, r3
 8003128:	688a      	ldr	r2, [r1, #8]
 800312a:	690b      	ldr	r3, [r1, #16]
 800312c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003130:	4293      	cmp	r3, r2
 8003132:	bfb8      	it	lt
 8003134:	4613      	movlt	r3, r2
 8003136:	6033      	str	r3, [r6, #0]
 8003138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800313c:	4607      	mov	r7, r0
 800313e:	460c      	mov	r4, r1
 8003140:	b10a      	cbz	r2, 8003146 <_printf_common+0x26>
 8003142:	3301      	adds	r3, #1
 8003144:	6033      	str	r3, [r6, #0]
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	0699      	lsls	r1, r3, #26
 800314a:	bf42      	ittt	mi
 800314c:	6833      	ldrmi	r3, [r6, #0]
 800314e:	3302      	addmi	r3, #2
 8003150:	6033      	strmi	r3, [r6, #0]
 8003152:	6825      	ldr	r5, [r4, #0]
 8003154:	f015 0506 	ands.w	r5, r5, #6
 8003158:	d106      	bne.n	8003168 <_printf_common+0x48>
 800315a:	f104 0a19 	add.w	sl, r4, #25
 800315e:	68e3      	ldr	r3, [r4, #12]
 8003160:	6832      	ldr	r2, [r6, #0]
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	42ab      	cmp	r3, r5
 8003166:	dc26      	bgt.n	80031b6 <_printf_common+0x96>
 8003168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800316c:	1e13      	subs	r3, r2, #0
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	bf18      	it	ne
 8003172:	2301      	movne	r3, #1
 8003174:	0692      	lsls	r2, r2, #26
 8003176:	d42b      	bmi.n	80031d0 <_printf_common+0xb0>
 8003178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800317c:	4649      	mov	r1, r9
 800317e:	4638      	mov	r0, r7
 8003180:	47c0      	blx	r8
 8003182:	3001      	adds	r0, #1
 8003184:	d01e      	beq.n	80031c4 <_printf_common+0xa4>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	68e5      	ldr	r5, [r4, #12]
 800318a:	6832      	ldr	r2, [r6, #0]
 800318c:	f003 0306 	and.w	r3, r3, #6
 8003190:	2b04      	cmp	r3, #4
 8003192:	bf08      	it	eq
 8003194:	1aad      	subeq	r5, r5, r2
 8003196:	68a3      	ldr	r3, [r4, #8]
 8003198:	6922      	ldr	r2, [r4, #16]
 800319a:	bf0c      	ite	eq
 800319c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031a0:	2500      	movne	r5, #0
 80031a2:	4293      	cmp	r3, r2
 80031a4:	bfc4      	itt	gt
 80031a6:	1a9b      	subgt	r3, r3, r2
 80031a8:	18ed      	addgt	r5, r5, r3
 80031aa:	2600      	movs	r6, #0
 80031ac:	341a      	adds	r4, #26
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d11a      	bne.n	80031e8 <_printf_common+0xc8>
 80031b2:	2000      	movs	r0, #0
 80031b4:	e008      	b.n	80031c8 <_printf_common+0xa8>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4652      	mov	r2, sl
 80031ba:	4649      	mov	r1, r9
 80031bc:	4638      	mov	r0, r7
 80031be:	47c0      	blx	r8
 80031c0:	3001      	adds	r0, #1
 80031c2:	d103      	bne.n	80031cc <_printf_common+0xac>
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7c6      	b.n	800315e <_printf_common+0x3e>
 80031d0:	18e1      	adds	r1, r4, r3
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	2030      	movs	r0, #48	; 0x30
 80031d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031da:	4422      	add	r2, r4
 80031dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031e4:	3302      	adds	r3, #2
 80031e6:	e7c7      	b.n	8003178 <_printf_common+0x58>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4622      	mov	r2, r4
 80031ec:	4649      	mov	r1, r9
 80031ee:	4638      	mov	r0, r7
 80031f0:	47c0      	blx	r8
 80031f2:	3001      	adds	r0, #1
 80031f4:	d0e6      	beq.n	80031c4 <_printf_common+0xa4>
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7d9      	b.n	80031ae <_printf_common+0x8e>
	...

080031fc <_printf_i>:
 80031fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003200:	460c      	mov	r4, r1
 8003202:	4691      	mov	r9, r2
 8003204:	7e27      	ldrb	r7, [r4, #24]
 8003206:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003208:	2f78      	cmp	r7, #120	; 0x78
 800320a:	4680      	mov	r8, r0
 800320c:	469a      	mov	sl, r3
 800320e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003212:	d807      	bhi.n	8003224 <_printf_i+0x28>
 8003214:	2f62      	cmp	r7, #98	; 0x62
 8003216:	d80a      	bhi.n	800322e <_printf_i+0x32>
 8003218:	2f00      	cmp	r7, #0
 800321a:	f000 80d8 	beq.w	80033ce <_printf_i+0x1d2>
 800321e:	2f58      	cmp	r7, #88	; 0x58
 8003220:	f000 80a3 	beq.w	800336a <_printf_i+0x16e>
 8003224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800322c:	e03a      	b.n	80032a4 <_printf_i+0xa8>
 800322e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003232:	2b15      	cmp	r3, #21
 8003234:	d8f6      	bhi.n	8003224 <_printf_i+0x28>
 8003236:	a001      	add	r0, pc, #4	; (adr r0, 800323c <_printf_i+0x40>)
 8003238:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800323c:	08003295 	.word	0x08003295
 8003240:	080032a9 	.word	0x080032a9
 8003244:	08003225 	.word	0x08003225
 8003248:	08003225 	.word	0x08003225
 800324c:	08003225 	.word	0x08003225
 8003250:	08003225 	.word	0x08003225
 8003254:	080032a9 	.word	0x080032a9
 8003258:	08003225 	.word	0x08003225
 800325c:	08003225 	.word	0x08003225
 8003260:	08003225 	.word	0x08003225
 8003264:	08003225 	.word	0x08003225
 8003268:	080033b5 	.word	0x080033b5
 800326c:	080032d9 	.word	0x080032d9
 8003270:	08003397 	.word	0x08003397
 8003274:	08003225 	.word	0x08003225
 8003278:	08003225 	.word	0x08003225
 800327c:	080033d7 	.word	0x080033d7
 8003280:	08003225 	.word	0x08003225
 8003284:	080032d9 	.word	0x080032d9
 8003288:	08003225 	.word	0x08003225
 800328c:	08003225 	.word	0x08003225
 8003290:	0800339f 	.word	0x0800339f
 8003294:	680b      	ldr	r3, [r1, #0]
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	600a      	str	r2, [r1, #0]
 800329c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0a3      	b.n	80033f0 <_printf_i+0x1f4>
 80032a8:	6825      	ldr	r5, [r4, #0]
 80032aa:	6808      	ldr	r0, [r1, #0]
 80032ac:	062e      	lsls	r6, r5, #24
 80032ae:	f100 0304 	add.w	r3, r0, #4
 80032b2:	d50a      	bpl.n	80032ca <_printf_i+0xce>
 80032b4:	6805      	ldr	r5, [r0, #0]
 80032b6:	600b      	str	r3, [r1, #0]
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	da03      	bge.n	80032c4 <_printf_i+0xc8>
 80032bc:	232d      	movs	r3, #45	; 0x2d
 80032be:	426d      	negs	r5, r5
 80032c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c4:	485e      	ldr	r0, [pc, #376]	; (8003440 <_printf_i+0x244>)
 80032c6:	230a      	movs	r3, #10
 80032c8:	e019      	b.n	80032fe <_printf_i+0x102>
 80032ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032ce:	6805      	ldr	r5, [r0, #0]
 80032d0:	600b      	str	r3, [r1, #0]
 80032d2:	bf18      	it	ne
 80032d4:	b22d      	sxthne	r5, r5
 80032d6:	e7ef      	b.n	80032b8 <_printf_i+0xbc>
 80032d8:	680b      	ldr	r3, [r1, #0]
 80032da:	6825      	ldr	r5, [r4, #0]
 80032dc:	1d18      	adds	r0, r3, #4
 80032de:	6008      	str	r0, [r1, #0]
 80032e0:	0628      	lsls	r0, r5, #24
 80032e2:	d501      	bpl.n	80032e8 <_printf_i+0xec>
 80032e4:	681d      	ldr	r5, [r3, #0]
 80032e6:	e002      	b.n	80032ee <_printf_i+0xf2>
 80032e8:	0669      	lsls	r1, r5, #25
 80032ea:	d5fb      	bpl.n	80032e4 <_printf_i+0xe8>
 80032ec:	881d      	ldrh	r5, [r3, #0]
 80032ee:	4854      	ldr	r0, [pc, #336]	; (8003440 <_printf_i+0x244>)
 80032f0:	2f6f      	cmp	r7, #111	; 0x6f
 80032f2:	bf0c      	ite	eq
 80032f4:	2308      	moveq	r3, #8
 80032f6:	230a      	movne	r3, #10
 80032f8:	2100      	movs	r1, #0
 80032fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032fe:	6866      	ldr	r6, [r4, #4]
 8003300:	60a6      	str	r6, [r4, #8]
 8003302:	2e00      	cmp	r6, #0
 8003304:	bfa2      	ittt	ge
 8003306:	6821      	ldrge	r1, [r4, #0]
 8003308:	f021 0104 	bicge.w	r1, r1, #4
 800330c:	6021      	strge	r1, [r4, #0]
 800330e:	b90d      	cbnz	r5, 8003314 <_printf_i+0x118>
 8003310:	2e00      	cmp	r6, #0
 8003312:	d04d      	beq.n	80033b0 <_printf_i+0x1b4>
 8003314:	4616      	mov	r6, r2
 8003316:	fbb5 f1f3 	udiv	r1, r5, r3
 800331a:	fb03 5711 	mls	r7, r3, r1, r5
 800331e:	5dc7      	ldrb	r7, [r0, r7]
 8003320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003324:	462f      	mov	r7, r5
 8003326:	42bb      	cmp	r3, r7
 8003328:	460d      	mov	r5, r1
 800332a:	d9f4      	bls.n	8003316 <_printf_i+0x11a>
 800332c:	2b08      	cmp	r3, #8
 800332e:	d10b      	bne.n	8003348 <_printf_i+0x14c>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	07df      	lsls	r7, r3, #31
 8003334:	d508      	bpl.n	8003348 <_printf_i+0x14c>
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	6861      	ldr	r1, [r4, #4]
 800333a:	4299      	cmp	r1, r3
 800333c:	bfde      	ittt	le
 800333e:	2330      	movle	r3, #48	; 0x30
 8003340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003344:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003348:	1b92      	subs	r2, r2, r6
 800334a:	6122      	str	r2, [r4, #16]
 800334c:	f8cd a000 	str.w	sl, [sp]
 8003350:	464b      	mov	r3, r9
 8003352:	aa03      	add	r2, sp, #12
 8003354:	4621      	mov	r1, r4
 8003356:	4640      	mov	r0, r8
 8003358:	f7ff fee2 	bl	8003120 <_printf_common>
 800335c:	3001      	adds	r0, #1
 800335e:	d14c      	bne.n	80033fa <_printf_i+0x1fe>
 8003360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003364:	b004      	add	sp, #16
 8003366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336a:	4835      	ldr	r0, [pc, #212]	; (8003440 <_printf_i+0x244>)
 800336c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	680e      	ldr	r6, [r1, #0]
 8003374:	061f      	lsls	r7, r3, #24
 8003376:	f856 5b04 	ldr.w	r5, [r6], #4
 800337a:	600e      	str	r6, [r1, #0]
 800337c:	d514      	bpl.n	80033a8 <_printf_i+0x1ac>
 800337e:	07d9      	lsls	r1, r3, #31
 8003380:	bf44      	itt	mi
 8003382:	f043 0320 	orrmi.w	r3, r3, #32
 8003386:	6023      	strmi	r3, [r4, #0]
 8003388:	b91d      	cbnz	r5, 8003392 <_printf_i+0x196>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	f023 0320 	bic.w	r3, r3, #32
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	2310      	movs	r3, #16
 8003394:	e7b0      	b.n	80032f8 <_printf_i+0xfc>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	2378      	movs	r3, #120	; 0x78
 80033a0:	4828      	ldr	r0, [pc, #160]	; (8003444 <_printf_i+0x248>)
 80033a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033a6:	e7e3      	b.n	8003370 <_printf_i+0x174>
 80033a8:	065e      	lsls	r6, r3, #25
 80033aa:	bf48      	it	mi
 80033ac:	b2ad      	uxthmi	r5, r5
 80033ae:	e7e6      	b.n	800337e <_printf_i+0x182>
 80033b0:	4616      	mov	r6, r2
 80033b2:	e7bb      	b.n	800332c <_printf_i+0x130>
 80033b4:	680b      	ldr	r3, [r1, #0]
 80033b6:	6826      	ldr	r6, [r4, #0]
 80033b8:	6960      	ldr	r0, [r4, #20]
 80033ba:	1d1d      	adds	r5, r3, #4
 80033bc:	600d      	str	r5, [r1, #0]
 80033be:	0635      	lsls	r5, r6, #24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0x1cc>
 80033c4:	6018      	str	r0, [r3, #0]
 80033c6:	e002      	b.n	80033ce <_printf_i+0x1d2>
 80033c8:	0671      	lsls	r1, r6, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0x1c8>
 80033cc:	8018      	strh	r0, [r3, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	6123      	str	r3, [r4, #16]
 80033d2:	4616      	mov	r6, r2
 80033d4:	e7ba      	b.n	800334c <_printf_i+0x150>
 80033d6:	680b      	ldr	r3, [r1, #0]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	600a      	str	r2, [r1, #0]
 80033dc:	681e      	ldr	r6, [r3, #0]
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	2100      	movs	r1, #0
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7fc ff1c 	bl	8000220 <memchr>
 80033e8:	b108      	cbz	r0, 80033ee <_printf_i+0x1f2>
 80033ea:	1b80      	subs	r0, r0, r6
 80033ec:	6060      	str	r0, [r4, #4]
 80033ee:	6863      	ldr	r3, [r4, #4]
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	2300      	movs	r3, #0
 80033f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f8:	e7a8      	b.n	800334c <_printf_i+0x150>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	4632      	mov	r2, r6
 80033fe:	4649      	mov	r1, r9
 8003400:	4640      	mov	r0, r8
 8003402:	47d0      	blx	sl
 8003404:	3001      	adds	r0, #1
 8003406:	d0ab      	beq.n	8003360 <_printf_i+0x164>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	079b      	lsls	r3, r3, #30
 800340c:	d413      	bmi.n	8003436 <_printf_i+0x23a>
 800340e:	68e0      	ldr	r0, [r4, #12]
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	4298      	cmp	r0, r3
 8003414:	bfb8      	it	lt
 8003416:	4618      	movlt	r0, r3
 8003418:	e7a4      	b.n	8003364 <_printf_i+0x168>
 800341a:	2301      	movs	r3, #1
 800341c:	4632      	mov	r2, r6
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d09b      	beq.n	8003360 <_printf_i+0x164>
 8003428:	3501      	adds	r5, #1
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	9903      	ldr	r1, [sp, #12]
 800342e:	1a5b      	subs	r3, r3, r1
 8003430:	42ab      	cmp	r3, r5
 8003432:	dcf2      	bgt.n	800341a <_printf_i+0x21e>
 8003434:	e7eb      	b.n	800340e <_printf_i+0x212>
 8003436:	2500      	movs	r5, #0
 8003438:	f104 0619 	add.w	r6, r4, #25
 800343c:	e7f5      	b.n	800342a <_printf_i+0x22e>
 800343e:	bf00      	nop
 8003440:	080063aa 	.word	0x080063aa
 8003444:	080063bb 	.word	0x080063bb

08003448 <iprintf>:
 8003448:	b40f      	push	{r0, r1, r2, r3}
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <iprintf+0x2c>)
 800344c:	b513      	push	{r0, r1, r4, lr}
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	b124      	cbz	r4, 800345c <iprintf+0x14>
 8003452:	69a3      	ldr	r3, [r4, #24]
 8003454:	b913      	cbnz	r3, 800345c <iprintf+0x14>
 8003456:	4620      	mov	r0, r4
 8003458:	f001 f8e8 	bl	800462c <__sinit>
 800345c:	ab05      	add	r3, sp, #20
 800345e:	9a04      	ldr	r2, [sp, #16]
 8003460:	68a1      	ldr	r1, [r4, #8]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	4620      	mov	r0, r4
 8003466:	f001 fd9f 	bl	8004fa8 <_vfiprintf_r>
 800346a:	b002      	add	sp, #8
 800346c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003470:	b004      	add	sp, #16
 8003472:	4770      	bx	lr
 8003474:	2000000c 	.word	0x2000000c

08003478 <_puts_r>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	460e      	mov	r6, r1
 800347c:	4605      	mov	r5, r0
 800347e:	b118      	cbz	r0, 8003488 <_puts_r+0x10>
 8003480:	6983      	ldr	r3, [r0, #24]
 8003482:	b90b      	cbnz	r3, 8003488 <_puts_r+0x10>
 8003484:	f001 f8d2 	bl	800462c <__sinit>
 8003488:	69ab      	ldr	r3, [r5, #24]
 800348a:	68ac      	ldr	r4, [r5, #8]
 800348c:	b913      	cbnz	r3, 8003494 <_puts_r+0x1c>
 800348e:	4628      	mov	r0, r5
 8003490:	f001 f8cc 	bl	800462c <__sinit>
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <_puts_r+0xd0>)
 8003496:	429c      	cmp	r4, r3
 8003498:	d120      	bne.n	80034dc <_puts_r+0x64>
 800349a:	686c      	ldr	r4, [r5, #4]
 800349c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800349e:	07db      	lsls	r3, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_puts_r+0x36>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	0598      	lsls	r0, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_puts_r+0x36>
 80034a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034aa:	f001 f962 	bl	8004772 <__retarget_lock_acquire_recursive>
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	0719      	lsls	r1, r3, #28
 80034b2:	d51d      	bpl.n	80034f0 <_puts_r+0x78>
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	b1db      	cbz	r3, 80034f0 <_puts_r+0x78>
 80034b8:	3e01      	subs	r6, #1
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60a3      	str	r3, [r4, #8]
 80034c4:	bb39      	cbnz	r1, 8003516 <_puts_r+0x9e>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da38      	bge.n	800353c <_puts_r+0xc4>
 80034ca:	4622      	mov	r2, r4
 80034cc:	210a      	movs	r1, #10
 80034ce:	4628      	mov	r0, r5
 80034d0:	f000 f858 	bl	8003584 <__swbuf_r>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d011      	beq.n	80034fc <_puts_r+0x84>
 80034d8:	250a      	movs	r5, #10
 80034da:	e011      	b.n	8003500 <_puts_r+0x88>
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <_puts_r+0xd4>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d101      	bne.n	80034e6 <_puts_r+0x6e>
 80034e2:	68ac      	ldr	r4, [r5, #8]
 80034e4:	e7da      	b.n	800349c <_puts_r+0x24>
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <_puts_r+0xd8>)
 80034e8:	429c      	cmp	r4, r3
 80034ea:	bf08      	it	eq
 80034ec:	68ec      	ldreq	r4, [r5, #12]
 80034ee:	e7d5      	b.n	800349c <_puts_r+0x24>
 80034f0:	4621      	mov	r1, r4
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 f898 	bl	8003628 <__swsetup_r>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d0dd      	beq.n	80034b8 <_puts_r+0x40>
 80034fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003502:	07da      	lsls	r2, r3, #31
 8003504:	d405      	bmi.n	8003512 <_puts_r+0x9a>
 8003506:	89a3      	ldrh	r3, [r4, #12]
 8003508:	059b      	lsls	r3, r3, #22
 800350a:	d402      	bmi.n	8003512 <_puts_r+0x9a>
 800350c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800350e:	f001 f931 	bl	8004774 <__retarget_lock_release_recursive>
 8003512:	4628      	mov	r0, r5
 8003514:	bd70      	pop	{r4, r5, r6, pc}
 8003516:	2b00      	cmp	r3, #0
 8003518:	da04      	bge.n	8003524 <_puts_r+0xac>
 800351a:	69a2      	ldr	r2, [r4, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	dc06      	bgt.n	800352e <_puts_r+0xb6>
 8003520:	290a      	cmp	r1, #10
 8003522:	d004      	beq.n	800352e <_puts_r+0xb6>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	6022      	str	r2, [r4, #0]
 800352a:	7019      	strb	r1, [r3, #0]
 800352c:	e7c5      	b.n	80034ba <_puts_r+0x42>
 800352e:	4622      	mov	r2, r4
 8003530:	4628      	mov	r0, r5
 8003532:	f000 f827 	bl	8003584 <__swbuf_r>
 8003536:	3001      	adds	r0, #1
 8003538:	d1bf      	bne.n	80034ba <_puts_r+0x42>
 800353a:	e7df      	b.n	80034fc <_puts_r+0x84>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	250a      	movs	r5, #10
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	6022      	str	r2, [r4, #0]
 8003544:	701d      	strb	r5, [r3, #0]
 8003546:	e7db      	b.n	8003500 <_puts_r+0x88>
 8003548:	08006480 	.word	0x08006480
 800354c:	080064a0 	.word	0x080064a0
 8003550:	08006460 	.word	0x08006460

08003554 <puts>:
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <puts+0xc>)
 8003556:	4601      	mov	r1, r0
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	f7ff bf8d 	b.w	8003478 <_puts_r>
 800355e:	bf00      	nop
 8003560:	2000000c 	.word	0x2000000c

08003564 <_sbrk_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4d06      	ldr	r5, [pc, #24]	; (8003580 <_sbrk_r+0x1c>)
 8003568:	2300      	movs	r3, #0
 800356a:	4604      	mov	r4, r0
 800356c:	4608      	mov	r0, r1
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	f7fe f99c 	bl	80018ac <_sbrk>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d102      	bne.n	800357e <_sbrk_r+0x1a>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	b103      	cbz	r3, 800357e <_sbrk_r+0x1a>
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	20000234 	.word	0x20000234

08003584 <__swbuf_r>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	460e      	mov	r6, r1
 8003588:	4614      	mov	r4, r2
 800358a:	4605      	mov	r5, r0
 800358c:	b118      	cbz	r0, 8003596 <__swbuf_r+0x12>
 800358e:	6983      	ldr	r3, [r0, #24]
 8003590:	b90b      	cbnz	r3, 8003596 <__swbuf_r+0x12>
 8003592:	f001 f84b 	bl	800462c <__sinit>
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <__swbuf_r+0x98>)
 8003598:	429c      	cmp	r4, r3
 800359a:	d12b      	bne.n	80035f4 <__swbuf_r+0x70>
 800359c:	686c      	ldr	r4, [r5, #4]
 800359e:	69a3      	ldr	r3, [r4, #24]
 80035a0:	60a3      	str	r3, [r4, #8]
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	071a      	lsls	r2, r3, #28
 80035a6:	d52f      	bpl.n	8003608 <__swbuf_r+0x84>
 80035a8:	6923      	ldr	r3, [r4, #16]
 80035aa:	b36b      	cbz	r3, 8003608 <__swbuf_r+0x84>
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	1ac0      	subs	r0, r0, r3
 80035b2:	6963      	ldr	r3, [r4, #20]
 80035b4:	b2f6      	uxtb	r6, r6
 80035b6:	4283      	cmp	r3, r0
 80035b8:	4637      	mov	r7, r6
 80035ba:	dc04      	bgt.n	80035c6 <__swbuf_r+0x42>
 80035bc:	4621      	mov	r1, r4
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 ffa0 	bl	8004504 <_fflush_r>
 80035c4:	bb30      	cbnz	r0, 8003614 <__swbuf_r+0x90>
 80035c6:	68a3      	ldr	r3, [r4, #8]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60a3      	str	r3, [r4, #8]
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	6022      	str	r2, [r4, #0]
 80035d2:	701e      	strb	r6, [r3, #0]
 80035d4:	6963      	ldr	r3, [r4, #20]
 80035d6:	3001      	adds	r0, #1
 80035d8:	4283      	cmp	r3, r0
 80035da:	d004      	beq.n	80035e6 <__swbuf_r+0x62>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	07db      	lsls	r3, r3, #31
 80035e0:	d506      	bpl.n	80035f0 <__swbuf_r+0x6c>
 80035e2:	2e0a      	cmp	r6, #10
 80035e4:	d104      	bne.n	80035f0 <__swbuf_r+0x6c>
 80035e6:	4621      	mov	r1, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 ff8b 	bl	8004504 <_fflush_r>
 80035ee:	b988      	cbnz	r0, 8003614 <__swbuf_r+0x90>
 80035f0:	4638      	mov	r0, r7
 80035f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <__swbuf_r+0x9c>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <__swbuf_r+0x7a>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7cf      	b.n	800359e <__swbuf_r+0x1a>
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <__swbuf_r+0xa0>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7ca      	b.n	800359e <__swbuf_r+0x1a>
 8003608:	4621      	mov	r1, r4
 800360a:	4628      	mov	r0, r5
 800360c:	f000 f80c 	bl	8003628 <__swsetup_r>
 8003610:	2800      	cmp	r0, #0
 8003612:	d0cb      	beq.n	80035ac <__swbuf_r+0x28>
 8003614:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003618:	e7ea      	b.n	80035f0 <__swbuf_r+0x6c>
 800361a:	bf00      	nop
 800361c:	08006480 	.word	0x08006480
 8003620:	080064a0 	.word	0x080064a0
 8003624:	08006460 	.word	0x08006460

08003628 <__swsetup_r>:
 8003628:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <__swsetup_r+0xcc>)
 800362a:	b570      	push	{r4, r5, r6, lr}
 800362c:	681d      	ldr	r5, [r3, #0]
 800362e:	4606      	mov	r6, r0
 8003630:	460c      	mov	r4, r1
 8003632:	b125      	cbz	r5, 800363e <__swsetup_r+0x16>
 8003634:	69ab      	ldr	r3, [r5, #24]
 8003636:	b913      	cbnz	r3, 800363e <__swsetup_r+0x16>
 8003638:	4628      	mov	r0, r5
 800363a:	f000 fff7 	bl	800462c <__sinit>
 800363e:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <__swsetup_r+0xd0>)
 8003640:	429c      	cmp	r4, r3
 8003642:	d10f      	bne.n	8003664 <__swsetup_r+0x3c>
 8003644:	686c      	ldr	r4, [r5, #4]
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800364c:	0719      	lsls	r1, r3, #28
 800364e:	d42c      	bmi.n	80036aa <__swsetup_r+0x82>
 8003650:	06dd      	lsls	r5, r3, #27
 8003652:	d411      	bmi.n	8003678 <__swsetup_r+0x50>
 8003654:	2309      	movs	r3, #9
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800365c:	81a3      	strh	r3, [r4, #12]
 800365e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003662:	e03e      	b.n	80036e2 <__swsetup_r+0xba>
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <__swsetup_r+0xd4>)
 8003666:	429c      	cmp	r4, r3
 8003668:	d101      	bne.n	800366e <__swsetup_r+0x46>
 800366a:	68ac      	ldr	r4, [r5, #8]
 800366c:	e7eb      	b.n	8003646 <__swsetup_r+0x1e>
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <__swsetup_r+0xd8>)
 8003670:	429c      	cmp	r4, r3
 8003672:	bf08      	it	eq
 8003674:	68ec      	ldreq	r4, [r5, #12]
 8003676:	e7e6      	b.n	8003646 <__swsetup_r+0x1e>
 8003678:	0758      	lsls	r0, r3, #29
 800367a:	d512      	bpl.n	80036a2 <__swsetup_r+0x7a>
 800367c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800367e:	b141      	cbz	r1, 8003692 <__swsetup_r+0x6a>
 8003680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003684:	4299      	cmp	r1, r3
 8003686:	d002      	beq.n	800368e <__swsetup_r+0x66>
 8003688:	4630      	mov	r0, r6
 800368a:	f7ff f9c9 	bl	8002a20 <_free_r>
 800368e:	2300      	movs	r3, #0
 8003690:	6363      	str	r3, [r4, #52]	; 0x34
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003698:	81a3      	strh	r3, [r4, #12]
 800369a:	2300      	movs	r3, #0
 800369c:	6063      	str	r3, [r4, #4]
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	b94b      	cbnz	r3, 80036c2 <__swsetup_r+0x9a>
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b8:	d003      	beq.n	80036c2 <__swsetup_r+0x9a>
 80036ba:	4621      	mov	r1, r4
 80036bc:	4630      	mov	r0, r6
 80036be:	f001 f87f 	bl	80047c0 <__smakebuf_r>
 80036c2:	89a0      	ldrh	r0, [r4, #12]
 80036c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036c8:	f010 0301 	ands.w	r3, r0, #1
 80036cc:	d00a      	beq.n	80036e4 <__swsetup_r+0xbc>
 80036ce:	2300      	movs	r3, #0
 80036d0:	60a3      	str	r3, [r4, #8]
 80036d2:	6963      	ldr	r3, [r4, #20]
 80036d4:	425b      	negs	r3, r3
 80036d6:	61a3      	str	r3, [r4, #24]
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	b943      	cbnz	r3, 80036ee <__swsetup_r+0xc6>
 80036dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036e0:	d1ba      	bne.n	8003658 <__swsetup_r+0x30>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	0781      	lsls	r1, r0, #30
 80036e6:	bf58      	it	pl
 80036e8:	6963      	ldrpl	r3, [r4, #20]
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	e7f4      	b.n	80036d8 <__swsetup_r+0xb0>
 80036ee:	2000      	movs	r0, #0
 80036f0:	e7f7      	b.n	80036e2 <__swsetup_r+0xba>
 80036f2:	bf00      	nop
 80036f4:	2000000c 	.word	0x2000000c
 80036f8:	08006480 	.word	0x08006480
 80036fc:	080064a0 	.word	0x080064a0
 8003700:	08006460 	.word	0x08006460

08003704 <quorem>:
 8003704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003708:	6903      	ldr	r3, [r0, #16]
 800370a:	690c      	ldr	r4, [r1, #16]
 800370c:	42a3      	cmp	r3, r4
 800370e:	4607      	mov	r7, r0
 8003710:	f2c0 8081 	blt.w	8003816 <quorem+0x112>
 8003714:	3c01      	subs	r4, #1
 8003716:	f101 0814 	add.w	r8, r1, #20
 800371a:	f100 0514 	add.w	r5, r0, #20
 800371e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800372c:	3301      	adds	r3, #1
 800372e:	429a      	cmp	r2, r3
 8003730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003738:	fbb2 f6f3 	udiv	r6, r2, r3
 800373c:	d331      	bcc.n	80037a2 <quorem+0x9e>
 800373e:	f04f 0e00 	mov.w	lr, #0
 8003742:	4640      	mov	r0, r8
 8003744:	46ac      	mov	ip, r5
 8003746:	46f2      	mov	sl, lr
 8003748:	f850 2b04 	ldr.w	r2, [r0], #4
 800374c:	b293      	uxth	r3, r2
 800374e:	fb06 e303 	mla	r3, r6, r3, lr
 8003752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003756:	b29b      	uxth	r3, r3
 8003758:	ebaa 0303 	sub.w	r3, sl, r3
 800375c:	0c12      	lsrs	r2, r2, #16
 800375e:	f8dc a000 	ldr.w	sl, [ip]
 8003762:	fb06 e202 	mla	r2, r6, r2, lr
 8003766:	fa13 f38a 	uxtah	r3, r3, sl
 800376a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800376e:	fa1f fa82 	uxth.w	sl, r2
 8003772:	f8dc 2000 	ldr.w	r2, [ip]
 8003776:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800377a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800377e:	b29b      	uxth	r3, r3
 8003780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003784:	4581      	cmp	r9, r0
 8003786:	f84c 3b04 	str.w	r3, [ip], #4
 800378a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800378e:	d2db      	bcs.n	8003748 <quorem+0x44>
 8003790:	f855 300b 	ldr.w	r3, [r5, fp]
 8003794:	b92b      	cbnz	r3, 80037a2 <quorem+0x9e>
 8003796:	9b01      	ldr	r3, [sp, #4]
 8003798:	3b04      	subs	r3, #4
 800379a:	429d      	cmp	r5, r3
 800379c:	461a      	mov	r2, r3
 800379e:	d32e      	bcc.n	80037fe <quorem+0xfa>
 80037a0:	613c      	str	r4, [r7, #16]
 80037a2:	4638      	mov	r0, r7
 80037a4:	f001 fad6 	bl	8004d54 <__mcmp>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	db24      	blt.n	80037f6 <quorem+0xf2>
 80037ac:	3601      	adds	r6, #1
 80037ae:	4628      	mov	r0, r5
 80037b0:	f04f 0c00 	mov.w	ip, #0
 80037b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80037b8:	f8d0 e000 	ldr.w	lr, [r0]
 80037bc:	b293      	uxth	r3, r2
 80037be:	ebac 0303 	sub.w	r3, ip, r3
 80037c2:	0c12      	lsrs	r2, r2, #16
 80037c4:	fa13 f38e 	uxtah	r3, r3, lr
 80037c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80037cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037d6:	45c1      	cmp	r9, r8
 80037d8:	f840 3b04 	str.w	r3, [r0], #4
 80037dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80037e0:	d2e8      	bcs.n	80037b4 <quorem+0xb0>
 80037e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037ea:	b922      	cbnz	r2, 80037f6 <quorem+0xf2>
 80037ec:	3b04      	subs	r3, #4
 80037ee:	429d      	cmp	r5, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	d30a      	bcc.n	800380a <quorem+0x106>
 80037f4:	613c      	str	r4, [r7, #16]
 80037f6:	4630      	mov	r0, r6
 80037f8:	b003      	add	sp, #12
 80037fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	3b04      	subs	r3, #4
 8003802:	2a00      	cmp	r2, #0
 8003804:	d1cc      	bne.n	80037a0 <quorem+0x9c>
 8003806:	3c01      	subs	r4, #1
 8003808:	e7c7      	b.n	800379a <quorem+0x96>
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	3b04      	subs	r3, #4
 800380e:	2a00      	cmp	r2, #0
 8003810:	d1f0      	bne.n	80037f4 <quorem+0xf0>
 8003812:	3c01      	subs	r4, #1
 8003814:	e7eb      	b.n	80037ee <quorem+0xea>
 8003816:	2000      	movs	r0, #0
 8003818:	e7ee      	b.n	80037f8 <quorem+0xf4>
 800381a:	0000      	movs	r0, r0
 800381c:	0000      	movs	r0, r0
	...

08003820 <_dtoa_r>:
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	ed2d 8b02 	vpush	{d8}
 8003828:	ec57 6b10 	vmov	r6, r7, d0
 800382c:	b095      	sub	sp, #84	; 0x54
 800382e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003834:	9105      	str	r1, [sp, #20]
 8003836:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800383a:	4604      	mov	r4, r0
 800383c:	9209      	str	r2, [sp, #36]	; 0x24
 800383e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003840:	b975      	cbnz	r5, 8003860 <_dtoa_r+0x40>
 8003842:	2010      	movs	r0, #16
 8003844:	f7ff f8b6 	bl	80029b4 <malloc>
 8003848:	4602      	mov	r2, r0
 800384a:	6260      	str	r0, [r4, #36]	; 0x24
 800384c:	b920      	cbnz	r0, 8003858 <_dtoa_r+0x38>
 800384e:	4bb2      	ldr	r3, [pc, #712]	; (8003b18 <_dtoa_r+0x2f8>)
 8003850:	21ea      	movs	r1, #234	; 0xea
 8003852:	48b2      	ldr	r0, [pc, #712]	; (8003b1c <_dtoa_r+0x2fc>)
 8003854:	f001 fd2e 	bl	80052b4 <__assert_func>
 8003858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800385c:	6005      	str	r5, [r0, #0]
 800385e:	60c5      	str	r5, [r0, #12]
 8003860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	b151      	cbz	r1, 800387c <_dtoa_r+0x5c>
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	604a      	str	r2, [r1, #4]
 800386a:	2301      	movs	r3, #1
 800386c:	4093      	lsls	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
 8003870:	4620      	mov	r0, r4
 8003872:	f001 f831 	bl	80048d8 <_Bfree>
 8003876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	1e3b      	subs	r3, r7, #0
 800387e:	bfb9      	ittee	lt
 8003880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003884:	9303      	strlt	r3, [sp, #12]
 8003886:	2300      	movge	r3, #0
 8003888:	f8c8 3000 	strge.w	r3, [r8]
 800388c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003890:	4ba3      	ldr	r3, [pc, #652]	; (8003b20 <_dtoa_r+0x300>)
 8003892:	bfbc      	itt	lt
 8003894:	2201      	movlt	r2, #1
 8003896:	f8c8 2000 	strlt.w	r2, [r8]
 800389a:	ea33 0309 	bics.w	r3, r3, r9
 800389e:	d11b      	bne.n	80038d8 <_dtoa_r+0xb8>
 80038a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80038ac:	4333      	orrs	r3, r6
 80038ae:	f000 857a 	beq.w	80043a6 <_dtoa_r+0xb86>
 80038b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038b4:	b963      	cbnz	r3, 80038d0 <_dtoa_r+0xb0>
 80038b6:	4b9b      	ldr	r3, [pc, #620]	; (8003b24 <_dtoa_r+0x304>)
 80038b8:	e024      	b.n	8003904 <_dtoa_r+0xe4>
 80038ba:	4b9b      	ldr	r3, [pc, #620]	; (8003b28 <_dtoa_r+0x308>)
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	9800      	ldr	r0, [sp, #0]
 80038c6:	b015      	add	sp, #84	; 0x54
 80038c8:	ecbd 8b02 	vpop	{d8}
 80038cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d0:	4b94      	ldr	r3, [pc, #592]	; (8003b24 <_dtoa_r+0x304>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	3303      	adds	r3, #3
 80038d6:	e7f3      	b.n	80038c0 <_dtoa_r+0xa0>
 80038d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	ec51 0b17 	vmov	r0, r1, d7
 80038e2:	2300      	movs	r3, #0
 80038e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80038e8:	f7fd f90e 	bl	8000b08 <__aeabi_dcmpeq>
 80038ec:	4680      	mov	r8, r0
 80038ee:	b158      	cbz	r0, 8003908 <_dtoa_r+0xe8>
 80038f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038f2:	2301      	movs	r3, #1
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8551 	beq.w	80043a0 <_dtoa_r+0xb80>
 80038fe:	488b      	ldr	r0, [pc, #556]	; (8003b2c <_dtoa_r+0x30c>)
 8003900:	6018      	str	r0, [r3, #0]
 8003902:	1e43      	subs	r3, r0, #1
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	e7dd      	b.n	80038c4 <_dtoa_r+0xa4>
 8003908:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800390c:	aa12      	add	r2, sp, #72	; 0x48
 800390e:	a913      	add	r1, sp, #76	; 0x4c
 8003910:	4620      	mov	r0, r4
 8003912:	f001 fac3 	bl	8004e9c <__d2b>
 8003916:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800391a:	4683      	mov	fp, r0
 800391c:	2d00      	cmp	r5, #0
 800391e:	d07c      	beq.n	8003a1a <_dtoa_r+0x1fa>
 8003920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003922:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800392a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800392e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003932:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800393a:	4b7d      	ldr	r3, [pc, #500]	; (8003b30 <_dtoa_r+0x310>)
 800393c:	2200      	movs	r2, #0
 800393e:	4630      	mov	r0, r6
 8003940:	4639      	mov	r1, r7
 8003942:	f7fc fcc1 	bl	80002c8 <__aeabi_dsub>
 8003946:	a36e      	add	r3, pc, #440	; (adr r3, 8003b00 <_dtoa_r+0x2e0>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fe74 	bl	8000638 <__aeabi_dmul>
 8003950:	a36d      	add	r3, pc, #436	; (adr r3, 8003b08 <_dtoa_r+0x2e8>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fcb9 	bl	80002cc <__adddf3>
 800395a:	4606      	mov	r6, r0
 800395c:	4628      	mov	r0, r5
 800395e:	460f      	mov	r7, r1
 8003960:	f7fc fe00 	bl	8000564 <__aeabi_i2d>
 8003964:	a36a      	add	r3, pc, #424	; (adr r3, 8003b10 <_dtoa_r+0x2f0>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc fe65 	bl	8000638 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4630      	mov	r0, r6
 8003974:	4639      	mov	r1, r7
 8003976:	f7fc fca9 	bl	80002cc <__adddf3>
 800397a:	4606      	mov	r6, r0
 800397c:	460f      	mov	r7, r1
 800397e:	f7fd f90b 	bl	8000b98 <__aeabi_d2iz>
 8003982:	2200      	movs	r2, #0
 8003984:	4682      	mov	sl, r0
 8003986:	2300      	movs	r3, #0
 8003988:	4630      	mov	r0, r6
 800398a:	4639      	mov	r1, r7
 800398c:	f7fd f8c6 	bl	8000b1c <__aeabi_dcmplt>
 8003990:	b148      	cbz	r0, 80039a6 <_dtoa_r+0x186>
 8003992:	4650      	mov	r0, sl
 8003994:	f7fc fde6 	bl	8000564 <__aeabi_i2d>
 8003998:	4632      	mov	r2, r6
 800399a:	463b      	mov	r3, r7
 800399c:	f7fd f8b4 	bl	8000b08 <__aeabi_dcmpeq>
 80039a0:	b908      	cbnz	r0, 80039a6 <_dtoa_r+0x186>
 80039a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80039a6:	f1ba 0f16 	cmp.w	sl, #22
 80039aa:	d854      	bhi.n	8003a56 <_dtoa_r+0x236>
 80039ac:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <_dtoa_r+0x314>)
 80039ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039ba:	f7fd f8af 	bl	8000b1c <__aeabi_dcmplt>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d04b      	beq.n	8003a5a <_dtoa_r+0x23a>
 80039c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80039c6:	2300      	movs	r3, #0
 80039c8:	930e      	str	r3, [sp, #56]	; 0x38
 80039ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80039cc:	1b5d      	subs	r5, r3, r5
 80039ce:	1e6b      	subs	r3, r5, #1
 80039d0:	9304      	str	r3, [sp, #16]
 80039d2:	bf43      	ittte	mi
 80039d4:	2300      	movmi	r3, #0
 80039d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80039da:	9304      	strmi	r3, [sp, #16]
 80039dc:	f04f 0800 	movpl.w	r8, #0
 80039e0:	f1ba 0f00 	cmp.w	sl, #0
 80039e4:	db3b      	blt.n	8003a5e <_dtoa_r+0x23e>
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80039ec:	4453      	add	r3, sl
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	2300      	movs	r3, #0
 80039f2:	9306      	str	r3, [sp, #24]
 80039f4:	9b05      	ldr	r3, [sp, #20]
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d869      	bhi.n	8003ace <_dtoa_r+0x2ae>
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	bfc4      	itt	gt
 80039fe:	3b04      	subgt	r3, #4
 8003a00:	9305      	strgt	r3, [sp, #20]
 8003a02:	9b05      	ldr	r3, [sp, #20]
 8003a04:	f1a3 0302 	sub.w	r3, r3, #2
 8003a08:	bfcc      	ite	gt
 8003a0a:	2500      	movgt	r5, #0
 8003a0c:	2501      	movle	r5, #1
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d869      	bhi.n	8003ae6 <_dtoa_r+0x2c6>
 8003a12:	e8df f003 	tbb	[pc, r3]
 8003a16:	4e2c      	.short	0x4e2c
 8003a18:	5a4c      	.short	0x5a4c
 8003a1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003a1e:	441d      	add	r5, r3
 8003a20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	bfc1      	itttt	gt
 8003a28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003a2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003a30:	fa09 f303 	lslgt.w	r3, r9, r3
 8003a34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003a38:	bfda      	itte	le
 8003a3a:	f1c3 0320 	rsble	r3, r3, #32
 8003a3e:	fa06 f003 	lslle.w	r0, r6, r3
 8003a42:	4318      	orrgt	r0, r3
 8003a44:	f7fc fd7e 	bl	8000544 <__aeabi_ui2d>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003a50:	3d01      	subs	r5, #1
 8003a52:	9310      	str	r3, [sp, #64]	; 0x40
 8003a54:	e771      	b.n	800393a <_dtoa_r+0x11a>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e7b6      	b.n	80039c8 <_dtoa_r+0x1a8>
 8003a5a:	900e      	str	r0, [sp, #56]	; 0x38
 8003a5c:	e7b5      	b.n	80039ca <_dtoa_r+0x1aa>
 8003a5e:	f1ca 0300 	rsb	r3, sl, #0
 8003a62:	9306      	str	r3, [sp, #24]
 8003a64:	2300      	movs	r3, #0
 8003a66:	eba8 080a 	sub.w	r8, r8, sl
 8003a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8003a6c:	e7c2      	b.n	80039f4 <_dtoa_r+0x1d4>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9308      	str	r3, [sp, #32]
 8003a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dc39      	bgt.n	8003aec <_dtoa_r+0x2cc>
 8003a78:	f04f 0901 	mov.w	r9, #1
 8003a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003a80:	464b      	mov	r3, r9
 8003a82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003a88:	2200      	movs	r2, #0
 8003a8a:	6042      	str	r2, [r0, #4]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	f102 0614 	add.w	r6, r2, #20
 8003a92:	429e      	cmp	r6, r3
 8003a94:	6841      	ldr	r1, [r0, #4]
 8003a96:	d92f      	bls.n	8003af8 <_dtoa_r+0x2d8>
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f000 fedd 	bl	8004858 <_Balloc>
 8003a9e:	9000      	str	r0, [sp, #0]
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d14b      	bne.n	8003b3c <_dtoa_r+0x31c>
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <_dtoa_r+0x318>)
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003aac:	e6d1      	b.n	8003852 <_dtoa_r+0x32>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e7de      	b.n	8003a70 <_dtoa_r+0x250>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9308      	str	r3, [sp, #32]
 8003ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab8:	eb0a 0903 	add.w	r9, sl, r3
 8003abc:	f109 0301 	add.w	r3, r9, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	bfb8      	it	lt
 8003ac6:	2301      	movlt	r3, #1
 8003ac8:	e7dd      	b.n	8003a86 <_dtoa_r+0x266>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e7f2      	b.n	8003ab4 <_dtoa_r+0x294>
 8003ace:	2501      	movs	r5, #1
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	9508      	str	r5, [sp, #32]
 8003ad6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ae0:	2312      	movs	r3, #18
 8003ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae4:	e7cf      	b.n	8003a86 <_dtoa_r+0x266>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	9308      	str	r3, [sp, #32]
 8003aea:	e7f4      	b.n	8003ad6 <_dtoa_r+0x2b6>
 8003aec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003af0:	f8cd 9004 	str.w	r9, [sp, #4]
 8003af4:	464b      	mov	r3, r9
 8003af6:	e7c6      	b.n	8003a86 <_dtoa_r+0x266>
 8003af8:	3101      	adds	r1, #1
 8003afa:	6041      	str	r1, [r0, #4]
 8003afc:	0052      	lsls	r2, r2, #1
 8003afe:	e7c6      	b.n	8003a8e <_dtoa_r+0x26e>
 8003b00:	636f4361 	.word	0x636f4361
 8003b04:	3fd287a7 	.word	0x3fd287a7
 8003b08:	8b60c8b3 	.word	0x8b60c8b3
 8003b0c:	3fc68a28 	.word	0x3fc68a28
 8003b10:	509f79fb 	.word	0x509f79fb
 8003b14:	3fd34413 	.word	0x3fd34413
 8003b18:	080063d9 	.word	0x080063d9
 8003b1c:	080063f0 	.word	0x080063f0
 8003b20:	7ff00000 	.word	0x7ff00000
 8003b24:	080063d5 	.word	0x080063d5
 8003b28:	080063cc 	.word	0x080063cc
 8003b2c:	080063a9 	.word	0x080063a9
 8003b30:	3ff80000 	.word	0x3ff80000
 8003b34:	08006548 	.word	0x08006548
 8003b38:	0800644f 	.word	0x0800644f
 8003b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3e:	9a00      	ldr	r2, [sp, #0]
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	9b01      	ldr	r3, [sp, #4]
 8003b44:	2b0e      	cmp	r3, #14
 8003b46:	f200 80ad 	bhi.w	8003ca4 <_dtoa_r+0x484>
 8003b4a:	2d00      	cmp	r5, #0
 8003b4c:	f000 80aa 	beq.w	8003ca4 <_dtoa_r+0x484>
 8003b50:	f1ba 0f00 	cmp.w	sl, #0
 8003b54:	dd36      	ble.n	8003bc4 <_dtoa_r+0x3a4>
 8003b56:	4ac3      	ldr	r2, [pc, #780]	; (8003e64 <_dtoa_r+0x644>)
 8003b58:	f00a 030f 	and.w	r3, sl, #15
 8003b5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b60:	ed93 7b00 	vldr	d7, [r3]
 8003b64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003b68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8003b70:	eef0 8a67 	vmov.f32	s17, s15
 8003b74:	d016      	beq.n	8003ba4 <_dtoa_r+0x384>
 8003b76:	4bbc      	ldr	r3, [pc, #752]	; (8003e68 <_dtoa_r+0x648>)
 8003b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b80:	f7fc fe84 	bl	800088c <__aeabi_ddiv>
 8003b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b88:	f007 070f 	and.w	r7, r7, #15
 8003b8c:	2503      	movs	r5, #3
 8003b8e:	4eb6      	ldr	r6, [pc, #728]	; (8003e68 <_dtoa_r+0x648>)
 8003b90:	b957      	cbnz	r7, 8003ba8 <_dtoa_r+0x388>
 8003b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b96:	ec53 2b18 	vmov	r2, r3, d8
 8003b9a:	f7fc fe77 	bl	800088c <__aeabi_ddiv>
 8003b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ba2:	e029      	b.n	8003bf8 <_dtoa_r+0x3d8>
 8003ba4:	2502      	movs	r5, #2
 8003ba6:	e7f2      	b.n	8003b8e <_dtoa_r+0x36e>
 8003ba8:	07f9      	lsls	r1, r7, #31
 8003baa:	d508      	bpl.n	8003bbe <_dtoa_r+0x39e>
 8003bac:	ec51 0b18 	vmov	r0, r1, d8
 8003bb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003bb4:	f7fc fd40 	bl	8000638 <__aeabi_dmul>
 8003bb8:	ec41 0b18 	vmov	d8, r0, r1
 8003bbc:	3501      	adds	r5, #1
 8003bbe:	107f      	asrs	r7, r7, #1
 8003bc0:	3608      	adds	r6, #8
 8003bc2:	e7e5      	b.n	8003b90 <_dtoa_r+0x370>
 8003bc4:	f000 80a6 	beq.w	8003d14 <_dtoa_r+0x4f4>
 8003bc8:	f1ca 0600 	rsb	r6, sl, #0
 8003bcc:	4ba5      	ldr	r3, [pc, #660]	; (8003e64 <_dtoa_r+0x644>)
 8003bce:	4fa6      	ldr	r7, [pc, #664]	; (8003e68 <_dtoa_r+0x648>)
 8003bd0:	f006 020f 	and.w	r2, r6, #15
 8003bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003be0:	f7fc fd2a 	bl	8000638 <__aeabi_dmul>
 8003be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003be8:	1136      	asrs	r6, r6, #4
 8003bea:	2300      	movs	r3, #0
 8003bec:	2502      	movs	r5, #2
 8003bee:	2e00      	cmp	r6, #0
 8003bf0:	f040 8085 	bne.w	8003cfe <_dtoa_r+0x4de>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1d2      	bne.n	8003b9e <_dtoa_r+0x37e>
 8003bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 808c 	beq.w	8003d18 <_dtoa_r+0x4f8>
 8003c00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c04:	4b99      	ldr	r3, [pc, #612]	; (8003e6c <_dtoa_r+0x64c>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	4630      	mov	r0, r6
 8003c0a:	4639      	mov	r1, r7
 8003c0c:	f7fc ff86 	bl	8000b1c <__aeabi_dcmplt>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f000 8081 	beq.w	8003d18 <_dtoa_r+0x4f8>
 8003c16:	9b01      	ldr	r3, [sp, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d07d      	beq.n	8003d18 <_dtoa_r+0x4f8>
 8003c1c:	f1b9 0f00 	cmp.w	r9, #0
 8003c20:	dd3c      	ble.n	8003c9c <_dtoa_r+0x47c>
 8003c22:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4b91      	ldr	r3, [pc, #580]	; (8003e70 <_dtoa_r+0x650>)
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	4639      	mov	r1, r7
 8003c30:	f7fc fd02 	bl	8000638 <__aeabi_dmul>
 8003c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c38:	3501      	adds	r5, #1
 8003c3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003c3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c42:	4628      	mov	r0, r5
 8003c44:	f7fc fc8e 	bl	8000564 <__aeabi_i2d>
 8003c48:	4632      	mov	r2, r6
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	f7fc fcf4 	bl	8000638 <__aeabi_dmul>
 8003c50:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <_dtoa_r+0x654>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	f7fc fb3a 	bl	80002cc <__adddf3>
 8003c58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c60:	9303      	str	r3, [sp, #12]
 8003c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d15c      	bne.n	8003d22 <_dtoa_r+0x502>
 8003c68:	4b83      	ldr	r3, [pc, #524]	; (8003e78 <_dtoa_r+0x658>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	4639      	mov	r1, r7
 8003c70:	f7fc fb2a 	bl	80002c8 <__aeabi_dsub>
 8003c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c78:	4606      	mov	r6, r0
 8003c7a:	460f      	mov	r7, r1
 8003c7c:	f7fc ff6c 	bl	8000b58 <__aeabi_dcmpgt>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	f040 8296 	bne.w	80041b2 <_dtoa_r+0x992>
 8003c86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003c90:	4639      	mov	r1, r7
 8003c92:	f7fc ff43 	bl	8000b1c <__aeabi_dcmplt>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	f040 8288 	bne.w	80041ac <_dtoa_r+0x98c>
 8003c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f2c0 8158 	blt.w	8003f5c <_dtoa_r+0x73c>
 8003cac:	f1ba 0f0e 	cmp.w	sl, #14
 8003cb0:	f300 8154 	bgt.w	8003f5c <_dtoa_r+0x73c>
 8003cb4:	4b6b      	ldr	r3, [pc, #428]	; (8003e64 <_dtoa_r+0x644>)
 8003cb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003cba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f280 80e3 	bge.w	8003e8c <_dtoa_r+0x66c>
 8003cc6:	9b01      	ldr	r3, [sp, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f300 80df 	bgt.w	8003e8c <_dtoa_r+0x66c>
 8003cce:	f040 826d 	bne.w	80041ac <_dtoa_r+0x98c>
 8003cd2:	4b69      	ldr	r3, [pc, #420]	; (8003e78 <_dtoa_r+0x658>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	4649      	mov	r1, r9
 8003cda:	f7fc fcad 	bl	8000638 <__aeabi_dmul>
 8003cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ce2:	f7fc ff2f 	bl	8000b44 <__aeabi_dcmpge>
 8003ce6:	9e01      	ldr	r6, [sp, #4]
 8003ce8:	4637      	mov	r7, r6
 8003cea:	2800      	cmp	r0, #0
 8003cec:	f040 8243 	bne.w	8004176 <_dtoa_r+0x956>
 8003cf0:	9d00      	ldr	r5, [sp, #0]
 8003cf2:	2331      	movs	r3, #49	; 0x31
 8003cf4:	f805 3b01 	strb.w	r3, [r5], #1
 8003cf8:	f10a 0a01 	add.w	sl, sl, #1
 8003cfc:	e23f      	b.n	800417e <_dtoa_r+0x95e>
 8003cfe:	07f2      	lsls	r2, r6, #31
 8003d00:	d505      	bpl.n	8003d0e <_dtoa_r+0x4ee>
 8003d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d06:	f7fc fc97 	bl	8000638 <__aeabi_dmul>
 8003d0a:	3501      	adds	r5, #1
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	1076      	asrs	r6, r6, #1
 8003d10:	3708      	adds	r7, #8
 8003d12:	e76c      	b.n	8003bee <_dtoa_r+0x3ce>
 8003d14:	2502      	movs	r5, #2
 8003d16:	e76f      	b.n	8003bf8 <_dtoa_r+0x3d8>
 8003d18:	9b01      	ldr	r3, [sp, #4]
 8003d1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8003d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d20:	e78d      	b.n	8003c3e <_dtoa_r+0x41e>
 8003d22:	9900      	ldr	r1, [sp, #0]
 8003d24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d28:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <_dtoa_r+0x644>)
 8003d2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d2e:	4401      	add	r1, r0
 8003d30:	9102      	str	r1, [sp, #8]
 8003d32:	9908      	ldr	r1, [sp, #32]
 8003d34:	eeb0 8a47 	vmov.f32	s16, s14
 8003d38:	eef0 8a67 	vmov.f32	s17, s15
 8003d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d045      	beq.n	8003dd4 <_dtoa_r+0x5b4>
 8003d48:	494c      	ldr	r1, [pc, #304]	; (8003e7c <_dtoa_r+0x65c>)
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f7fc fd9e 	bl	800088c <__aeabi_ddiv>
 8003d50:	ec53 2b18 	vmov	r2, r3, d8
 8003d54:	f7fc fab8 	bl	80002c8 <__aeabi_dsub>
 8003d58:	9d00      	ldr	r5, [sp, #0]
 8003d5a:	ec41 0b18 	vmov	d8, r0, r1
 8003d5e:	4639      	mov	r1, r7
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7fc ff19 	bl	8000b98 <__aeabi_d2iz>
 8003d66:	900c      	str	r0, [sp, #48]	; 0x30
 8003d68:	f7fc fbfc 	bl	8000564 <__aeabi_i2d>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4630      	mov	r0, r6
 8003d72:	4639      	mov	r1, r7
 8003d74:	f7fc faa8 	bl	80002c8 <__aeabi_dsub>
 8003d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d7a:	3330      	adds	r3, #48	; 0x30
 8003d7c:	f805 3b01 	strb.w	r3, [r5], #1
 8003d80:	ec53 2b18 	vmov	r2, r3, d8
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	f7fc fec8 	bl	8000b1c <__aeabi_dcmplt>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d165      	bne.n	8003e5c <_dtoa_r+0x63c>
 8003d90:	4632      	mov	r2, r6
 8003d92:	463b      	mov	r3, r7
 8003d94:	4935      	ldr	r1, [pc, #212]	; (8003e6c <_dtoa_r+0x64c>)
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7fc fa96 	bl	80002c8 <__aeabi_dsub>
 8003d9c:	ec53 2b18 	vmov	r2, r3, d8
 8003da0:	f7fc febc 	bl	8000b1c <__aeabi_dcmplt>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	f040 80b9 	bne.w	8003f1c <_dtoa_r+0x6fc>
 8003daa:	9b02      	ldr	r3, [sp, #8]
 8003dac:	429d      	cmp	r5, r3
 8003dae:	f43f af75 	beq.w	8003c9c <_dtoa_r+0x47c>
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <_dtoa_r+0x650>)
 8003db4:	ec51 0b18 	vmov	r0, r1, d8
 8003db8:	2200      	movs	r2, #0
 8003dba:	f7fc fc3d 	bl	8000638 <__aeabi_dmul>
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <_dtoa_r+0x650>)
 8003dc0:	ec41 0b18 	vmov	d8, r0, r1
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	4639      	mov	r1, r7
 8003dca:	f7fc fc35 	bl	8000638 <__aeabi_dmul>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	460f      	mov	r7, r1
 8003dd2:	e7c4      	b.n	8003d5e <_dtoa_r+0x53e>
 8003dd4:	ec51 0b17 	vmov	r0, r1, d7
 8003dd8:	f7fc fc2e 	bl	8000638 <__aeabi_dmul>
 8003ddc:	9b02      	ldr	r3, [sp, #8]
 8003dde:	9d00      	ldr	r5, [sp, #0]
 8003de0:	930c      	str	r3, [sp, #48]	; 0x30
 8003de2:	ec41 0b18 	vmov	d8, r0, r1
 8003de6:	4639      	mov	r1, r7
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7fc fed5 	bl	8000b98 <__aeabi_d2iz>
 8003dee:	9011      	str	r0, [sp, #68]	; 0x44
 8003df0:	f7fc fbb8 	bl	8000564 <__aeabi_i2d>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4630      	mov	r0, r6
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f7fc fa64 	bl	80002c8 <__aeabi_dsub>
 8003e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e02:	3330      	adds	r3, #48	; 0x30
 8003e04:	f805 3b01 	strb.w	r3, [r5], #1
 8003e08:	9b02      	ldr	r3, [sp, #8]
 8003e0a:	429d      	cmp	r5, r3
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	460f      	mov	r7, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	d134      	bne.n	8003e80 <_dtoa_r+0x660>
 8003e16:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <_dtoa_r+0x65c>)
 8003e18:	ec51 0b18 	vmov	r0, r1, d8
 8003e1c:	f7fc fa56 	bl	80002cc <__adddf3>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4630      	mov	r0, r6
 8003e26:	4639      	mov	r1, r7
 8003e28:	f7fc fe96 	bl	8000b58 <__aeabi_dcmpgt>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d175      	bne.n	8003f1c <_dtoa_r+0x6fc>
 8003e30:	ec53 2b18 	vmov	r2, r3, d8
 8003e34:	4911      	ldr	r1, [pc, #68]	; (8003e7c <_dtoa_r+0x65c>)
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7fc fa46 	bl	80002c8 <__aeabi_dsub>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4630      	mov	r0, r6
 8003e42:	4639      	mov	r1, r7
 8003e44:	f7fc fe6a 	bl	8000b1c <__aeabi_dcmplt>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f43f af27 	beq.w	8003c9c <_dtoa_r+0x47c>
 8003e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e50:	1e6b      	subs	r3, r5, #1
 8003e52:	930c      	str	r3, [sp, #48]	; 0x30
 8003e54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e58:	2b30      	cmp	r3, #48	; 0x30
 8003e5a:	d0f8      	beq.n	8003e4e <_dtoa_r+0x62e>
 8003e5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003e60:	e04a      	b.n	8003ef8 <_dtoa_r+0x6d8>
 8003e62:	bf00      	nop
 8003e64:	08006548 	.word	0x08006548
 8003e68:	08006520 	.word	0x08006520
 8003e6c:	3ff00000 	.word	0x3ff00000
 8003e70:	40240000 	.word	0x40240000
 8003e74:	401c0000 	.word	0x401c0000
 8003e78:	40140000 	.word	0x40140000
 8003e7c:	3fe00000 	.word	0x3fe00000
 8003e80:	4baf      	ldr	r3, [pc, #700]	; (8004140 <_dtoa_r+0x920>)
 8003e82:	f7fc fbd9 	bl	8000638 <__aeabi_dmul>
 8003e86:	4606      	mov	r6, r0
 8003e88:	460f      	mov	r7, r1
 8003e8a:	e7ac      	b.n	8003de6 <_dtoa_r+0x5c6>
 8003e8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e90:	9d00      	ldr	r5, [sp, #0]
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	4630      	mov	r0, r6
 8003e98:	4639      	mov	r1, r7
 8003e9a:	f7fc fcf7 	bl	800088c <__aeabi_ddiv>
 8003e9e:	f7fc fe7b 	bl	8000b98 <__aeabi_d2iz>
 8003ea2:	9002      	str	r0, [sp, #8]
 8003ea4:	f7fc fb5e 	bl	8000564 <__aeabi_i2d>
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	f7fc fbc4 	bl	8000638 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc fa06 	bl	80002c8 <__aeabi_dsub>
 8003ebc:	9e02      	ldr	r6, [sp, #8]
 8003ebe:	9f01      	ldr	r7, [sp, #4]
 8003ec0:	3630      	adds	r6, #48	; 0x30
 8003ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8003ec6:	9e00      	ldr	r6, [sp, #0]
 8003ec8:	1bae      	subs	r6, r5, r6
 8003eca:	42b7      	cmp	r7, r6
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	d137      	bne.n	8003f42 <_dtoa_r+0x722>
 8003ed2:	f7fc f9fb 	bl	80002cc <__adddf3>
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	464b      	mov	r3, r9
 8003eda:	4606      	mov	r6, r0
 8003edc:	460f      	mov	r7, r1
 8003ede:	f7fc fe3b 	bl	8000b58 <__aeabi_dcmpgt>
 8003ee2:	b9c8      	cbnz	r0, 8003f18 <_dtoa_r+0x6f8>
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4639      	mov	r1, r7
 8003eec:	f7fc fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8003ef0:	b110      	cbz	r0, 8003ef8 <_dtoa_r+0x6d8>
 8003ef2:	9b02      	ldr	r3, [sp, #8]
 8003ef4:	07d9      	lsls	r1, r3, #31
 8003ef6:	d40f      	bmi.n	8003f18 <_dtoa_r+0x6f8>
 8003ef8:	4620      	mov	r0, r4
 8003efa:	4659      	mov	r1, fp
 8003efc:	f000 fcec 	bl	80048d8 <_Bfree>
 8003f00:	2300      	movs	r3, #0
 8003f02:	702b      	strb	r3, [r5, #0]
 8003f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f06:	f10a 0001 	add.w	r0, sl, #1
 8003f0a:	6018      	str	r0, [r3, #0]
 8003f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f43f acd8 	beq.w	80038c4 <_dtoa_r+0xa4>
 8003f14:	601d      	str	r5, [r3, #0]
 8003f16:	e4d5      	b.n	80038c4 <_dtoa_r+0xa4>
 8003f18:	f8cd a01c 	str.w	sl, [sp, #28]
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	461d      	mov	r5, r3
 8003f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f24:	2a39      	cmp	r2, #57	; 0x39
 8003f26:	d108      	bne.n	8003f3a <_dtoa_r+0x71a>
 8003f28:	9a00      	ldr	r2, [sp, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d1f7      	bne.n	8003f1e <_dtoa_r+0x6fe>
 8003f2e:	9a07      	ldr	r2, [sp, #28]
 8003f30:	9900      	ldr	r1, [sp, #0]
 8003f32:	3201      	adds	r2, #1
 8003f34:	9207      	str	r2, [sp, #28]
 8003f36:	2230      	movs	r2, #48	; 0x30
 8003f38:	700a      	strb	r2, [r1, #0]
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e78c      	b.n	8003e5c <_dtoa_r+0x63c>
 8003f42:	4b7f      	ldr	r3, [pc, #508]	; (8004140 <_dtoa_r+0x920>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	f7fc fb77 	bl	8000638 <__aeabi_dmul>
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460f      	mov	r7, r1
 8003f52:	f7fc fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d09b      	beq.n	8003e92 <_dtoa_r+0x672>
 8003f5a:	e7cd      	b.n	8003ef8 <_dtoa_r+0x6d8>
 8003f5c:	9a08      	ldr	r2, [sp, #32]
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	f000 80c4 	beq.w	80040ec <_dtoa_r+0x8cc>
 8003f64:	9a05      	ldr	r2, [sp, #20]
 8003f66:	2a01      	cmp	r2, #1
 8003f68:	f300 80a8 	bgt.w	80040bc <_dtoa_r+0x89c>
 8003f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	f000 80a0 	beq.w	80040b4 <_dtoa_r+0x894>
 8003f74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f78:	9e06      	ldr	r6, [sp, #24]
 8003f7a:	4645      	mov	r5, r8
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	441a      	add	r2, r3
 8003f82:	4620      	mov	r0, r4
 8003f84:	4498      	add	r8, r3
 8003f86:	9204      	str	r2, [sp, #16]
 8003f88:	f000 fd62 	bl	8004a50 <__i2b>
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	dd0b      	ble.n	8003faa <_dtoa_r+0x78a>
 8003f92:	9b04      	ldr	r3, [sp, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dd08      	ble.n	8003faa <_dtoa_r+0x78a>
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	9a04      	ldr	r2, [sp, #16]
 8003f9c:	bfa8      	it	ge
 8003f9e:	462b      	movge	r3, r5
 8003fa0:	eba8 0803 	sub.w	r8, r8, r3
 8003fa4:	1aed      	subs	r5, r5, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	9304      	str	r3, [sp, #16]
 8003faa:	9b06      	ldr	r3, [sp, #24]
 8003fac:	b1fb      	cbz	r3, 8003fee <_dtoa_r+0x7ce>
 8003fae:	9b08      	ldr	r3, [sp, #32]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 809f 	beq.w	80040f4 <_dtoa_r+0x8d4>
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	dd11      	ble.n	8003fde <_dtoa_r+0x7be>
 8003fba:	4639      	mov	r1, r7
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 fe02 	bl	8004bc8 <__pow5mult>
 8003fc4:	465a      	mov	r2, fp
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	4607      	mov	r7, r0
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f000 fd56 	bl	8004a7c <__multiply>
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	9007      	str	r0, [sp, #28]
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f000 fc7f 	bl	80048d8 <_Bfree>
 8003fda:	9b07      	ldr	r3, [sp, #28]
 8003fdc:	469b      	mov	fp, r3
 8003fde:	9b06      	ldr	r3, [sp, #24]
 8003fe0:	1b9a      	subs	r2, r3, r6
 8003fe2:	d004      	beq.n	8003fee <_dtoa_r+0x7ce>
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 fdee 	bl	8004bc8 <__pow5mult>
 8003fec:	4683      	mov	fp, r0
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 fd2d 	bl	8004a50 <__i2b>
 8003ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	4606      	mov	r6, r0
 8003ffc:	dd7c      	ble.n	80040f8 <_dtoa_r+0x8d8>
 8003ffe:	461a      	mov	r2, r3
 8004000:	4601      	mov	r1, r0
 8004002:	4620      	mov	r0, r4
 8004004:	f000 fde0 	bl	8004bc8 <__pow5mult>
 8004008:	9b05      	ldr	r3, [sp, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	4606      	mov	r6, r0
 800400e:	dd76      	ble.n	80040fe <_dtoa_r+0x8de>
 8004010:	2300      	movs	r3, #0
 8004012:	9306      	str	r3, [sp, #24]
 8004014:	6933      	ldr	r3, [r6, #16]
 8004016:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800401a:	6918      	ldr	r0, [r3, #16]
 800401c:	f000 fcc8 	bl	80049b0 <__hi0bits>
 8004020:	f1c0 0020 	rsb	r0, r0, #32
 8004024:	9b04      	ldr	r3, [sp, #16]
 8004026:	4418      	add	r0, r3
 8004028:	f010 001f 	ands.w	r0, r0, #31
 800402c:	f000 8086 	beq.w	800413c <_dtoa_r+0x91c>
 8004030:	f1c0 0320 	rsb	r3, r0, #32
 8004034:	2b04      	cmp	r3, #4
 8004036:	dd7f      	ble.n	8004138 <_dtoa_r+0x918>
 8004038:	f1c0 001c 	rsb	r0, r0, #28
 800403c:	9b04      	ldr	r3, [sp, #16]
 800403e:	4403      	add	r3, r0
 8004040:	4480      	add	r8, r0
 8004042:	4405      	add	r5, r0
 8004044:	9304      	str	r3, [sp, #16]
 8004046:	f1b8 0f00 	cmp.w	r8, #0
 800404a:	dd05      	ble.n	8004058 <_dtoa_r+0x838>
 800404c:	4659      	mov	r1, fp
 800404e:	4642      	mov	r2, r8
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fe13 	bl	8004c7c <__lshift>
 8004056:	4683      	mov	fp, r0
 8004058:	9b04      	ldr	r3, [sp, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	dd05      	ble.n	800406a <_dtoa_r+0x84a>
 800405e:	4631      	mov	r1, r6
 8004060:	461a      	mov	r2, r3
 8004062:	4620      	mov	r0, r4
 8004064:	f000 fe0a 	bl	8004c7c <__lshift>
 8004068:	4606      	mov	r6, r0
 800406a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d069      	beq.n	8004144 <_dtoa_r+0x924>
 8004070:	4631      	mov	r1, r6
 8004072:	4658      	mov	r0, fp
 8004074:	f000 fe6e 	bl	8004d54 <__mcmp>
 8004078:	2800      	cmp	r0, #0
 800407a:	da63      	bge.n	8004144 <_dtoa_r+0x924>
 800407c:	2300      	movs	r3, #0
 800407e:	4659      	mov	r1, fp
 8004080:	220a      	movs	r2, #10
 8004082:	4620      	mov	r0, r4
 8004084:	f000 fc4a 	bl	800491c <__multadd>
 8004088:	9b08      	ldr	r3, [sp, #32]
 800408a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800408e:	4683      	mov	fp, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 818f 	beq.w	80043b4 <_dtoa_r+0xb94>
 8004096:	4639      	mov	r1, r7
 8004098:	2300      	movs	r3, #0
 800409a:	220a      	movs	r2, #10
 800409c:	4620      	mov	r0, r4
 800409e:	f000 fc3d 	bl	800491c <__multadd>
 80040a2:	f1b9 0f00 	cmp.w	r9, #0
 80040a6:	4607      	mov	r7, r0
 80040a8:	f300 808e 	bgt.w	80041c8 <_dtoa_r+0x9a8>
 80040ac:	9b05      	ldr	r3, [sp, #20]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	dc50      	bgt.n	8004154 <_dtoa_r+0x934>
 80040b2:	e089      	b.n	80041c8 <_dtoa_r+0x9a8>
 80040b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80040ba:	e75d      	b.n	8003f78 <_dtoa_r+0x758>
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	1e5e      	subs	r6, r3, #1
 80040c0:	9b06      	ldr	r3, [sp, #24]
 80040c2:	42b3      	cmp	r3, r6
 80040c4:	bfbf      	itttt	lt
 80040c6:	9b06      	ldrlt	r3, [sp, #24]
 80040c8:	9606      	strlt	r6, [sp, #24]
 80040ca:	1af2      	sublt	r2, r6, r3
 80040cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80040ce:	bfb6      	itet	lt
 80040d0:	189b      	addlt	r3, r3, r2
 80040d2:	1b9e      	subge	r6, r3, r6
 80040d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	bfb8      	it	lt
 80040da:	2600      	movlt	r6, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bfb5      	itete	lt
 80040e0:	eba8 0503 	sublt.w	r5, r8, r3
 80040e4:	9b01      	ldrge	r3, [sp, #4]
 80040e6:	2300      	movlt	r3, #0
 80040e8:	4645      	movge	r5, r8
 80040ea:	e747      	b.n	8003f7c <_dtoa_r+0x75c>
 80040ec:	9e06      	ldr	r6, [sp, #24]
 80040ee:	9f08      	ldr	r7, [sp, #32]
 80040f0:	4645      	mov	r5, r8
 80040f2:	e74c      	b.n	8003f8e <_dtoa_r+0x76e>
 80040f4:	9a06      	ldr	r2, [sp, #24]
 80040f6:	e775      	b.n	8003fe4 <_dtoa_r+0x7c4>
 80040f8:	9b05      	ldr	r3, [sp, #20]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	dc18      	bgt.n	8004130 <_dtoa_r+0x910>
 80040fe:	9b02      	ldr	r3, [sp, #8]
 8004100:	b9b3      	cbnz	r3, 8004130 <_dtoa_r+0x910>
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	b9a3      	cbnz	r3, 8004134 <_dtoa_r+0x914>
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004110:	0d1b      	lsrs	r3, r3, #20
 8004112:	051b      	lsls	r3, r3, #20
 8004114:	b12b      	cbz	r3, 8004122 <_dtoa_r+0x902>
 8004116:	9b04      	ldr	r3, [sp, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	9304      	str	r3, [sp, #16]
 800411c:	f108 0801 	add.w	r8, r8, #1
 8004120:	2301      	movs	r3, #1
 8004122:	9306      	str	r3, [sp, #24]
 8004124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004126:	2b00      	cmp	r3, #0
 8004128:	f47f af74 	bne.w	8004014 <_dtoa_r+0x7f4>
 800412c:	2001      	movs	r0, #1
 800412e:	e779      	b.n	8004024 <_dtoa_r+0x804>
 8004130:	2300      	movs	r3, #0
 8004132:	e7f6      	b.n	8004122 <_dtoa_r+0x902>
 8004134:	9b02      	ldr	r3, [sp, #8]
 8004136:	e7f4      	b.n	8004122 <_dtoa_r+0x902>
 8004138:	d085      	beq.n	8004046 <_dtoa_r+0x826>
 800413a:	4618      	mov	r0, r3
 800413c:	301c      	adds	r0, #28
 800413e:	e77d      	b.n	800403c <_dtoa_r+0x81c>
 8004140:	40240000 	.word	0x40240000
 8004144:	9b01      	ldr	r3, [sp, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	dc38      	bgt.n	80041bc <_dtoa_r+0x99c>
 800414a:	9b05      	ldr	r3, [sp, #20]
 800414c:	2b02      	cmp	r3, #2
 800414e:	dd35      	ble.n	80041bc <_dtoa_r+0x99c>
 8004150:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004154:	f1b9 0f00 	cmp.w	r9, #0
 8004158:	d10d      	bne.n	8004176 <_dtoa_r+0x956>
 800415a:	4631      	mov	r1, r6
 800415c:	464b      	mov	r3, r9
 800415e:	2205      	movs	r2, #5
 8004160:	4620      	mov	r0, r4
 8004162:	f000 fbdb 	bl	800491c <__multadd>
 8004166:	4601      	mov	r1, r0
 8004168:	4606      	mov	r6, r0
 800416a:	4658      	mov	r0, fp
 800416c:	f000 fdf2 	bl	8004d54 <__mcmp>
 8004170:	2800      	cmp	r0, #0
 8004172:	f73f adbd 	bgt.w	8003cf0 <_dtoa_r+0x4d0>
 8004176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004178:	9d00      	ldr	r5, [sp, #0]
 800417a:	ea6f 0a03 	mvn.w	sl, r3
 800417e:	f04f 0800 	mov.w	r8, #0
 8004182:	4631      	mov	r1, r6
 8004184:	4620      	mov	r0, r4
 8004186:	f000 fba7 	bl	80048d8 <_Bfree>
 800418a:	2f00      	cmp	r7, #0
 800418c:	f43f aeb4 	beq.w	8003ef8 <_dtoa_r+0x6d8>
 8004190:	f1b8 0f00 	cmp.w	r8, #0
 8004194:	d005      	beq.n	80041a2 <_dtoa_r+0x982>
 8004196:	45b8      	cmp	r8, r7
 8004198:	d003      	beq.n	80041a2 <_dtoa_r+0x982>
 800419a:	4641      	mov	r1, r8
 800419c:	4620      	mov	r0, r4
 800419e:	f000 fb9b 	bl	80048d8 <_Bfree>
 80041a2:	4639      	mov	r1, r7
 80041a4:	4620      	mov	r0, r4
 80041a6:	f000 fb97 	bl	80048d8 <_Bfree>
 80041aa:	e6a5      	b.n	8003ef8 <_dtoa_r+0x6d8>
 80041ac:	2600      	movs	r6, #0
 80041ae:	4637      	mov	r7, r6
 80041b0:	e7e1      	b.n	8004176 <_dtoa_r+0x956>
 80041b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80041b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80041b8:	4637      	mov	r7, r6
 80041ba:	e599      	b.n	8003cf0 <_dtoa_r+0x4d0>
 80041bc:	9b08      	ldr	r3, [sp, #32]
 80041be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80fd 	beq.w	80043c2 <_dtoa_r+0xba2>
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	dd05      	ble.n	80041d8 <_dtoa_r+0x9b8>
 80041cc:	4639      	mov	r1, r7
 80041ce:	462a      	mov	r2, r5
 80041d0:	4620      	mov	r0, r4
 80041d2:	f000 fd53 	bl	8004c7c <__lshift>
 80041d6:	4607      	mov	r7, r0
 80041d8:	9b06      	ldr	r3, [sp, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d05c      	beq.n	8004298 <_dtoa_r+0xa78>
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4620      	mov	r0, r4
 80041e2:	f000 fb39 	bl	8004858 <_Balloc>
 80041e6:	4605      	mov	r5, r0
 80041e8:	b928      	cbnz	r0, 80041f6 <_dtoa_r+0x9d6>
 80041ea:	4b80      	ldr	r3, [pc, #512]	; (80043ec <_dtoa_r+0xbcc>)
 80041ec:	4602      	mov	r2, r0
 80041ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80041f2:	f7ff bb2e 	b.w	8003852 <_dtoa_r+0x32>
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	3202      	adds	r2, #2
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	f107 010c 	add.w	r1, r7, #12
 8004200:	300c      	adds	r0, #12
 8004202:	f7fe fbe7 	bl	80029d4 <memcpy>
 8004206:	2201      	movs	r2, #1
 8004208:	4629      	mov	r1, r5
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fd36 	bl	8004c7c <__lshift>
 8004210:	9b00      	ldr	r3, [sp, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	9b00      	ldr	r3, [sp, #0]
 8004218:	444b      	add	r3, r9
 800421a:	9307      	str	r3, [sp, #28]
 800421c:	9b02      	ldr	r3, [sp, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	46b8      	mov	r8, r7
 8004224:	9306      	str	r3, [sp, #24]
 8004226:	4607      	mov	r7, r0
 8004228:	9b01      	ldr	r3, [sp, #4]
 800422a:	4631      	mov	r1, r6
 800422c:	3b01      	subs	r3, #1
 800422e:	4658      	mov	r0, fp
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	f7ff fa67 	bl	8003704 <quorem>
 8004236:	4603      	mov	r3, r0
 8004238:	3330      	adds	r3, #48	; 0x30
 800423a:	9004      	str	r0, [sp, #16]
 800423c:	4641      	mov	r1, r8
 800423e:	4658      	mov	r0, fp
 8004240:	9308      	str	r3, [sp, #32]
 8004242:	f000 fd87 	bl	8004d54 <__mcmp>
 8004246:	463a      	mov	r2, r7
 8004248:	4681      	mov	r9, r0
 800424a:	4631      	mov	r1, r6
 800424c:	4620      	mov	r0, r4
 800424e:	f000 fd9d 	bl	8004d8c <__mdiff>
 8004252:	68c2      	ldr	r2, [r0, #12]
 8004254:	9b08      	ldr	r3, [sp, #32]
 8004256:	4605      	mov	r5, r0
 8004258:	bb02      	cbnz	r2, 800429c <_dtoa_r+0xa7c>
 800425a:	4601      	mov	r1, r0
 800425c:	4658      	mov	r0, fp
 800425e:	f000 fd79 	bl	8004d54 <__mcmp>
 8004262:	9b08      	ldr	r3, [sp, #32]
 8004264:	4602      	mov	r2, r0
 8004266:	4629      	mov	r1, r5
 8004268:	4620      	mov	r0, r4
 800426a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800426e:	f000 fb33 	bl	80048d8 <_Bfree>
 8004272:	9b05      	ldr	r3, [sp, #20]
 8004274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004276:	9d01      	ldr	r5, [sp, #4]
 8004278:	ea43 0102 	orr.w	r1, r3, r2
 800427c:	9b06      	ldr	r3, [sp, #24]
 800427e:	430b      	orrs	r3, r1
 8004280:	9b08      	ldr	r3, [sp, #32]
 8004282:	d10d      	bne.n	80042a0 <_dtoa_r+0xa80>
 8004284:	2b39      	cmp	r3, #57	; 0x39
 8004286:	d029      	beq.n	80042dc <_dtoa_r+0xabc>
 8004288:	f1b9 0f00 	cmp.w	r9, #0
 800428c:	dd01      	ble.n	8004292 <_dtoa_r+0xa72>
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	3331      	adds	r3, #49	; 0x31
 8004292:	9a02      	ldr	r2, [sp, #8]
 8004294:	7013      	strb	r3, [r2, #0]
 8004296:	e774      	b.n	8004182 <_dtoa_r+0x962>
 8004298:	4638      	mov	r0, r7
 800429a:	e7b9      	b.n	8004210 <_dtoa_r+0x9f0>
 800429c:	2201      	movs	r2, #1
 800429e:	e7e2      	b.n	8004266 <_dtoa_r+0xa46>
 80042a0:	f1b9 0f00 	cmp.w	r9, #0
 80042a4:	db06      	blt.n	80042b4 <_dtoa_r+0xa94>
 80042a6:	9905      	ldr	r1, [sp, #20]
 80042a8:	ea41 0909 	orr.w	r9, r1, r9
 80042ac:	9906      	ldr	r1, [sp, #24]
 80042ae:	ea59 0101 	orrs.w	r1, r9, r1
 80042b2:	d120      	bne.n	80042f6 <_dtoa_r+0xad6>
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	ddec      	ble.n	8004292 <_dtoa_r+0xa72>
 80042b8:	4659      	mov	r1, fp
 80042ba:	2201      	movs	r2, #1
 80042bc:	4620      	mov	r0, r4
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	f000 fcdc 	bl	8004c7c <__lshift>
 80042c4:	4631      	mov	r1, r6
 80042c6:	4683      	mov	fp, r0
 80042c8:	f000 fd44 	bl	8004d54 <__mcmp>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	9b01      	ldr	r3, [sp, #4]
 80042d0:	dc02      	bgt.n	80042d8 <_dtoa_r+0xab8>
 80042d2:	d1de      	bne.n	8004292 <_dtoa_r+0xa72>
 80042d4:	07da      	lsls	r2, r3, #31
 80042d6:	d5dc      	bpl.n	8004292 <_dtoa_r+0xa72>
 80042d8:	2b39      	cmp	r3, #57	; 0x39
 80042da:	d1d8      	bne.n	800428e <_dtoa_r+0xa6e>
 80042dc:	9a02      	ldr	r2, [sp, #8]
 80042de:	2339      	movs	r3, #57	; 0x39
 80042e0:	7013      	strb	r3, [r2, #0]
 80042e2:	462b      	mov	r3, r5
 80042e4:	461d      	mov	r5, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80042ec:	2a39      	cmp	r2, #57	; 0x39
 80042ee:	d050      	beq.n	8004392 <_dtoa_r+0xb72>
 80042f0:	3201      	adds	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e745      	b.n	8004182 <_dtoa_r+0x962>
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	dd03      	ble.n	8004302 <_dtoa_r+0xae2>
 80042fa:	2b39      	cmp	r3, #57	; 0x39
 80042fc:	d0ee      	beq.n	80042dc <_dtoa_r+0xabc>
 80042fe:	3301      	adds	r3, #1
 8004300:	e7c7      	b.n	8004292 <_dtoa_r+0xa72>
 8004302:	9a01      	ldr	r2, [sp, #4]
 8004304:	9907      	ldr	r1, [sp, #28]
 8004306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800430a:	428a      	cmp	r2, r1
 800430c:	d02a      	beq.n	8004364 <_dtoa_r+0xb44>
 800430e:	4659      	mov	r1, fp
 8004310:	2300      	movs	r3, #0
 8004312:	220a      	movs	r2, #10
 8004314:	4620      	mov	r0, r4
 8004316:	f000 fb01 	bl	800491c <__multadd>
 800431a:	45b8      	cmp	r8, r7
 800431c:	4683      	mov	fp, r0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	f04f 020a 	mov.w	r2, #10
 8004326:	4641      	mov	r1, r8
 8004328:	4620      	mov	r0, r4
 800432a:	d107      	bne.n	800433c <_dtoa_r+0xb1c>
 800432c:	f000 faf6 	bl	800491c <__multadd>
 8004330:	4680      	mov	r8, r0
 8004332:	4607      	mov	r7, r0
 8004334:	9b01      	ldr	r3, [sp, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	e775      	b.n	8004228 <_dtoa_r+0xa08>
 800433c:	f000 faee 	bl	800491c <__multadd>
 8004340:	4639      	mov	r1, r7
 8004342:	4680      	mov	r8, r0
 8004344:	2300      	movs	r3, #0
 8004346:	220a      	movs	r2, #10
 8004348:	4620      	mov	r0, r4
 800434a:	f000 fae7 	bl	800491c <__multadd>
 800434e:	4607      	mov	r7, r0
 8004350:	e7f0      	b.n	8004334 <_dtoa_r+0xb14>
 8004352:	f1b9 0f00 	cmp.w	r9, #0
 8004356:	9a00      	ldr	r2, [sp, #0]
 8004358:	bfcc      	ite	gt
 800435a:	464d      	movgt	r5, r9
 800435c:	2501      	movle	r5, #1
 800435e:	4415      	add	r5, r2
 8004360:	f04f 0800 	mov.w	r8, #0
 8004364:	4659      	mov	r1, fp
 8004366:	2201      	movs	r2, #1
 8004368:	4620      	mov	r0, r4
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	f000 fc86 	bl	8004c7c <__lshift>
 8004370:	4631      	mov	r1, r6
 8004372:	4683      	mov	fp, r0
 8004374:	f000 fcee 	bl	8004d54 <__mcmp>
 8004378:	2800      	cmp	r0, #0
 800437a:	dcb2      	bgt.n	80042e2 <_dtoa_r+0xac2>
 800437c:	d102      	bne.n	8004384 <_dtoa_r+0xb64>
 800437e:	9b01      	ldr	r3, [sp, #4]
 8004380:	07db      	lsls	r3, r3, #31
 8004382:	d4ae      	bmi.n	80042e2 <_dtoa_r+0xac2>
 8004384:	462b      	mov	r3, r5
 8004386:	461d      	mov	r5, r3
 8004388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800438c:	2a30      	cmp	r2, #48	; 0x30
 800438e:	d0fa      	beq.n	8004386 <_dtoa_r+0xb66>
 8004390:	e6f7      	b.n	8004182 <_dtoa_r+0x962>
 8004392:	9a00      	ldr	r2, [sp, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d1a5      	bne.n	80042e4 <_dtoa_r+0xac4>
 8004398:	f10a 0a01 	add.w	sl, sl, #1
 800439c:	2331      	movs	r3, #49	; 0x31
 800439e:	e779      	b.n	8004294 <_dtoa_r+0xa74>
 80043a0:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <_dtoa_r+0xbd0>)
 80043a2:	f7ff baaf 	b.w	8003904 <_dtoa_r+0xe4>
 80043a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f aa86 	bne.w	80038ba <_dtoa_r+0x9a>
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <_dtoa_r+0xbd4>)
 80043b0:	f7ff baa8 	b.w	8003904 <_dtoa_r+0xe4>
 80043b4:	f1b9 0f00 	cmp.w	r9, #0
 80043b8:	dc03      	bgt.n	80043c2 <_dtoa_r+0xba2>
 80043ba:	9b05      	ldr	r3, [sp, #20]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	f73f aec9 	bgt.w	8004154 <_dtoa_r+0x934>
 80043c2:	9d00      	ldr	r5, [sp, #0]
 80043c4:	4631      	mov	r1, r6
 80043c6:	4658      	mov	r0, fp
 80043c8:	f7ff f99c 	bl	8003704 <quorem>
 80043cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80043d0:	f805 3b01 	strb.w	r3, [r5], #1
 80043d4:	9a00      	ldr	r2, [sp, #0]
 80043d6:	1aaa      	subs	r2, r5, r2
 80043d8:	4591      	cmp	r9, r2
 80043da:	ddba      	ble.n	8004352 <_dtoa_r+0xb32>
 80043dc:	4659      	mov	r1, fp
 80043de:	2300      	movs	r3, #0
 80043e0:	220a      	movs	r2, #10
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 fa9a 	bl	800491c <__multadd>
 80043e8:	4683      	mov	fp, r0
 80043ea:	e7eb      	b.n	80043c4 <_dtoa_r+0xba4>
 80043ec:	0800644f 	.word	0x0800644f
 80043f0:	080063a8 	.word	0x080063a8
 80043f4:	080063cc 	.word	0x080063cc

080043f8 <__sflush_r>:
 80043f8:	898a      	ldrh	r2, [r1, #12]
 80043fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043fe:	4605      	mov	r5, r0
 8004400:	0710      	lsls	r0, r2, #28
 8004402:	460c      	mov	r4, r1
 8004404:	d458      	bmi.n	80044b8 <__sflush_r+0xc0>
 8004406:	684b      	ldr	r3, [r1, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	dc05      	bgt.n	8004418 <__sflush_r+0x20>
 800440c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	dc02      	bgt.n	8004418 <__sflush_r+0x20>
 8004412:	2000      	movs	r0, #0
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800441a:	2e00      	cmp	r6, #0
 800441c:	d0f9      	beq.n	8004412 <__sflush_r+0x1a>
 800441e:	2300      	movs	r3, #0
 8004420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004424:	682f      	ldr	r7, [r5, #0]
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	d032      	beq.n	8004490 <__sflush_r+0x98>
 800442a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	075a      	lsls	r2, r3, #29
 8004430:	d505      	bpl.n	800443e <__sflush_r+0x46>
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	1ac0      	subs	r0, r0, r3
 8004436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004438:	b10b      	cbz	r3, 800443e <__sflush_r+0x46>
 800443a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800443c:	1ac0      	subs	r0, r0, r3
 800443e:	2300      	movs	r3, #0
 8004440:	4602      	mov	r2, r0
 8004442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004444:	6a21      	ldr	r1, [r4, #32]
 8004446:	4628      	mov	r0, r5
 8004448:	47b0      	blx	r6
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	d106      	bne.n	800445e <__sflush_r+0x66>
 8004450:	6829      	ldr	r1, [r5, #0]
 8004452:	291d      	cmp	r1, #29
 8004454:	d82c      	bhi.n	80044b0 <__sflush_r+0xb8>
 8004456:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <__sflush_r+0x108>)
 8004458:	40ca      	lsrs	r2, r1
 800445a:	07d6      	lsls	r6, r2, #31
 800445c:	d528      	bpl.n	80044b0 <__sflush_r+0xb8>
 800445e:	2200      	movs	r2, #0
 8004460:	6062      	str	r2, [r4, #4]
 8004462:	04d9      	lsls	r1, r3, #19
 8004464:	6922      	ldr	r2, [r4, #16]
 8004466:	6022      	str	r2, [r4, #0]
 8004468:	d504      	bpl.n	8004474 <__sflush_r+0x7c>
 800446a:	1c42      	adds	r2, r0, #1
 800446c:	d101      	bne.n	8004472 <__sflush_r+0x7a>
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	b903      	cbnz	r3, 8004474 <__sflush_r+0x7c>
 8004472:	6560      	str	r0, [r4, #84]	; 0x54
 8004474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004476:	602f      	str	r7, [r5, #0]
 8004478:	2900      	cmp	r1, #0
 800447a:	d0ca      	beq.n	8004412 <__sflush_r+0x1a>
 800447c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004480:	4299      	cmp	r1, r3
 8004482:	d002      	beq.n	800448a <__sflush_r+0x92>
 8004484:	4628      	mov	r0, r5
 8004486:	f7fe facb 	bl	8002a20 <_free_r>
 800448a:	2000      	movs	r0, #0
 800448c:	6360      	str	r0, [r4, #52]	; 0x34
 800448e:	e7c1      	b.n	8004414 <__sflush_r+0x1c>
 8004490:	6a21      	ldr	r1, [r4, #32]
 8004492:	2301      	movs	r3, #1
 8004494:	4628      	mov	r0, r5
 8004496:	47b0      	blx	r6
 8004498:	1c41      	adds	r1, r0, #1
 800449a:	d1c7      	bne.n	800442c <__sflush_r+0x34>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0c4      	beq.n	800442c <__sflush_r+0x34>
 80044a2:	2b1d      	cmp	r3, #29
 80044a4:	d001      	beq.n	80044aa <__sflush_r+0xb2>
 80044a6:	2b16      	cmp	r3, #22
 80044a8:	d101      	bne.n	80044ae <__sflush_r+0xb6>
 80044aa:	602f      	str	r7, [r5, #0]
 80044ac:	e7b1      	b.n	8004412 <__sflush_r+0x1a>
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	e7ad      	b.n	8004414 <__sflush_r+0x1c>
 80044b8:	690f      	ldr	r7, [r1, #16]
 80044ba:	2f00      	cmp	r7, #0
 80044bc:	d0a9      	beq.n	8004412 <__sflush_r+0x1a>
 80044be:	0793      	lsls	r3, r2, #30
 80044c0:	680e      	ldr	r6, [r1, #0]
 80044c2:	bf08      	it	eq
 80044c4:	694b      	ldreq	r3, [r1, #20]
 80044c6:	600f      	str	r7, [r1, #0]
 80044c8:	bf18      	it	ne
 80044ca:	2300      	movne	r3, #0
 80044cc:	eba6 0807 	sub.w	r8, r6, r7
 80044d0:	608b      	str	r3, [r1, #8]
 80044d2:	f1b8 0f00 	cmp.w	r8, #0
 80044d6:	dd9c      	ble.n	8004412 <__sflush_r+0x1a>
 80044d8:	6a21      	ldr	r1, [r4, #32]
 80044da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044dc:	4643      	mov	r3, r8
 80044de:	463a      	mov	r2, r7
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b0      	blx	r6
 80044e4:	2800      	cmp	r0, #0
 80044e6:	dc06      	bgt.n	80044f6 <__sflush_r+0xfe>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f4:	e78e      	b.n	8004414 <__sflush_r+0x1c>
 80044f6:	4407      	add	r7, r0
 80044f8:	eba8 0800 	sub.w	r8, r8, r0
 80044fc:	e7e9      	b.n	80044d2 <__sflush_r+0xda>
 80044fe:	bf00      	nop
 8004500:	20400001 	.word	0x20400001

08004504 <_fflush_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	690b      	ldr	r3, [r1, #16]
 8004508:	4605      	mov	r5, r0
 800450a:	460c      	mov	r4, r1
 800450c:	b913      	cbnz	r3, 8004514 <_fflush_r+0x10>
 800450e:	2500      	movs	r5, #0
 8004510:	4628      	mov	r0, r5
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	b118      	cbz	r0, 800451e <_fflush_r+0x1a>
 8004516:	6983      	ldr	r3, [r0, #24]
 8004518:	b90b      	cbnz	r3, 800451e <_fflush_r+0x1a>
 800451a:	f000 f887 	bl	800462c <__sinit>
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <_fflush_r+0x6c>)
 8004520:	429c      	cmp	r4, r3
 8004522:	d11b      	bne.n	800455c <_fflush_r+0x58>
 8004524:	686c      	ldr	r4, [r5, #4]
 8004526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ef      	beq.n	800450e <_fflush_r+0xa>
 800452e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004530:	07d0      	lsls	r0, r2, #31
 8004532:	d404      	bmi.n	800453e <_fflush_r+0x3a>
 8004534:	0599      	lsls	r1, r3, #22
 8004536:	d402      	bmi.n	800453e <_fflush_r+0x3a>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f000 f91a 	bl	8004772 <__retarget_lock_acquire_recursive>
 800453e:	4628      	mov	r0, r5
 8004540:	4621      	mov	r1, r4
 8004542:	f7ff ff59 	bl	80043f8 <__sflush_r>
 8004546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004548:	07da      	lsls	r2, r3, #31
 800454a:	4605      	mov	r5, r0
 800454c:	d4e0      	bmi.n	8004510 <_fflush_r+0xc>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	059b      	lsls	r3, r3, #22
 8004552:	d4dd      	bmi.n	8004510 <_fflush_r+0xc>
 8004554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004556:	f000 f90d 	bl	8004774 <__retarget_lock_release_recursive>
 800455a:	e7d9      	b.n	8004510 <_fflush_r+0xc>
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <_fflush_r+0x70>)
 800455e:	429c      	cmp	r4, r3
 8004560:	d101      	bne.n	8004566 <_fflush_r+0x62>
 8004562:	68ac      	ldr	r4, [r5, #8]
 8004564:	e7df      	b.n	8004526 <_fflush_r+0x22>
 8004566:	4b04      	ldr	r3, [pc, #16]	; (8004578 <_fflush_r+0x74>)
 8004568:	429c      	cmp	r4, r3
 800456a:	bf08      	it	eq
 800456c:	68ec      	ldreq	r4, [r5, #12]
 800456e:	e7da      	b.n	8004526 <_fflush_r+0x22>
 8004570:	08006480 	.word	0x08006480
 8004574:	080064a0 	.word	0x080064a0
 8004578:	08006460 	.word	0x08006460

0800457c <std>:
 800457c:	2300      	movs	r3, #0
 800457e:	b510      	push	{r4, lr}
 8004580:	4604      	mov	r4, r0
 8004582:	e9c0 3300 	strd	r3, r3, [r0]
 8004586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800458a:	6083      	str	r3, [r0, #8]
 800458c:	8181      	strh	r1, [r0, #12]
 800458e:	6643      	str	r3, [r0, #100]	; 0x64
 8004590:	81c2      	strh	r2, [r0, #14]
 8004592:	6183      	str	r3, [r0, #24]
 8004594:	4619      	mov	r1, r3
 8004596:	2208      	movs	r2, #8
 8004598:	305c      	adds	r0, #92	; 0x5c
 800459a:	f7fe fa29 	bl	80029f0 <memset>
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <std+0x38>)
 80045a0:	6263      	str	r3, [r4, #36]	; 0x24
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <std+0x3c>)
 80045a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <std+0x40>)
 80045a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <std+0x44>)
 80045ac:	6224      	str	r4, [r4, #32]
 80045ae:	6323      	str	r3, [r4, #48]	; 0x30
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	bf00      	nop
 80045b4:	08005209 	.word	0x08005209
 80045b8:	0800522b 	.word	0x0800522b
 80045bc:	08005263 	.word	0x08005263
 80045c0:	08005287 	.word	0x08005287

080045c4 <_cleanup_r>:
 80045c4:	4901      	ldr	r1, [pc, #4]	; (80045cc <_cleanup_r+0x8>)
 80045c6:	f000 b8af 	b.w	8004728 <_fwalk_reent>
 80045ca:	bf00      	nop
 80045cc:	08004505 	.word	0x08004505

080045d0 <__sfmoreglue>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	1e4a      	subs	r2, r1, #1
 80045d4:	2568      	movs	r5, #104	; 0x68
 80045d6:	4355      	muls	r5, r2
 80045d8:	460e      	mov	r6, r1
 80045da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045de:	f7fe fa6f 	bl	8002ac0 <_malloc_r>
 80045e2:	4604      	mov	r4, r0
 80045e4:	b140      	cbz	r0, 80045f8 <__sfmoreglue+0x28>
 80045e6:	2100      	movs	r1, #0
 80045e8:	e9c0 1600 	strd	r1, r6, [r0]
 80045ec:	300c      	adds	r0, #12
 80045ee:	60a0      	str	r0, [r4, #8]
 80045f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045f4:	f7fe f9fc 	bl	80029f0 <memset>
 80045f8:	4620      	mov	r0, r4
 80045fa:	bd70      	pop	{r4, r5, r6, pc}

080045fc <__sfp_lock_acquire>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__sfp_lock_acquire+0x8>)
 80045fe:	f000 b8b8 	b.w	8004772 <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	20000230 	.word	0x20000230

08004608 <__sfp_lock_release>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__sfp_lock_release+0x8>)
 800460a:	f000 b8b3 	b.w	8004774 <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	20000230 	.word	0x20000230

08004614 <__sinit_lock_acquire>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__sinit_lock_acquire+0x8>)
 8004616:	f000 b8ac 	b.w	8004772 <__retarget_lock_acquire_recursive>
 800461a:	bf00      	nop
 800461c:	2000022b 	.word	0x2000022b

08004620 <__sinit_lock_release>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__sinit_lock_release+0x8>)
 8004622:	f000 b8a7 	b.w	8004774 <__retarget_lock_release_recursive>
 8004626:	bf00      	nop
 8004628:	2000022b 	.word	0x2000022b

0800462c <__sinit>:
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
 8004630:	f7ff fff0 	bl	8004614 <__sinit_lock_acquire>
 8004634:	69a3      	ldr	r3, [r4, #24]
 8004636:	b11b      	cbz	r3, 8004640 <__sinit+0x14>
 8004638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463c:	f7ff bff0 	b.w	8004620 <__sinit_lock_release>
 8004640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004644:	6523      	str	r3, [r4, #80]	; 0x50
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <__sinit+0x68>)
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <__sinit+0x6c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	62a2      	str	r2, [r4, #40]	; 0x28
 800464e:	42a3      	cmp	r3, r4
 8004650:	bf04      	itt	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	61a3      	streq	r3, [r4, #24]
 8004656:	4620      	mov	r0, r4
 8004658:	f000 f820 	bl	800469c <__sfp>
 800465c:	6060      	str	r0, [r4, #4]
 800465e:	4620      	mov	r0, r4
 8004660:	f000 f81c 	bl	800469c <__sfp>
 8004664:	60a0      	str	r0, [r4, #8]
 8004666:	4620      	mov	r0, r4
 8004668:	f000 f818 	bl	800469c <__sfp>
 800466c:	2200      	movs	r2, #0
 800466e:	60e0      	str	r0, [r4, #12]
 8004670:	2104      	movs	r1, #4
 8004672:	6860      	ldr	r0, [r4, #4]
 8004674:	f7ff ff82 	bl	800457c <std>
 8004678:	68a0      	ldr	r0, [r4, #8]
 800467a:	2201      	movs	r2, #1
 800467c:	2109      	movs	r1, #9
 800467e:	f7ff ff7d 	bl	800457c <std>
 8004682:	68e0      	ldr	r0, [r4, #12]
 8004684:	2202      	movs	r2, #2
 8004686:	2112      	movs	r1, #18
 8004688:	f7ff ff78 	bl	800457c <std>
 800468c:	2301      	movs	r3, #1
 800468e:	61a3      	str	r3, [r4, #24]
 8004690:	e7d2      	b.n	8004638 <__sinit+0xc>
 8004692:	bf00      	nop
 8004694:	08006394 	.word	0x08006394
 8004698:	080045c5 	.word	0x080045c5

0800469c <__sfp>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	4607      	mov	r7, r0
 80046a0:	f7ff ffac 	bl	80045fc <__sfp_lock_acquire>
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <__sfp+0x84>)
 80046a6:	681e      	ldr	r6, [r3, #0]
 80046a8:	69b3      	ldr	r3, [r6, #24]
 80046aa:	b913      	cbnz	r3, 80046b2 <__sfp+0x16>
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff ffbd 	bl	800462c <__sinit>
 80046b2:	3648      	adds	r6, #72	; 0x48
 80046b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	d503      	bpl.n	80046c4 <__sfp+0x28>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	b30b      	cbz	r3, 8004704 <__sfp+0x68>
 80046c0:	6836      	ldr	r6, [r6, #0]
 80046c2:	e7f7      	b.n	80046b4 <__sfp+0x18>
 80046c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046c8:	b9d5      	cbnz	r5, 8004700 <__sfp+0x64>
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <__sfp+0x88>)
 80046cc:	60e3      	str	r3, [r4, #12]
 80046ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046d2:	6665      	str	r5, [r4, #100]	; 0x64
 80046d4:	f000 f84c 	bl	8004770 <__retarget_lock_init_recursive>
 80046d8:	f7ff ff96 	bl	8004608 <__sfp_lock_release>
 80046dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046e4:	6025      	str	r5, [r4, #0]
 80046e6:	61a5      	str	r5, [r4, #24]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4629      	mov	r1, r5
 80046ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046f0:	f7fe f97e 	bl	80029f0 <memset>
 80046f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046fc:	4620      	mov	r0, r4
 80046fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004700:	3468      	adds	r4, #104	; 0x68
 8004702:	e7d9      	b.n	80046b8 <__sfp+0x1c>
 8004704:	2104      	movs	r1, #4
 8004706:	4638      	mov	r0, r7
 8004708:	f7ff ff62 	bl	80045d0 <__sfmoreglue>
 800470c:	4604      	mov	r4, r0
 800470e:	6030      	str	r0, [r6, #0]
 8004710:	2800      	cmp	r0, #0
 8004712:	d1d5      	bne.n	80046c0 <__sfp+0x24>
 8004714:	f7ff ff78 	bl	8004608 <__sfp_lock_release>
 8004718:	230c      	movs	r3, #12
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	e7ee      	b.n	80046fc <__sfp+0x60>
 800471e:	bf00      	nop
 8004720:	08006394 	.word	0x08006394
 8004724:	ffff0001 	.word	0xffff0001

08004728 <_fwalk_reent>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	4606      	mov	r6, r0
 800472e:	4688      	mov	r8, r1
 8004730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004734:	2700      	movs	r7, #0
 8004736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800473a:	f1b9 0901 	subs.w	r9, r9, #1
 800473e:	d505      	bpl.n	800474c <_fwalk_reent+0x24>
 8004740:	6824      	ldr	r4, [r4, #0]
 8004742:	2c00      	cmp	r4, #0
 8004744:	d1f7      	bne.n	8004736 <_fwalk_reent+0xe>
 8004746:	4638      	mov	r0, r7
 8004748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474c:	89ab      	ldrh	r3, [r5, #12]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d907      	bls.n	8004762 <_fwalk_reent+0x3a>
 8004752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004756:	3301      	adds	r3, #1
 8004758:	d003      	beq.n	8004762 <_fwalk_reent+0x3a>
 800475a:	4629      	mov	r1, r5
 800475c:	4630      	mov	r0, r6
 800475e:	47c0      	blx	r8
 8004760:	4307      	orrs	r7, r0
 8004762:	3568      	adds	r5, #104	; 0x68
 8004764:	e7e9      	b.n	800473a <_fwalk_reent+0x12>
	...

08004768 <_localeconv_r>:
 8004768:	4800      	ldr	r0, [pc, #0]	; (800476c <_localeconv_r+0x4>)
 800476a:	4770      	bx	lr
 800476c:	20000160 	.word	0x20000160

08004770 <__retarget_lock_init_recursive>:
 8004770:	4770      	bx	lr

08004772 <__retarget_lock_acquire_recursive>:
 8004772:	4770      	bx	lr

08004774 <__retarget_lock_release_recursive>:
 8004774:	4770      	bx	lr

08004776 <__swhatbuf_r>:
 8004776:	b570      	push	{r4, r5, r6, lr}
 8004778:	460e      	mov	r6, r1
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	2900      	cmp	r1, #0
 8004780:	b096      	sub	sp, #88	; 0x58
 8004782:	4614      	mov	r4, r2
 8004784:	461d      	mov	r5, r3
 8004786:	da07      	bge.n	8004798 <__swhatbuf_r+0x22>
 8004788:	2300      	movs	r3, #0
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	89b3      	ldrh	r3, [r6, #12]
 800478e:	061a      	lsls	r2, r3, #24
 8004790:	d410      	bmi.n	80047b4 <__swhatbuf_r+0x3e>
 8004792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004796:	e00e      	b.n	80047b6 <__swhatbuf_r+0x40>
 8004798:	466a      	mov	r2, sp
 800479a:	f000 fdcb 	bl	8005334 <_fstat_r>
 800479e:	2800      	cmp	r0, #0
 80047a0:	dbf2      	blt.n	8004788 <__swhatbuf_r+0x12>
 80047a2:	9a01      	ldr	r2, [sp, #4]
 80047a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047ac:	425a      	negs	r2, r3
 80047ae:	415a      	adcs	r2, r3
 80047b0:	602a      	str	r2, [r5, #0]
 80047b2:	e7ee      	b.n	8004792 <__swhatbuf_r+0x1c>
 80047b4:	2340      	movs	r3, #64	; 0x40
 80047b6:	2000      	movs	r0, #0
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	b016      	add	sp, #88	; 0x58
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080047c0 <__smakebuf_r>:
 80047c0:	898b      	ldrh	r3, [r1, #12]
 80047c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047c4:	079d      	lsls	r5, r3, #30
 80047c6:	4606      	mov	r6, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	d507      	bpl.n	80047dc <__smakebuf_r+0x1c>
 80047cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	6123      	str	r3, [r4, #16]
 80047d4:	2301      	movs	r3, #1
 80047d6:	6163      	str	r3, [r4, #20]
 80047d8:	b002      	add	sp, #8
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	ab01      	add	r3, sp, #4
 80047de:	466a      	mov	r2, sp
 80047e0:	f7ff ffc9 	bl	8004776 <__swhatbuf_r>
 80047e4:	9900      	ldr	r1, [sp, #0]
 80047e6:	4605      	mov	r5, r0
 80047e8:	4630      	mov	r0, r6
 80047ea:	f7fe f969 	bl	8002ac0 <_malloc_r>
 80047ee:	b948      	cbnz	r0, 8004804 <__smakebuf_r+0x44>
 80047f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f4:	059a      	lsls	r2, r3, #22
 80047f6:	d4ef      	bmi.n	80047d8 <__smakebuf_r+0x18>
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	81a3      	strh	r3, [r4, #12]
 8004802:	e7e3      	b.n	80047cc <__smakebuf_r+0xc>
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <__smakebuf_r+0x7c>)
 8004806:	62b3      	str	r3, [r6, #40]	; 0x28
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	6020      	str	r0, [r4, #0]
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	9b00      	ldr	r3, [sp, #0]
 8004814:	6163      	str	r3, [r4, #20]
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	6120      	str	r0, [r4, #16]
 800481a:	b15b      	cbz	r3, 8004834 <__smakebuf_r+0x74>
 800481c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004820:	4630      	mov	r0, r6
 8004822:	f000 fd99 	bl	8005358 <_isatty_r>
 8004826:	b128      	cbz	r0, 8004834 <__smakebuf_r+0x74>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	89a0      	ldrh	r0, [r4, #12]
 8004836:	4305      	orrs	r5, r0
 8004838:	81a5      	strh	r5, [r4, #12]
 800483a:	e7cd      	b.n	80047d8 <__smakebuf_r+0x18>
 800483c:	080045c5 	.word	0x080045c5

08004840 <__malloc_lock>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__malloc_lock+0x8>)
 8004842:	f7ff bf96 	b.w	8004772 <__retarget_lock_acquire_recursive>
 8004846:	bf00      	nop
 8004848:	2000022c 	.word	0x2000022c

0800484c <__malloc_unlock>:
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <__malloc_unlock+0x8>)
 800484e:	f7ff bf91 	b.w	8004774 <__retarget_lock_release_recursive>
 8004852:	bf00      	nop
 8004854:	2000022c 	.word	0x2000022c

08004858 <_Balloc>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800485c:	4604      	mov	r4, r0
 800485e:	460d      	mov	r5, r1
 8004860:	b976      	cbnz	r6, 8004880 <_Balloc+0x28>
 8004862:	2010      	movs	r0, #16
 8004864:	f7fe f8a6 	bl	80029b4 <malloc>
 8004868:	4602      	mov	r2, r0
 800486a:	6260      	str	r0, [r4, #36]	; 0x24
 800486c:	b920      	cbnz	r0, 8004878 <_Balloc+0x20>
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <_Balloc+0x78>)
 8004870:	4818      	ldr	r0, [pc, #96]	; (80048d4 <_Balloc+0x7c>)
 8004872:	2166      	movs	r1, #102	; 0x66
 8004874:	f000 fd1e 	bl	80052b4 <__assert_func>
 8004878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800487c:	6006      	str	r6, [r0, #0]
 800487e:	60c6      	str	r6, [r0, #12]
 8004880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004882:	68f3      	ldr	r3, [r6, #12]
 8004884:	b183      	cbz	r3, 80048a8 <_Balloc+0x50>
 8004886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800488e:	b9b8      	cbnz	r0, 80048c0 <_Balloc+0x68>
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f605 	lsl.w	r6, r1, r5
 8004896:	1d72      	adds	r2, r6, #5
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	4620      	mov	r0, r4
 800489c:	f7fe f8b0 	bl	8002a00 <_calloc_r>
 80048a0:	b160      	cbz	r0, 80048bc <_Balloc+0x64>
 80048a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80048a6:	e00e      	b.n	80048c6 <_Balloc+0x6e>
 80048a8:	2221      	movs	r2, #33	; 0x21
 80048aa:	2104      	movs	r1, #4
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7fe f8a7 	bl	8002a00 <_calloc_r>
 80048b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b4:	60f0      	str	r0, [r6, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e4      	bne.n	8004886 <_Balloc+0x2e>
 80048bc:	2000      	movs	r0, #0
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	6802      	ldr	r2, [r0, #0]
 80048c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80048c6:	2300      	movs	r3, #0
 80048c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80048cc:	e7f7      	b.n	80048be <_Balloc+0x66>
 80048ce:	bf00      	nop
 80048d0:	080063d9 	.word	0x080063d9
 80048d4:	080064c0 	.word	0x080064c0

080048d8 <_Bfree>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b976      	cbnz	r6, 8004900 <_Bfree+0x28>
 80048e2:	2010      	movs	r0, #16
 80048e4:	f7fe f866 	bl	80029b4 <malloc>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6268      	str	r0, [r5, #36]	; 0x24
 80048ec:	b920      	cbnz	r0, 80048f8 <_Bfree+0x20>
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <_Bfree+0x3c>)
 80048f0:	4809      	ldr	r0, [pc, #36]	; (8004918 <_Bfree+0x40>)
 80048f2:	218a      	movs	r1, #138	; 0x8a
 80048f4:	f000 fcde 	bl	80052b4 <__assert_func>
 80048f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048fc:	6006      	str	r6, [r0, #0]
 80048fe:	60c6      	str	r6, [r0, #12]
 8004900:	b13c      	cbz	r4, 8004912 <_Bfree+0x3a>
 8004902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004904:	6862      	ldr	r2, [r4, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800490c:	6021      	str	r1, [r4, #0]
 800490e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	080063d9 	.word	0x080063d9
 8004918:	080064c0 	.word	0x080064c0

0800491c <__multadd>:
 800491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	690e      	ldr	r6, [r1, #16]
 8004922:	4607      	mov	r7, r0
 8004924:	4698      	mov	r8, r3
 8004926:	460c      	mov	r4, r1
 8004928:	f101 0014 	add.w	r0, r1, #20
 800492c:	2300      	movs	r3, #0
 800492e:	6805      	ldr	r5, [r0, #0]
 8004930:	b2a9      	uxth	r1, r5
 8004932:	fb02 8101 	mla	r1, r2, r1, r8
 8004936:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800493a:	0c2d      	lsrs	r5, r5, #16
 800493c:	fb02 c505 	mla	r5, r2, r5, ip
 8004940:	b289      	uxth	r1, r1
 8004942:	3301      	adds	r3, #1
 8004944:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004948:	429e      	cmp	r6, r3
 800494a:	f840 1b04 	str.w	r1, [r0], #4
 800494e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004952:	dcec      	bgt.n	800492e <__multadd+0x12>
 8004954:	f1b8 0f00 	cmp.w	r8, #0
 8004958:	d022      	beq.n	80049a0 <__multadd+0x84>
 800495a:	68a3      	ldr	r3, [r4, #8]
 800495c:	42b3      	cmp	r3, r6
 800495e:	dc19      	bgt.n	8004994 <__multadd+0x78>
 8004960:	6861      	ldr	r1, [r4, #4]
 8004962:	4638      	mov	r0, r7
 8004964:	3101      	adds	r1, #1
 8004966:	f7ff ff77 	bl	8004858 <_Balloc>
 800496a:	4605      	mov	r5, r0
 800496c:	b928      	cbnz	r0, 800497a <__multadd+0x5e>
 800496e:	4602      	mov	r2, r0
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <__multadd+0x8c>)
 8004972:	480e      	ldr	r0, [pc, #56]	; (80049ac <__multadd+0x90>)
 8004974:	21b5      	movs	r1, #181	; 0xb5
 8004976:	f000 fc9d 	bl	80052b4 <__assert_func>
 800497a:	6922      	ldr	r2, [r4, #16]
 800497c:	3202      	adds	r2, #2
 800497e:	f104 010c 	add.w	r1, r4, #12
 8004982:	0092      	lsls	r2, r2, #2
 8004984:	300c      	adds	r0, #12
 8004986:	f7fe f825 	bl	80029d4 <memcpy>
 800498a:	4621      	mov	r1, r4
 800498c:	4638      	mov	r0, r7
 800498e:	f7ff ffa3 	bl	80048d8 <_Bfree>
 8004992:	462c      	mov	r4, r5
 8004994:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004998:	3601      	adds	r6, #1
 800499a:	f8c3 8014 	str.w	r8, [r3, #20]
 800499e:	6126      	str	r6, [r4, #16]
 80049a0:	4620      	mov	r0, r4
 80049a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a6:	bf00      	nop
 80049a8:	0800644f 	.word	0x0800644f
 80049ac:	080064c0 	.word	0x080064c0

080049b0 <__hi0bits>:
 80049b0:	0c03      	lsrs	r3, r0, #16
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	b9d3      	cbnz	r3, 80049ec <__hi0bits+0x3c>
 80049b6:	0400      	lsls	r0, r0, #16
 80049b8:	2310      	movs	r3, #16
 80049ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80049be:	bf04      	itt	eq
 80049c0:	0200      	lsleq	r0, r0, #8
 80049c2:	3308      	addeq	r3, #8
 80049c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80049c8:	bf04      	itt	eq
 80049ca:	0100      	lsleq	r0, r0, #4
 80049cc:	3304      	addeq	r3, #4
 80049ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80049d2:	bf04      	itt	eq
 80049d4:	0080      	lsleq	r0, r0, #2
 80049d6:	3302      	addeq	r3, #2
 80049d8:	2800      	cmp	r0, #0
 80049da:	db05      	blt.n	80049e8 <__hi0bits+0x38>
 80049dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80049e0:	f103 0301 	add.w	r3, r3, #1
 80049e4:	bf08      	it	eq
 80049e6:	2320      	moveq	r3, #32
 80049e8:	4618      	mov	r0, r3
 80049ea:	4770      	bx	lr
 80049ec:	2300      	movs	r3, #0
 80049ee:	e7e4      	b.n	80049ba <__hi0bits+0xa>

080049f0 <__lo0bits>:
 80049f0:	6803      	ldr	r3, [r0, #0]
 80049f2:	f013 0207 	ands.w	r2, r3, #7
 80049f6:	4601      	mov	r1, r0
 80049f8:	d00b      	beq.n	8004a12 <__lo0bits+0x22>
 80049fa:	07da      	lsls	r2, r3, #31
 80049fc:	d424      	bmi.n	8004a48 <__lo0bits+0x58>
 80049fe:	0798      	lsls	r0, r3, #30
 8004a00:	bf49      	itett	mi
 8004a02:	085b      	lsrmi	r3, r3, #1
 8004a04:	089b      	lsrpl	r3, r3, #2
 8004a06:	2001      	movmi	r0, #1
 8004a08:	600b      	strmi	r3, [r1, #0]
 8004a0a:	bf5c      	itt	pl
 8004a0c:	600b      	strpl	r3, [r1, #0]
 8004a0e:	2002      	movpl	r0, #2
 8004a10:	4770      	bx	lr
 8004a12:	b298      	uxth	r0, r3
 8004a14:	b9b0      	cbnz	r0, 8004a44 <__lo0bits+0x54>
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	2010      	movs	r0, #16
 8004a1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a1e:	bf04      	itt	eq
 8004a20:	0a1b      	lsreq	r3, r3, #8
 8004a22:	3008      	addeq	r0, #8
 8004a24:	071a      	lsls	r2, r3, #28
 8004a26:	bf04      	itt	eq
 8004a28:	091b      	lsreq	r3, r3, #4
 8004a2a:	3004      	addeq	r0, #4
 8004a2c:	079a      	lsls	r2, r3, #30
 8004a2e:	bf04      	itt	eq
 8004a30:	089b      	lsreq	r3, r3, #2
 8004a32:	3002      	addeq	r0, #2
 8004a34:	07da      	lsls	r2, r3, #31
 8004a36:	d403      	bmi.n	8004a40 <__lo0bits+0x50>
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	f100 0001 	add.w	r0, r0, #1
 8004a3e:	d005      	beq.n	8004a4c <__lo0bits+0x5c>
 8004a40:	600b      	str	r3, [r1, #0]
 8004a42:	4770      	bx	lr
 8004a44:	4610      	mov	r0, r2
 8004a46:	e7e8      	b.n	8004a1a <__lo0bits+0x2a>
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4770      	bx	lr
 8004a4c:	2020      	movs	r0, #32
 8004a4e:	4770      	bx	lr

08004a50 <__i2b>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	2101      	movs	r1, #1
 8004a56:	f7ff feff 	bl	8004858 <_Balloc>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	b928      	cbnz	r0, 8004a6a <__i2b+0x1a>
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <__i2b+0x24>)
 8004a60:	4805      	ldr	r0, [pc, #20]	; (8004a78 <__i2b+0x28>)
 8004a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a66:	f000 fc25 	bl	80052b4 <__assert_func>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	6144      	str	r4, [r0, #20]
 8004a6e:	6103      	str	r3, [r0, #16]
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	bf00      	nop
 8004a74:	0800644f 	.word	0x0800644f
 8004a78:	080064c0 	.word	0x080064c0

08004a7c <__multiply>:
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	4614      	mov	r4, r2
 8004a82:	690a      	ldr	r2, [r1, #16]
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	bfb8      	it	lt
 8004a8a:	460b      	movlt	r3, r1
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	bfbc      	itt	lt
 8004a90:	4625      	movlt	r5, r4
 8004a92:	461c      	movlt	r4, r3
 8004a94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004a98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a9c:	68ab      	ldr	r3, [r5, #8]
 8004a9e:	6869      	ldr	r1, [r5, #4]
 8004aa0:	eb0a 0709 	add.w	r7, sl, r9
 8004aa4:	42bb      	cmp	r3, r7
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	bfb8      	it	lt
 8004aaa:	3101      	addlt	r1, #1
 8004aac:	f7ff fed4 	bl	8004858 <_Balloc>
 8004ab0:	b930      	cbnz	r0, 8004ac0 <__multiply+0x44>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4b42      	ldr	r3, [pc, #264]	; (8004bc0 <__multiply+0x144>)
 8004ab6:	4843      	ldr	r0, [pc, #268]	; (8004bc4 <__multiply+0x148>)
 8004ab8:	f240 115d 	movw	r1, #349	; 0x15d
 8004abc:	f000 fbfa 	bl	80052b4 <__assert_func>
 8004ac0:	f100 0614 	add.w	r6, r0, #20
 8004ac4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004ac8:	4633      	mov	r3, r6
 8004aca:	2200      	movs	r2, #0
 8004acc:	4543      	cmp	r3, r8
 8004ace:	d31e      	bcc.n	8004b0e <__multiply+0x92>
 8004ad0:	f105 0c14 	add.w	ip, r5, #20
 8004ad4:	f104 0314 	add.w	r3, r4, #20
 8004ad8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004adc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004ae0:	9202      	str	r2, [sp, #8]
 8004ae2:	ebac 0205 	sub.w	r2, ip, r5
 8004ae6:	3a15      	subs	r2, #21
 8004ae8:	f022 0203 	bic.w	r2, r2, #3
 8004aec:	3204      	adds	r2, #4
 8004aee:	f105 0115 	add.w	r1, r5, #21
 8004af2:	458c      	cmp	ip, r1
 8004af4:	bf38      	it	cc
 8004af6:	2204      	movcc	r2, #4
 8004af8:	9201      	str	r2, [sp, #4]
 8004afa:	9a02      	ldr	r2, [sp, #8]
 8004afc:	9303      	str	r3, [sp, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d808      	bhi.n	8004b14 <__multiply+0x98>
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	dc55      	bgt.n	8004bb2 <__multiply+0x136>
 8004b06:	6107      	str	r7, [r0, #16]
 8004b08:	b005      	add	sp, #20
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0e:	f843 2b04 	str.w	r2, [r3], #4
 8004b12:	e7db      	b.n	8004acc <__multiply+0x50>
 8004b14:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b18:	f1ba 0f00 	cmp.w	sl, #0
 8004b1c:	d020      	beq.n	8004b60 <__multiply+0xe4>
 8004b1e:	f105 0e14 	add.w	lr, r5, #20
 8004b22:	46b1      	mov	r9, r6
 8004b24:	2200      	movs	r2, #0
 8004b26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b2a:	f8d9 b000 	ldr.w	fp, [r9]
 8004b2e:	b2a1      	uxth	r1, r4
 8004b30:	fa1f fb8b 	uxth.w	fp, fp
 8004b34:	fb0a b101 	mla	r1, sl, r1, fp
 8004b38:	4411      	add	r1, r2
 8004b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8004b3e:	0c24      	lsrs	r4, r4, #16
 8004b40:	0c12      	lsrs	r2, r2, #16
 8004b42:	fb0a 2404 	mla	r4, sl, r4, r2
 8004b46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004b4a:	b289      	uxth	r1, r1
 8004b4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004b50:	45f4      	cmp	ip, lr
 8004b52:	f849 1b04 	str.w	r1, [r9], #4
 8004b56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004b5a:	d8e4      	bhi.n	8004b26 <__multiply+0xaa>
 8004b5c:	9901      	ldr	r1, [sp, #4]
 8004b5e:	5072      	str	r2, [r6, r1]
 8004b60:	9a03      	ldr	r2, [sp, #12]
 8004b62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004b66:	3304      	adds	r3, #4
 8004b68:	f1b9 0f00 	cmp.w	r9, #0
 8004b6c:	d01f      	beq.n	8004bae <__multiply+0x132>
 8004b6e:	6834      	ldr	r4, [r6, #0]
 8004b70:	f105 0114 	add.w	r1, r5, #20
 8004b74:	46b6      	mov	lr, r6
 8004b76:	f04f 0a00 	mov.w	sl, #0
 8004b7a:	880a      	ldrh	r2, [r1, #0]
 8004b7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004b80:	fb09 b202 	mla	r2, r9, r2, fp
 8004b84:	4492      	add	sl, r2
 8004b86:	b2a4      	uxth	r4, r4
 8004b88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004b8c:	f84e 4b04 	str.w	r4, [lr], #4
 8004b90:	f851 4b04 	ldr.w	r4, [r1], #4
 8004b94:	f8be 2000 	ldrh.w	r2, [lr]
 8004b98:	0c24      	lsrs	r4, r4, #16
 8004b9a:	fb09 2404 	mla	r4, r9, r4, r2
 8004b9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004ba2:	458c      	cmp	ip, r1
 8004ba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ba8:	d8e7      	bhi.n	8004b7a <__multiply+0xfe>
 8004baa:	9a01      	ldr	r2, [sp, #4]
 8004bac:	50b4      	str	r4, [r6, r2]
 8004bae:	3604      	adds	r6, #4
 8004bb0:	e7a3      	b.n	8004afa <__multiply+0x7e>
 8004bb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1a5      	bne.n	8004b06 <__multiply+0x8a>
 8004bba:	3f01      	subs	r7, #1
 8004bbc:	e7a1      	b.n	8004b02 <__multiply+0x86>
 8004bbe:	bf00      	nop
 8004bc0:	0800644f 	.word	0x0800644f
 8004bc4:	080064c0 	.word	0x080064c0

08004bc8 <__pow5mult>:
 8004bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	4615      	mov	r5, r2
 8004bce:	f012 0203 	ands.w	r2, r2, #3
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	460f      	mov	r7, r1
 8004bd6:	d007      	beq.n	8004be8 <__pow5mult+0x20>
 8004bd8:	4c25      	ldr	r4, [pc, #148]	; (8004c70 <__pow5mult+0xa8>)
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004be2:	f7ff fe9b 	bl	800491c <__multadd>
 8004be6:	4607      	mov	r7, r0
 8004be8:	10ad      	asrs	r5, r5, #2
 8004bea:	d03d      	beq.n	8004c68 <__pow5mult+0xa0>
 8004bec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004bee:	b97c      	cbnz	r4, 8004c10 <__pow5mult+0x48>
 8004bf0:	2010      	movs	r0, #16
 8004bf2:	f7fd fedf 	bl	80029b4 <malloc>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6270      	str	r0, [r6, #36]	; 0x24
 8004bfa:	b928      	cbnz	r0, 8004c08 <__pow5mult+0x40>
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <__pow5mult+0xac>)
 8004bfe:	481e      	ldr	r0, [pc, #120]	; (8004c78 <__pow5mult+0xb0>)
 8004c00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c04:	f000 fb56 	bl	80052b4 <__assert_func>
 8004c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c0c:	6004      	str	r4, [r0, #0]
 8004c0e:	60c4      	str	r4, [r0, #12]
 8004c10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c18:	b94c      	cbnz	r4, 8004c2e <__pow5mult+0x66>
 8004c1a:	f240 2171 	movw	r1, #625	; 0x271
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f7ff ff16 	bl	8004a50 <__i2b>
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	6003      	str	r3, [r0, #0]
 8004c2e:	f04f 0900 	mov.w	r9, #0
 8004c32:	07eb      	lsls	r3, r5, #31
 8004c34:	d50a      	bpl.n	8004c4c <__pow5mult+0x84>
 8004c36:	4639      	mov	r1, r7
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7ff ff1e 	bl	8004a7c <__multiply>
 8004c40:	4639      	mov	r1, r7
 8004c42:	4680      	mov	r8, r0
 8004c44:	4630      	mov	r0, r6
 8004c46:	f7ff fe47 	bl	80048d8 <_Bfree>
 8004c4a:	4647      	mov	r7, r8
 8004c4c:	106d      	asrs	r5, r5, #1
 8004c4e:	d00b      	beq.n	8004c68 <__pow5mult+0xa0>
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	b938      	cbnz	r0, 8004c64 <__pow5mult+0x9c>
 8004c54:	4622      	mov	r2, r4
 8004c56:	4621      	mov	r1, r4
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7ff ff0f 	bl	8004a7c <__multiply>
 8004c5e:	6020      	str	r0, [r4, #0]
 8004c60:	f8c0 9000 	str.w	r9, [r0]
 8004c64:	4604      	mov	r4, r0
 8004c66:	e7e4      	b.n	8004c32 <__pow5mult+0x6a>
 8004c68:	4638      	mov	r0, r7
 8004c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6e:	bf00      	nop
 8004c70:	08006610 	.word	0x08006610
 8004c74:	080063d9 	.word	0x080063d9
 8004c78:	080064c0 	.word	0x080064c0

08004c7c <__lshift>:
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	460c      	mov	r4, r1
 8004c82:	6849      	ldr	r1, [r1, #4]
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	4691      	mov	r9, r2
 8004c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c94:	f108 0601 	add.w	r6, r8, #1
 8004c98:	42b3      	cmp	r3, r6
 8004c9a:	db0b      	blt.n	8004cb4 <__lshift+0x38>
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f7ff fddb 	bl	8004858 <_Balloc>
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	b948      	cbnz	r0, 8004cba <__lshift+0x3e>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <__lshift+0xd0>)
 8004caa:	4829      	ldr	r0, [pc, #164]	; (8004d50 <__lshift+0xd4>)
 8004cac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004cb0:	f000 fb00 	bl	80052b4 <__assert_func>
 8004cb4:	3101      	adds	r1, #1
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	e7ee      	b.n	8004c98 <__lshift+0x1c>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f100 0114 	add.w	r1, r0, #20
 8004cc0:	f100 0210 	add.w	r2, r0, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	4553      	cmp	r3, sl
 8004cc8:	db33      	blt.n	8004d32 <__lshift+0xb6>
 8004cca:	6920      	ldr	r0, [r4, #16]
 8004ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004cd0:	f104 0314 	add.w	r3, r4, #20
 8004cd4:	f019 091f 	ands.w	r9, r9, #31
 8004cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ce0:	d02b      	beq.n	8004d3a <__lshift+0xbe>
 8004ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ce6:	468a      	mov	sl, r1
 8004ce8:	2200      	movs	r2, #0
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	fa00 f009 	lsl.w	r0, r0, r9
 8004cf0:	4302      	orrs	r2, r0
 8004cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8004cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cfa:	459c      	cmp	ip, r3
 8004cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d00:	d8f3      	bhi.n	8004cea <__lshift+0x6e>
 8004d02:	ebac 0304 	sub.w	r3, ip, r4
 8004d06:	3b15      	subs	r3, #21
 8004d08:	f023 0303 	bic.w	r3, r3, #3
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	f104 0015 	add.w	r0, r4, #21
 8004d12:	4584      	cmp	ip, r0
 8004d14:	bf38      	it	cc
 8004d16:	2304      	movcc	r3, #4
 8004d18:	50ca      	str	r2, [r1, r3]
 8004d1a:	b10a      	cbz	r2, 8004d20 <__lshift+0xa4>
 8004d1c:	f108 0602 	add.w	r6, r8, #2
 8004d20:	3e01      	subs	r6, #1
 8004d22:	4638      	mov	r0, r7
 8004d24:	612e      	str	r6, [r5, #16]
 8004d26:	4621      	mov	r1, r4
 8004d28:	f7ff fdd6 	bl	80048d8 <_Bfree>
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d36:	3301      	adds	r3, #1
 8004d38:	e7c5      	b.n	8004cc6 <__lshift+0x4a>
 8004d3a:	3904      	subs	r1, #4
 8004d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d44:	459c      	cmp	ip, r3
 8004d46:	d8f9      	bhi.n	8004d3c <__lshift+0xc0>
 8004d48:	e7ea      	b.n	8004d20 <__lshift+0xa4>
 8004d4a:	bf00      	nop
 8004d4c:	0800644f 	.word	0x0800644f
 8004d50:	080064c0 	.word	0x080064c0

08004d54 <__mcmp>:
 8004d54:	b530      	push	{r4, r5, lr}
 8004d56:	6902      	ldr	r2, [r0, #16]
 8004d58:	690c      	ldr	r4, [r1, #16]
 8004d5a:	1b12      	subs	r2, r2, r4
 8004d5c:	d10e      	bne.n	8004d7c <__mcmp+0x28>
 8004d5e:	f100 0314 	add.w	r3, r0, #20
 8004d62:	3114      	adds	r1, #20
 8004d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004d74:	42a5      	cmp	r5, r4
 8004d76:	d003      	beq.n	8004d80 <__mcmp+0x2c>
 8004d78:	d305      	bcc.n	8004d86 <__mcmp+0x32>
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	bd30      	pop	{r4, r5, pc}
 8004d80:	4283      	cmp	r3, r0
 8004d82:	d3f3      	bcc.n	8004d6c <__mcmp+0x18>
 8004d84:	e7fa      	b.n	8004d7c <__mcmp+0x28>
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d8a:	e7f7      	b.n	8004d7c <__mcmp+0x28>

08004d8c <__mdiff>:
 8004d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	460c      	mov	r4, r1
 8004d92:	4606      	mov	r6, r0
 8004d94:	4611      	mov	r1, r2
 8004d96:	4620      	mov	r0, r4
 8004d98:	4617      	mov	r7, r2
 8004d9a:	f7ff ffdb 	bl	8004d54 <__mcmp>
 8004d9e:	1e05      	subs	r5, r0, #0
 8004da0:	d110      	bne.n	8004dc4 <__mdiff+0x38>
 8004da2:	4629      	mov	r1, r5
 8004da4:	4630      	mov	r0, r6
 8004da6:	f7ff fd57 	bl	8004858 <_Balloc>
 8004daa:	b930      	cbnz	r0, 8004dba <__mdiff+0x2e>
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <__mdiff+0x108>)
 8004dae:	4602      	mov	r2, r0
 8004db0:	f240 2132 	movw	r1, #562	; 0x232
 8004db4:	4838      	ldr	r0, [pc, #224]	; (8004e98 <__mdiff+0x10c>)
 8004db6:	f000 fa7d 	bl	80052b4 <__assert_func>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	bfa4      	itt	ge
 8004dc6:	463b      	movge	r3, r7
 8004dc8:	4627      	movge	r7, r4
 8004dca:	4630      	mov	r0, r6
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	bfa6      	itte	ge
 8004dd0:	461c      	movge	r4, r3
 8004dd2:	2500      	movge	r5, #0
 8004dd4:	2501      	movlt	r5, #1
 8004dd6:	f7ff fd3f 	bl	8004858 <_Balloc>
 8004dda:	b920      	cbnz	r0, 8004de6 <__mdiff+0x5a>
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <__mdiff+0x108>)
 8004dde:	4602      	mov	r2, r0
 8004de0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004de4:	e7e6      	b.n	8004db4 <__mdiff+0x28>
 8004de6:	693e      	ldr	r6, [r7, #16]
 8004de8:	60c5      	str	r5, [r0, #12]
 8004dea:	6925      	ldr	r5, [r4, #16]
 8004dec:	f107 0114 	add.w	r1, r7, #20
 8004df0:	f104 0914 	add.w	r9, r4, #20
 8004df4:	f100 0e14 	add.w	lr, r0, #20
 8004df8:	f107 0210 	add.w	r2, r7, #16
 8004dfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004e00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004e04:	46f2      	mov	sl, lr
 8004e06:	2700      	movs	r7, #0
 8004e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004e10:	fa1f f883 	uxth.w	r8, r3
 8004e14:	fa17 f78b 	uxtah	r7, r7, fp
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	eba7 0808 	sub.w	r8, r7, r8
 8004e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004e26:	fa1f f888 	uxth.w	r8, r8
 8004e2a:	141f      	asrs	r7, r3, #16
 8004e2c:	454d      	cmp	r5, r9
 8004e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004e32:	f84a 3b04 	str.w	r3, [sl], #4
 8004e36:	d8e7      	bhi.n	8004e08 <__mdiff+0x7c>
 8004e38:	1b2b      	subs	r3, r5, r4
 8004e3a:	3b15      	subs	r3, #21
 8004e3c:	f023 0303 	bic.w	r3, r3, #3
 8004e40:	3304      	adds	r3, #4
 8004e42:	3415      	adds	r4, #21
 8004e44:	42a5      	cmp	r5, r4
 8004e46:	bf38      	it	cc
 8004e48:	2304      	movcc	r3, #4
 8004e4a:	4419      	add	r1, r3
 8004e4c:	4473      	add	r3, lr
 8004e4e:	469e      	mov	lr, r3
 8004e50:	460d      	mov	r5, r1
 8004e52:	4565      	cmp	r5, ip
 8004e54:	d30e      	bcc.n	8004e74 <__mdiff+0xe8>
 8004e56:	f10c 0203 	add.w	r2, ip, #3
 8004e5a:	1a52      	subs	r2, r2, r1
 8004e5c:	f022 0203 	bic.w	r2, r2, #3
 8004e60:	3903      	subs	r1, #3
 8004e62:	458c      	cmp	ip, r1
 8004e64:	bf38      	it	cc
 8004e66:	2200      	movcc	r2, #0
 8004e68:	441a      	add	r2, r3
 8004e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004e6e:	b17b      	cbz	r3, 8004e90 <__mdiff+0x104>
 8004e70:	6106      	str	r6, [r0, #16]
 8004e72:	e7a5      	b.n	8004dc0 <__mdiff+0x34>
 8004e74:	f855 8b04 	ldr.w	r8, [r5], #4
 8004e78:	fa17 f488 	uxtah	r4, r7, r8
 8004e7c:	1422      	asrs	r2, r4, #16
 8004e7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004e82:	b2a4      	uxth	r4, r4
 8004e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004e88:	f84e 4b04 	str.w	r4, [lr], #4
 8004e8c:	1417      	asrs	r7, r2, #16
 8004e8e:	e7e0      	b.n	8004e52 <__mdiff+0xc6>
 8004e90:	3e01      	subs	r6, #1
 8004e92:	e7ea      	b.n	8004e6a <__mdiff+0xde>
 8004e94:	0800644f 	.word	0x0800644f
 8004e98:	080064c0 	.word	0x080064c0

08004e9c <__d2b>:
 8004e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	ec57 6b10 	vmov	r6, r7, d0
 8004ea8:	4690      	mov	r8, r2
 8004eaa:	f7ff fcd5 	bl	8004858 <_Balloc>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	b930      	cbnz	r0, 8004ec0 <__d2b+0x24>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <__d2b+0xb0>)
 8004eb6:	4826      	ldr	r0, [pc, #152]	; (8004f50 <__d2b+0xb4>)
 8004eb8:	f240 310a 	movw	r1, #778	; 0x30a
 8004ebc:	f000 f9fa 	bl	80052b4 <__assert_func>
 8004ec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ec8:	bb35      	cbnz	r5, 8004f18 <__d2b+0x7c>
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	d028      	beq.n	8004f22 <__d2b+0x86>
 8004ed0:	4668      	mov	r0, sp
 8004ed2:	9600      	str	r6, [sp, #0]
 8004ed4:	f7ff fd8c 	bl	80049f0 <__lo0bits>
 8004ed8:	9900      	ldr	r1, [sp, #0]
 8004eda:	b300      	cbz	r0, 8004f1e <__d2b+0x82>
 8004edc:	9a01      	ldr	r2, [sp, #4]
 8004ede:	f1c0 0320 	rsb	r3, r0, #32
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	40c2      	lsrs	r2, r0
 8004eea:	6163      	str	r3, [r4, #20]
 8004eec:	9201      	str	r2, [sp, #4]
 8004eee:	9b01      	ldr	r3, [sp, #4]
 8004ef0:	61a3      	str	r3, [r4, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2202      	movne	r2, #2
 8004ef8:	2201      	moveq	r2, #1
 8004efa:	6122      	str	r2, [r4, #16]
 8004efc:	b1d5      	cbz	r5, 8004f34 <__d2b+0x98>
 8004efe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f02:	4405      	add	r5, r0
 8004f04:	f8c9 5000 	str.w	r5, [r9]
 8004f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f0c:	f8c8 0000 	str.w	r0, [r8]
 8004f10:	4620      	mov	r0, r4
 8004f12:	b003      	add	sp, #12
 8004f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1c:	e7d5      	b.n	8004eca <__d2b+0x2e>
 8004f1e:	6161      	str	r1, [r4, #20]
 8004f20:	e7e5      	b.n	8004eee <__d2b+0x52>
 8004f22:	a801      	add	r0, sp, #4
 8004f24:	f7ff fd64 	bl	80049f0 <__lo0bits>
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	6163      	str	r3, [r4, #20]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	6122      	str	r2, [r4, #16]
 8004f30:	3020      	adds	r0, #32
 8004f32:	e7e3      	b.n	8004efc <__d2b+0x60>
 8004f34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f3c:	f8c9 0000 	str.w	r0, [r9]
 8004f40:	6918      	ldr	r0, [r3, #16]
 8004f42:	f7ff fd35 	bl	80049b0 <__hi0bits>
 8004f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f4a:	e7df      	b.n	8004f0c <__d2b+0x70>
 8004f4c:	0800644f 	.word	0x0800644f
 8004f50:	080064c0 	.word	0x080064c0

08004f54 <__sfputc_r>:
 8004f54:	6893      	ldr	r3, [r2, #8]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	b410      	push	{r4}
 8004f5c:	6093      	str	r3, [r2, #8]
 8004f5e:	da08      	bge.n	8004f72 <__sfputc_r+0x1e>
 8004f60:	6994      	ldr	r4, [r2, #24]
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	db01      	blt.n	8004f6a <__sfputc_r+0x16>
 8004f66:	290a      	cmp	r1, #10
 8004f68:	d103      	bne.n	8004f72 <__sfputc_r+0x1e>
 8004f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f6e:	f7fe bb09 	b.w	8003584 <__swbuf_r>
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	1c58      	adds	r0, r3, #1
 8004f76:	6010      	str	r0, [r2, #0]
 8004f78:	7019      	strb	r1, [r3, #0]
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <__sfputs_r>:
 8004f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	18d5      	adds	r5, r2, r3
 8004f8c:	42ac      	cmp	r4, r5
 8004f8e:	d101      	bne.n	8004f94 <__sfputs_r+0x12>
 8004f90:	2000      	movs	r0, #0
 8004f92:	e007      	b.n	8004fa4 <__sfputs_r+0x22>
 8004f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f98:	463a      	mov	r2, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7ff ffda 	bl	8004f54 <__sfputc_r>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d1f3      	bne.n	8004f8c <__sfputs_r+0xa>
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fa8 <_vfiprintf_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	460d      	mov	r5, r1
 8004fae:	b09d      	sub	sp, #116	; 0x74
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	b118      	cbz	r0, 8004fc0 <_vfiprintf_r+0x18>
 8004fb8:	6983      	ldr	r3, [r0, #24]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_vfiprintf_r+0x18>
 8004fbc:	f7ff fb36 	bl	800462c <__sinit>
 8004fc0:	4b89      	ldr	r3, [pc, #548]	; (80051e8 <_vfiprintf_r+0x240>)
 8004fc2:	429d      	cmp	r5, r3
 8004fc4:	d11b      	bne.n	8004ffe <_vfiprintf_r+0x56>
 8004fc6:	6875      	ldr	r5, [r6, #4]
 8004fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fca:	07d9      	lsls	r1, r3, #31
 8004fcc:	d405      	bmi.n	8004fda <_vfiprintf_r+0x32>
 8004fce:	89ab      	ldrh	r3, [r5, #12]
 8004fd0:	059a      	lsls	r2, r3, #22
 8004fd2:	d402      	bmi.n	8004fda <_vfiprintf_r+0x32>
 8004fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fd6:	f7ff fbcc 	bl	8004772 <__retarget_lock_acquire_recursive>
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	071b      	lsls	r3, r3, #28
 8004fde:	d501      	bpl.n	8004fe4 <_vfiprintf_r+0x3c>
 8004fe0:	692b      	ldr	r3, [r5, #16]
 8004fe2:	b9eb      	cbnz	r3, 8005020 <_vfiprintf_r+0x78>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7fe fb1e 	bl	8003628 <__swsetup_r>
 8004fec:	b1c0      	cbz	r0, 8005020 <_vfiprintf_r+0x78>
 8004fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff0:	07dc      	lsls	r4, r3, #31
 8004ff2:	d50e      	bpl.n	8005012 <_vfiprintf_r+0x6a>
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ff8:	b01d      	add	sp, #116	; 0x74
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	4b7b      	ldr	r3, [pc, #492]	; (80051ec <_vfiprintf_r+0x244>)
 8005000:	429d      	cmp	r5, r3
 8005002:	d101      	bne.n	8005008 <_vfiprintf_r+0x60>
 8005004:	68b5      	ldr	r5, [r6, #8]
 8005006:	e7df      	b.n	8004fc8 <_vfiprintf_r+0x20>
 8005008:	4b79      	ldr	r3, [pc, #484]	; (80051f0 <_vfiprintf_r+0x248>)
 800500a:	429d      	cmp	r5, r3
 800500c:	bf08      	it	eq
 800500e:	68f5      	ldreq	r5, [r6, #12]
 8005010:	e7da      	b.n	8004fc8 <_vfiprintf_r+0x20>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	0598      	lsls	r0, r3, #22
 8005016:	d4ed      	bmi.n	8004ff4 <_vfiprintf_r+0x4c>
 8005018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800501a:	f7ff fbab 	bl	8004774 <__retarget_lock_release_recursive>
 800501e:	e7e9      	b.n	8004ff4 <_vfiprintf_r+0x4c>
 8005020:	2300      	movs	r3, #0
 8005022:	9309      	str	r3, [sp, #36]	; 0x24
 8005024:	2320      	movs	r3, #32
 8005026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800502a:	f8cd 800c 	str.w	r8, [sp, #12]
 800502e:	2330      	movs	r3, #48	; 0x30
 8005030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051f4 <_vfiprintf_r+0x24c>
 8005034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005038:	f04f 0901 	mov.w	r9, #1
 800503c:	4623      	mov	r3, r4
 800503e:	469a      	mov	sl, r3
 8005040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005044:	b10a      	cbz	r2, 800504a <_vfiprintf_r+0xa2>
 8005046:	2a25      	cmp	r2, #37	; 0x25
 8005048:	d1f9      	bne.n	800503e <_vfiprintf_r+0x96>
 800504a:	ebba 0b04 	subs.w	fp, sl, r4
 800504e:	d00b      	beq.n	8005068 <_vfiprintf_r+0xc0>
 8005050:	465b      	mov	r3, fp
 8005052:	4622      	mov	r2, r4
 8005054:	4629      	mov	r1, r5
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff ff93 	bl	8004f82 <__sfputs_r>
 800505c:	3001      	adds	r0, #1
 800505e:	f000 80aa 	beq.w	80051b6 <_vfiprintf_r+0x20e>
 8005062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005064:	445a      	add	r2, fp
 8005066:	9209      	str	r2, [sp, #36]	; 0x24
 8005068:	f89a 3000 	ldrb.w	r3, [sl]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80a2 	beq.w	80051b6 <_vfiprintf_r+0x20e>
 8005072:	2300      	movs	r3, #0
 8005074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800507c:	f10a 0a01 	add.w	sl, sl, #1
 8005080:	9304      	str	r3, [sp, #16]
 8005082:	9307      	str	r3, [sp, #28]
 8005084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005088:	931a      	str	r3, [sp, #104]	; 0x68
 800508a:	4654      	mov	r4, sl
 800508c:	2205      	movs	r2, #5
 800508e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005092:	4858      	ldr	r0, [pc, #352]	; (80051f4 <_vfiprintf_r+0x24c>)
 8005094:	f7fb f8c4 	bl	8000220 <memchr>
 8005098:	9a04      	ldr	r2, [sp, #16]
 800509a:	b9d8      	cbnz	r0, 80050d4 <_vfiprintf_r+0x12c>
 800509c:	06d1      	lsls	r1, r2, #27
 800509e:	bf44      	itt	mi
 80050a0:	2320      	movmi	r3, #32
 80050a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a6:	0713      	lsls	r3, r2, #28
 80050a8:	bf44      	itt	mi
 80050aa:	232b      	movmi	r3, #43	; 0x2b
 80050ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b0:	f89a 3000 	ldrb.w	r3, [sl]
 80050b4:	2b2a      	cmp	r3, #42	; 0x2a
 80050b6:	d015      	beq.n	80050e4 <_vfiprintf_r+0x13c>
 80050b8:	9a07      	ldr	r2, [sp, #28]
 80050ba:	4654      	mov	r4, sl
 80050bc:	2000      	movs	r0, #0
 80050be:	f04f 0c0a 	mov.w	ip, #10
 80050c2:	4621      	mov	r1, r4
 80050c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c8:	3b30      	subs	r3, #48	; 0x30
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d94e      	bls.n	800516c <_vfiprintf_r+0x1c4>
 80050ce:	b1b0      	cbz	r0, 80050fe <_vfiprintf_r+0x156>
 80050d0:	9207      	str	r2, [sp, #28]
 80050d2:	e014      	b.n	80050fe <_vfiprintf_r+0x156>
 80050d4:	eba0 0308 	sub.w	r3, r0, r8
 80050d8:	fa09 f303 	lsl.w	r3, r9, r3
 80050dc:	4313      	orrs	r3, r2
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	46a2      	mov	sl, r4
 80050e2:	e7d2      	b.n	800508a <_vfiprintf_r+0xe2>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	1d19      	adds	r1, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	9103      	str	r1, [sp, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfbb      	ittet	lt
 80050f0:	425b      	neglt	r3, r3
 80050f2:	f042 0202 	orrlt.w	r2, r2, #2
 80050f6:	9307      	strge	r3, [sp, #28]
 80050f8:	9307      	strlt	r3, [sp, #28]
 80050fa:	bfb8      	it	lt
 80050fc:	9204      	strlt	r2, [sp, #16]
 80050fe:	7823      	ldrb	r3, [r4, #0]
 8005100:	2b2e      	cmp	r3, #46	; 0x2e
 8005102:	d10c      	bne.n	800511e <_vfiprintf_r+0x176>
 8005104:	7863      	ldrb	r3, [r4, #1]
 8005106:	2b2a      	cmp	r3, #42	; 0x2a
 8005108:	d135      	bne.n	8005176 <_vfiprintf_r+0x1ce>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	1d1a      	adds	r2, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9203      	str	r2, [sp, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfb8      	it	lt
 8005116:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800511a:	3402      	adds	r4, #2
 800511c:	9305      	str	r3, [sp, #20]
 800511e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005204 <_vfiprintf_r+0x25c>
 8005122:	7821      	ldrb	r1, [r4, #0]
 8005124:	2203      	movs	r2, #3
 8005126:	4650      	mov	r0, sl
 8005128:	f7fb f87a 	bl	8000220 <memchr>
 800512c:	b140      	cbz	r0, 8005140 <_vfiprintf_r+0x198>
 800512e:	2340      	movs	r3, #64	; 0x40
 8005130:	eba0 000a 	sub.w	r0, r0, sl
 8005134:	fa03 f000 	lsl.w	r0, r3, r0
 8005138:	9b04      	ldr	r3, [sp, #16]
 800513a:	4303      	orrs	r3, r0
 800513c:	3401      	adds	r4, #1
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005144:	482c      	ldr	r0, [pc, #176]	; (80051f8 <_vfiprintf_r+0x250>)
 8005146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800514a:	2206      	movs	r2, #6
 800514c:	f7fb f868 	bl	8000220 <memchr>
 8005150:	2800      	cmp	r0, #0
 8005152:	d03f      	beq.n	80051d4 <_vfiprintf_r+0x22c>
 8005154:	4b29      	ldr	r3, [pc, #164]	; (80051fc <_vfiprintf_r+0x254>)
 8005156:	bb1b      	cbnz	r3, 80051a0 <_vfiprintf_r+0x1f8>
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	3307      	adds	r3, #7
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	3308      	adds	r3, #8
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005166:	443b      	add	r3, r7
 8005168:	9309      	str	r3, [sp, #36]	; 0x24
 800516a:	e767      	b.n	800503c <_vfiprintf_r+0x94>
 800516c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005170:	460c      	mov	r4, r1
 8005172:	2001      	movs	r0, #1
 8005174:	e7a5      	b.n	80050c2 <_vfiprintf_r+0x11a>
 8005176:	2300      	movs	r3, #0
 8005178:	3401      	adds	r4, #1
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	4619      	mov	r1, r3
 800517e:	f04f 0c0a 	mov.w	ip, #10
 8005182:	4620      	mov	r0, r4
 8005184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005188:	3a30      	subs	r2, #48	; 0x30
 800518a:	2a09      	cmp	r2, #9
 800518c:	d903      	bls.n	8005196 <_vfiprintf_r+0x1ee>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0c5      	beq.n	800511e <_vfiprintf_r+0x176>
 8005192:	9105      	str	r1, [sp, #20]
 8005194:	e7c3      	b.n	800511e <_vfiprintf_r+0x176>
 8005196:	fb0c 2101 	mla	r1, ip, r1, r2
 800519a:	4604      	mov	r4, r0
 800519c:	2301      	movs	r3, #1
 800519e:	e7f0      	b.n	8005182 <_vfiprintf_r+0x1da>
 80051a0:	ab03      	add	r3, sp, #12
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	462a      	mov	r2, r5
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <_vfiprintf_r+0x258>)
 80051a8:	a904      	add	r1, sp, #16
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fd fd82 	bl	8002cb4 <_printf_float>
 80051b0:	4607      	mov	r7, r0
 80051b2:	1c78      	adds	r0, r7, #1
 80051b4:	d1d6      	bne.n	8005164 <_vfiprintf_r+0x1bc>
 80051b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051b8:	07d9      	lsls	r1, r3, #31
 80051ba:	d405      	bmi.n	80051c8 <_vfiprintf_r+0x220>
 80051bc:	89ab      	ldrh	r3, [r5, #12]
 80051be:	059a      	lsls	r2, r3, #22
 80051c0:	d402      	bmi.n	80051c8 <_vfiprintf_r+0x220>
 80051c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051c4:	f7ff fad6 	bl	8004774 <__retarget_lock_release_recursive>
 80051c8:	89ab      	ldrh	r3, [r5, #12]
 80051ca:	065b      	lsls	r3, r3, #25
 80051cc:	f53f af12 	bmi.w	8004ff4 <_vfiprintf_r+0x4c>
 80051d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d2:	e711      	b.n	8004ff8 <_vfiprintf_r+0x50>
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	462a      	mov	r2, r5
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <_vfiprintf_r+0x258>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	4630      	mov	r0, r6
 80051e0:	f7fe f80c 	bl	80031fc <_printf_i>
 80051e4:	e7e4      	b.n	80051b0 <_vfiprintf_r+0x208>
 80051e6:	bf00      	nop
 80051e8:	08006480 	.word	0x08006480
 80051ec:	080064a0 	.word	0x080064a0
 80051f0:	08006460 	.word	0x08006460
 80051f4:	0800661c 	.word	0x0800661c
 80051f8:	08006626 	.word	0x08006626
 80051fc:	08002cb5 	.word	0x08002cb5
 8005200:	08004f83 	.word	0x08004f83
 8005204:	08006622 	.word	0x08006622

08005208 <__sread>:
 8005208:	b510      	push	{r4, lr}
 800520a:	460c      	mov	r4, r1
 800520c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005210:	f000 f8d6 	bl	80053c0 <_read_r>
 8005214:	2800      	cmp	r0, #0
 8005216:	bfab      	itete	ge
 8005218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800521a:	89a3      	ldrhlt	r3, [r4, #12]
 800521c:	181b      	addge	r3, r3, r0
 800521e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005222:	bfac      	ite	ge
 8005224:	6563      	strge	r3, [r4, #84]	; 0x54
 8005226:	81a3      	strhlt	r3, [r4, #12]
 8005228:	bd10      	pop	{r4, pc}

0800522a <__swrite>:
 800522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522e:	461f      	mov	r7, r3
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	05db      	lsls	r3, r3, #23
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
 8005238:	4616      	mov	r6, r2
 800523a:	d505      	bpl.n	8005248 <__swrite+0x1e>
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	2302      	movs	r3, #2
 8005242:	2200      	movs	r2, #0
 8005244:	f000 f898 	bl	8005378 <_lseek_r>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	4628      	mov	r0, r5
 800525a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	f000 b817 	b.w	8005290 <_write_r>

08005262 <__sseek>:
 8005262:	b510      	push	{r4, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526a:	f000 f885 	bl	8005378 <_lseek_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	bf15      	itete	ne
 8005274:	6560      	strne	r0, [r4, #84]	; 0x54
 8005276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800527a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strheq	r3, [r4, #12]
 8005280:	bf18      	it	ne
 8005282:	81a3      	strhne	r3, [r4, #12]
 8005284:	bd10      	pop	{r4, pc}

08005286 <__sclose>:
 8005286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528a:	f000 b831 	b.w	80052f0 <_close_r>
	...

08005290 <_write_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4d07      	ldr	r5, [pc, #28]	; (80052b0 <_write_r+0x20>)
 8005294:	4604      	mov	r4, r0
 8005296:	4608      	mov	r0, r1
 8005298:	4611      	mov	r1, r2
 800529a:	2200      	movs	r2, #0
 800529c:	602a      	str	r2, [r5, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	f7fc f88c 	bl	80013bc <_write>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_write_r+0x1e>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_write_r+0x1e>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20000234 	.word	0x20000234

080052b4 <__assert_func>:
 80052b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052b6:	4614      	mov	r4, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <__assert_func+0x2c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4605      	mov	r5, r0
 80052c0:	68d8      	ldr	r0, [r3, #12]
 80052c2:	b14c      	cbz	r4, 80052d8 <__assert_func+0x24>
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <__assert_func+0x30>)
 80052c6:	9100      	str	r1, [sp, #0]
 80052c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052cc:	4906      	ldr	r1, [pc, #24]	; (80052e8 <__assert_func+0x34>)
 80052ce:	462b      	mov	r3, r5
 80052d0:	f000 f81e 	bl	8005310 <fiprintf>
 80052d4:	f000 f893 	bl	80053fe <abort>
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__assert_func+0x38>)
 80052da:	461c      	mov	r4, r3
 80052dc:	e7f3      	b.n	80052c6 <__assert_func+0x12>
 80052de:	bf00      	nop
 80052e0:	2000000c 	.word	0x2000000c
 80052e4:	0800662d 	.word	0x0800662d
 80052e8:	0800663a 	.word	0x0800663a
 80052ec:	08006668 	.word	0x08006668

080052f0 <_close_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d06      	ldr	r5, [pc, #24]	; (800530c <_close_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fc fac8 	bl	8001890 <_close>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_close_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_close_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	20000234 	.word	0x20000234

08005310 <fiprintf>:
 8005310:	b40e      	push	{r1, r2, r3}
 8005312:	b503      	push	{r0, r1, lr}
 8005314:	4601      	mov	r1, r0
 8005316:	ab03      	add	r3, sp, #12
 8005318:	4805      	ldr	r0, [pc, #20]	; (8005330 <fiprintf+0x20>)
 800531a:	f853 2b04 	ldr.w	r2, [r3], #4
 800531e:	6800      	ldr	r0, [r0, #0]
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	f7ff fe41 	bl	8004fa8 <_vfiprintf_r>
 8005326:	b002      	add	sp, #8
 8005328:	f85d eb04 	ldr.w	lr, [sp], #4
 800532c:	b003      	add	sp, #12
 800532e:	4770      	bx	lr
 8005330:	2000000c 	.word	0x2000000c

08005334 <_fstat_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d07      	ldr	r5, [pc, #28]	; (8005354 <_fstat_r+0x20>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	f7fc faa9 	bl	8001898 <_fstat>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d102      	bne.n	8005350 <_fstat_r+0x1c>
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	b103      	cbz	r3, 8005350 <_fstat_r+0x1c>
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	bd38      	pop	{r3, r4, r5, pc}
 8005352:	bf00      	nop
 8005354:	20000234 	.word	0x20000234

08005358 <_isatty_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d06      	ldr	r5, [pc, #24]	; (8005374 <_isatty_r+0x1c>)
 800535c:	2300      	movs	r3, #0
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fc fa9e 	bl	80018a4 <_isatty>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_isatty_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_isatty_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20000234 	.word	0x20000234

08005378 <_lseek_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d07      	ldr	r5, [pc, #28]	; (8005398 <_lseek_r+0x20>)
 800537c:	4604      	mov	r4, r0
 800537e:	4608      	mov	r0, r1
 8005380:	4611      	mov	r1, r2
 8005382:	2200      	movs	r2, #0
 8005384:	602a      	str	r2, [r5, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	f7fc fa8e 	bl	80018a8 <_lseek>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_lseek_r+0x1e>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_lseek_r+0x1e>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20000234 	.word	0x20000234

0800539c <__ascii_mbtowc>:
 800539c:	b082      	sub	sp, #8
 800539e:	b901      	cbnz	r1, 80053a2 <__ascii_mbtowc+0x6>
 80053a0:	a901      	add	r1, sp, #4
 80053a2:	b142      	cbz	r2, 80053b6 <__ascii_mbtowc+0x1a>
 80053a4:	b14b      	cbz	r3, 80053ba <__ascii_mbtowc+0x1e>
 80053a6:	7813      	ldrb	r3, [r2, #0]
 80053a8:	600b      	str	r3, [r1, #0]
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	1e10      	subs	r0, r2, #0
 80053ae:	bf18      	it	ne
 80053b0:	2001      	movne	r0, #1
 80053b2:	b002      	add	sp, #8
 80053b4:	4770      	bx	lr
 80053b6:	4610      	mov	r0, r2
 80053b8:	e7fb      	b.n	80053b2 <__ascii_mbtowc+0x16>
 80053ba:	f06f 0001 	mvn.w	r0, #1
 80053be:	e7f8      	b.n	80053b2 <__ascii_mbtowc+0x16>

080053c0 <_read_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <_read_r+0x20>)
 80053c4:	4604      	mov	r4, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fc fa50 	bl	8001874 <_read>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_read_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_read_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000234 	.word	0x20000234

080053e4 <__ascii_wctomb>:
 80053e4:	b149      	cbz	r1, 80053fa <__ascii_wctomb+0x16>
 80053e6:	2aff      	cmp	r2, #255	; 0xff
 80053e8:	bf85      	ittet	hi
 80053ea:	238a      	movhi	r3, #138	; 0x8a
 80053ec:	6003      	strhi	r3, [r0, #0]
 80053ee:	700a      	strbls	r2, [r1, #0]
 80053f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80053f4:	bf98      	it	ls
 80053f6:	2001      	movls	r0, #1
 80053f8:	4770      	bx	lr
 80053fa:	4608      	mov	r0, r1
 80053fc:	4770      	bx	lr

080053fe <abort>:
 80053fe:	b508      	push	{r3, lr}
 8005400:	2006      	movs	r0, #6
 8005402:	f000 f82b 	bl	800545c <raise>
 8005406:	2001      	movs	r0, #1
 8005408:	f7fc fa2e 	bl	8001868 <_exit>

0800540c <_raise_r>:
 800540c:	291f      	cmp	r1, #31
 800540e:	b538      	push	{r3, r4, r5, lr}
 8005410:	4604      	mov	r4, r0
 8005412:	460d      	mov	r5, r1
 8005414:	d904      	bls.n	8005420 <_raise_r+0x14>
 8005416:	2316      	movs	r3, #22
 8005418:	6003      	str	r3, [r0, #0]
 800541a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005422:	b112      	cbz	r2, 800542a <_raise_r+0x1e>
 8005424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005428:	b94b      	cbnz	r3, 800543e <_raise_r+0x32>
 800542a:	4620      	mov	r0, r4
 800542c:	f000 f830 	bl	8005490 <_getpid_r>
 8005430:	462a      	mov	r2, r5
 8005432:	4601      	mov	r1, r0
 8005434:	4620      	mov	r0, r4
 8005436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800543a:	f000 b817 	b.w	800546c <_kill_r>
 800543e:	2b01      	cmp	r3, #1
 8005440:	d00a      	beq.n	8005458 <_raise_r+0x4c>
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	d103      	bne.n	800544e <_raise_r+0x42>
 8005446:	2316      	movs	r3, #22
 8005448:	6003      	str	r3, [r0, #0]
 800544a:	2001      	movs	r0, #1
 800544c:	e7e7      	b.n	800541e <_raise_r+0x12>
 800544e:	2400      	movs	r4, #0
 8005450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005454:	4628      	mov	r0, r5
 8005456:	4798      	blx	r3
 8005458:	2000      	movs	r0, #0
 800545a:	e7e0      	b.n	800541e <_raise_r+0x12>

0800545c <raise>:
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <raise+0xc>)
 800545e:	4601      	mov	r1, r0
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	f7ff bfd3 	b.w	800540c <_raise_r>
 8005466:	bf00      	nop
 8005468:	2000000c 	.word	0x2000000c

0800546c <_kill_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	; (800548c <_kill_r+0x20>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f7fc f9ed 	bl	8001858 <_kill>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d102      	bne.n	8005488 <_kill_r+0x1c>
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	b103      	cbz	r3, 8005488 <_kill_r+0x1c>
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	20000234 	.word	0x20000234

08005490 <_getpid_r>:
 8005490:	f7fc b9e0 	b.w	8001854 <_getpid>

08005494 <_init>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr

080054a0 <_fini>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr
